{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "dummyOpUp(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "dlog(byte[],byte[],byte[],byte[])bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "hashPointToPoint(byte[])byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getGameState()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setLSIGFunderAddress(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "joinGameLobby(pay,byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "dayStageVote(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "dayStageEliminate()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "dayStageUnmasking(byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "nightStageMafiaCommit(byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "nightStageDoctorCommit(byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "dawnStageMafiaReveal(address,byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "dawnStageDoctorReveal(address,byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "dawnStageDeadOrSaved()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "dawnStageUnmasking(byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "gameOver()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "creatorAddress": {
          "type": "bytes",
          "key": "creatorAddress"
        },
        "player1AlgoAddr": {
          "type": "bytes",
          "key": "player1AlgoAddr"
        },
        "player2AlgoAddr": {
          "type": "bytes",
          "key": "player2AlgoAddr"
        },
        "player3AlgoAddr": {
          "type": "bytes",
          "key": "player3AlgoAddr"
        },
        "player4AlgoAddr": {
          "type": "bytes",
          "key": "player4AlgoAddr"
        },
        "player5AlgoAddr": {
          "type": "bytes",
          "key": "player5AlgoAddr"
        },
        "player6AlgoAddr": {
          "type": "bytes",
          "key": "player6AlgoAddr"
        },
        "mafia": {
          "type": "bytes",
          "key": "mafia"
        },
        "mafiaKeyImage": {
          "type": "bytes",
          "key": "mafiaKeyImage"
        },
        "doctor": {
          "type": "bytes",
          "key": "doctor"
        },
        "doctorKeyImage": {
          "type": "bytes",
          "key": "doctorKeyImage"
        },
        "farmer": {
          "type": "bytes",
          "key": "farmer"
        },
        "farmerKeyImage": {
          "type": "bytes",
          "key": "farmerKeyImage"
        },
        "butcher": {
          "type": "bytes",
          "key": "butcher"
        },
        "butcherKeyImage": {
          "type": "bytes",
          "key": "butcherKeyImage"
        },
        "innkeep": {
          "type": "bytes",
          "key": "innkeep"
        },
        "innkeepKeyImage": {
          "type": "bytes",
          "key": "innkeepKeyImage"
        },
        "grocer": {
          "type": "bytes",
          "key": "grocer"
        },
        "grocerKeyImage": {
          "type": "bytes",
          "key": "grocerKeyImage"
        },
        "lsigFunderAddress": {
          "type": "bytes",
          "key": "lsigFunderAddress"
        },
        "player1HasVoted": {
          "type": "uint64",
          "key": "player1HasVoted"
        },
        "player1ReceivedVotes": {
          "type": "uint64",
          "key": "player1ReceivedVotes"
        },
        "player2HasVoted": {
          "type": "uint64",
          "key": "player2HasVoted"
        },
        "player2ReceivedVotes": {
          "type": "uint64",
          "key": "player2ReceivedVotes"
        },
        "player3HasVoted": {
          "type": "uint64",
          "key": "player3HasVoted"
        },
        "player3ReceivedVotes": {
          "type": "uint64",
          "key": "player3ReceivedVotes"
        },
        "player4HasVoted": {
          "type": "uint64",
          "key": "player4HasVoted"
        },
        "player4ReceivedVotes": {
          "type": "uint64",
          "key": "player4ReceivedVotes"
        },
        "player5HasVoted": {
          "type": "uint64",
          "key": "player5HasVoted"
        },
        "player5ReceivedVotes": {
          "type": "uint64",
          "key": "player5ReceivedVotes"
        },
        "player6HasVoted": {
          "type": "uint64",
          "key": "player6HasVoted"
        },
        "player6ReceivedVotes": {
          "type": "uint64",
          "key": "player6ReceivedVotes"
        },
        "playersVoted": {
          "type": "uint64",
          "key": "playersVoted"
        },
        "playersAlive": {
          "type": "uint64",
          "key": "playersAlive"
        },
        "justEliminatedPlayer": {
          "type": "bytes",
          "key": "justEliminatedPlayer"
        },
        "mafiaCommitment": {
          "type": "bytes",
          "key": "mafiaCommitment"
        },
        "doctorCommitment": {
          "type": "bytes",
          "key": "doctorCommitment"
        },
        "mafiaVictim": {
          "type": "bytes",
          "key": "mafiaVictim"
        },
        "doctorPatient": {
          "type": "bytes",
          "key": "doctorPatient"
        },
        "playersJoined": {
          "type": "uint64",
          "key": "playersJoined"
        },
        "gameState": {
          "type": "uint64",
          "key": "gameState"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 25,
      "num_uints": 16
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAxIDAgMiA2IDMgMTIgMzIgNCA1IDcgOCAxMCA5NiAxNTAwMDAgOSAxMQpieXRlY2Jsb2NrIDB4Njc2MTZkNjU1Mzc0NjE3NDY1IDB4NmE3NTczNzQ0NTZjNjk2ZDY5NmU2MTc0NjU2NDUwNmM2MTc5NjU3MiAweDcwNmM2MTc5NjU3MjMxNDE2YzY3NmY0MTY0NjQ3MiAweDcwNmM2MTc5NjU3MjMyNDE2YzY3NmY0MTY0NjQ3MiAweDcwNmM2MTc5NjU3MjMzNDE2YzY3NmY0MTY0NjQ3MiAweDcwNmM2MTc5NjU3MjM0NDE2YzY3NmY0MTY0NjQ3MiAweDcwNmM2MTc5NjU3MjM1NDE2YzY3NmY0MTY0NjQ3MiAweDcwNmM2MTc5NjU3MjM2NDE2YzY3NmY0MTY0NjQ3MiAweCAweDZkNjE2NjY5NjE1NjY5NjM3NDY5NmQgMHgwMDAwMDAwMDAwMDAwMDAwIDB4NjQ2ZjYzNzQ2ZjcyNTA2MTc0Njk2NTZlNzQgMHgwMDAwMDAwMDAwMDAwMDAxIDB4NjQ2ZjYzNzQ2ZjcyIDB4NzA2YzYxNzk2NTcyNzM0MTZjNjk3NjY1IDB4NzA2YzYxNzk2NTcyMzE1MjY1NjM2NTY5NzY2NTY0NTY2Zjc0NjU3MyAweDcwNmM2MTc5NjU3MjMyNTI2NTYzNjU2OTc2NjU2NDU2NmY3NDY1NzMgMHg3MDZjNjE3OTY1NzIzMzUyNjU2MzY1Njk3NjY1NjQ1NjZmNzQ2NTczIDB4NzA2YzYxNzk2NTcyMzQ1MjY1NjM2NTY5NzY2NTY0NTY2Zjc0NjU3MyAweDcwNmM2MTc5NjU3MjM1NTI2NTYzNjU2OTc2NjU2NDU2NmY3NDY1NzMgMHg3MDZjNjE3OTY1NzIzNjUyNjU2MzY1Njk3NjY1NjQ1NjZmNzQ2NTczIDB4NmQ2MTY2Njk2MSAweDZjNzM2OTY3NDY3NTZlNjQ2NTcyNDE2NDY0NzI2NTczNzMgMHg3MDZjNjE3OTY1NzI3MzU2NmY3NDY1NjQgMHg3MDZjNjE3OTY1NzI3MzRhNmY2OTZlNjU2NCAweDcwNmM2MTc5NjU3MjMxNDg2MTczNTY2Zjc0NjU2NCAweDcwNmM2MTc5NjU3MjMyNDg2MTczNTY2Zjc0NjU2NCAweDcwNmM2MTc5NjU3MjMzNDg2MTczNTY2Zjc0NjU2NCAweDcwNmM2MTc5NjU3MjM0NDg2MTczNTY2Zjc0NjU2NCAweDcwNmM2MTc5NjU3MjM1NDg2MTczNTY2Zjc0NjU2NCAweDcwNmM2MTc5NjU3MjM2NDg2MTczNTY2Zjc0NjU2NCAweDY0NmY2Mzc0NmY3MjRiNjU3OTQ5NmQ2MTY3NjUgMHg2ZDYxNjY2OTYxNGI2NTc5NDk2ZDYxNjc2NSAweDE1MWY3Yzc1IDB4NjM3MjY1NjE3NDZmNzI0MTY0NjQ3MjY1NzM3MyAweDYyNzU3NDYzNjg2NTcyIDB4Njk2ZTZlNmI2NTY1NzAgMHg2NjYxNzI2ZDY1NzIgMHg2NzcyNmY2MzY1NzIgMHgxN2YxZDNhNzMxOTdkNzk0MjY5NTYzOGM0ZmE5YWMwZmMzNjg4YzRmOTc3NGI5MDVhMTRlM2EzZjE3MWJhYzU4NmM1NWU4M2ZmOTdhMWFlZmZiM2FmMDBhZGIyMmM2YmIwOGIzZjQ4MWUzYWFhMGYxYTA5ZTMwZWQ3NDFkOGFlNGZjZjVlMDk1ZDVkMDBhZjYwMGRiMThjYjJjMDRiM2VkZDAzY2M3NDRhMjg4OGFlNDBjYWEyMzI5NDZjNWU3ZTEgMHg2NDZmNjM3NDZmNzI0MzZmNmQ2ZDY5NzQ2ZDY1NmU3NCAweDYyNzU3NDYzNjg2NTcyNGI2NTc5NDk2ZDYxNjc2NSAweDY5NmU2ZTZiNjU2NTcwNGI2NTc5NDk2ZDYxNjc2NSAweDZkNjE2NjY5NjE0MzZmNmQ2ZDY5NzQ2ZDY1NmU3NCAweDY2NjE3MjZkNjU3MjRiNjU3OTQ5NmQ2MTY3NjUgMHg2NzcyNmY2MzY1NzI0YjY1Nzk0OTZkNjE2NzY1CgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjEwNi4yCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGdvcmFuZGZvdW5kYXRpb24vVEVBTFNjcmlwdAoKLy8gVGhpcyBjb250cmFjdCBpcyBjb21wbGlhbnQgd2l0aCBhbmQvb3IgaW1wbGVtZW50cyB0aGUgZm9sbG93aW5nIEFSQ3M6IFsgQVJDNCBdCgovLyBUaGUgZm9sbG93aW5nIHRlbiBsaW5lcyBvZiBURUFMIGhhbmRsZSBpbml0aWFsIHByb2dyYW0gZmxvdwovLyBUaGlzIHBhdHRlcm4gaXMgdXNlZCB0byBtYWtlIGl0IGVhc3kgZm9yIGFueW9uZSB0byBwYXJzZSB0aGUgc3RhcnQgb2YgdGhlIHByb2dyYW0gYW5kIGRldGVybWluZSBpZiBhIHNwZWNpZmljIGFjdGlvbiBpcyBhbGxvd2VkCi8vIEhlcmUsIGFjdGlvbiByZWZlcnMgdG8gdGhlIE9uQ29tcGxldGUgaW4gY29tYmluYXRpb24gd2l0aCB3aGV0aGVyIHRoZSBhcHAgaXMgYmVpbmcgY3JlYXRlZCBvciBjYWxsZWQKLy8gRXZlcnkgcG9zc2libGUgYWN0aW9uIGZvciB0aGlzIGNvbnRyYWN0IGlzIHJlcHJlc2VudGVkIGluIHRoZSBzd2l0Y2ggc3RhdGVtZW50Ci8vIElmIHRoZSBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlc3BlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIipOT1RfSU1QTEVNRU5URUQiIHdoaWNoIGp1c3QgY29udGFpbnMgImVyciIKdHhuIEFwcGxpY2F0aW9uSUQKIQppbnRjIDMgLy8gNgoqCnR4biBPbkNvbXBsZXRpb24KKwpzd2l0Y2ggKmNhbGxfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpjYWxsX0RlbGV0ZUFwcGxpY2F0aW9uICpjcmVhdGVfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQKCipOT1RfSU1QTEVNRU5URUQ6CgkvLyBUaGUgcmVxdWVzdGVkIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhpcyBjb250cmFjdC4gQXJlIHlvdSB1c2luZyB0aGUgY29ycmVjdCBPbkNvbXBsZXRlPyBEaWQgeW91IHNldCB5b3VyIGFwcCBJRD8KCWVycgoKLy8gY3JlYXRlQXBwbGljYXRpb24oKXZvaWQKKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbjoKCS8vIGV4ZWN1dGUgY3JlYXRlQXBwbGljYXRpb24oKXZvaWQKCWNhbGxzdWIgY3JlYXRlQXBwbGljYXRpb24KCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKCk6IHZvaWQKY3JlYXRlQXBwbGljYXRpb246Cglwcm90byAwIDAKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czoxMzQKCS8vIHRoaXMuY3JlYXRvckFkZHJlc3MudmFsdWUgPSB0aGlzLnR4bi5zZW5kZXIKCWJ5dGVjIDM0IC8vICAiY3JlYXRvckFkZHJlc3MiCgl0eG4gU2VuZGVyCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjEzNgoJLy8gdGhpcy5sc2lnRnVuZGVyQWRkcmVzcy52YWx1ZSA9IGdsb2JhbHMuemVyb0FkZHJlc3MKCWJ5dGVjIDIyIC8vICAibHNpZ0Z1bmRlckFkZHJlc3MiCglnbG9iYWwgWmVyb0FkZHJlc3MKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6MTM4CgkvLyB0aGlzLnBsYXllcjFBbGdvQWRkci52YWx1ZSA9IHsgYWRkcmVzczogZ2xvYmFscy56ZXJvQWRkcmVzcywgZWxpbWluYXRlZDogMCB9CglieXRlYyAyIC8vICAicGxheWVyMUFsZ29BZGRyIgoJZ2xvYmFsIFplcm9BZGRyZXNzCglieXRlYyAxMCAvLyAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czoxMzkKCS8vIHRoaXMucGxheWVyMkFsZ29BZGRyLnZhbHVlID0geyBhZGRyZXNzOiBnbG9iYWxzLnplcm9BZGRyZXNzLCBlbGltaW5hdGVkOiAwIH0KCWJ5dGVjIDMgLy8gICJwbGF5ZXIyQWxnb0FkZHIiCglnbG9iYWwgWmVyb0FkZHJlc3MKCWJ5dGVjIDEwIC8vIDB4MDAwMDAwMDAwMDAwMDAwMAoJY29uY2F0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjE0MAoJLy8gdGhpcy5wbGF5ZXIzQWxnb0FkZHIudmFsdWUgPSB7IGFkZHJlc3M6IGdsb2JhbHMuemVyb0FkZHJlc3MsIGVsaW1pbmF0ZWQ6IDAgfQoJYnl0ZWMgNCAvLyAgInBsYXllcjNBbGdvQWRkciIKCWdsb2JhbCBaZXJvQWRkcmVzcwoJYnl0ZWMgMTAgLy8gMHgwMDAwMDAwMDAwMDAwMDAwCgljb25jYXQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6MTQxCgkvLyB0aGlzLnBsYXllcjRBbGdvQWRkci52YWx1ZSA9IHsgYWRkcmVzczogZ2xvYmFscy56ZXJvQWRkcmVzcywgZWxpbWluYXRlZDogMCB9CglieXRlYyA1IC8vICAicGxheWVyNEFsZ29BZGRyIgoJZ2xvYmFsIFplcm9BZGRyZXNzCglieXRlYyAxMCAvLyAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czoxNDIKCS8vIHRoaXMucGxheWVyNUFsZ29BZGRyLnZhbHVlID0geyBhZGRyZXNzOiBnbG9iYWxzLnplcm9BZGRyZXNzLCBlbGltaW5hdGVkOiAwIH0KCWJ5dGVjIDYgLy8gICJwbGF5ZXI1QWxnb0FkZHIiCglnbG9iYWwgWmVyb0FkZHJlc3MKCWJ5dGVjIDEwIC8vIDB4MDAwMDAwMDAwMDAwMDAwMAoJY29uY2F0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjE0MwoJLy8gdGhpcy5wbGF5ZXI2QWxnb0FkZHIudmFsdWUgPSB7IGFkZHJlc3M6IGdsb2JhbHMuemVyb0FkZHJlc3MsIGVsaW1pbmF0ZWQ6IDAgfQoJYnl0ZWMgNyAvLyAgInBsYXllcjZBbGdvQWRkciIKCWdsb2JhbCBaZXJvQWRkcmVzcwoJYnl0ZWMgMTAgLy8gMHgwMDAwMDAwMDAwMDAwMDAwCgljb25jYXQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6MTQ1CgkvLyB0aGlzLm1hZmlhLnZhbHVlID0gZ2xvYmFscy56ZXJvQWRkcmVzcwoJYnl0ZWMgMjEgLy8gICJtYWZpYSIKCWdsb2JhbCBaZXJvQWRkcmVzcwoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czoxNDYKCS8vIHRoaXMuZG9jdG9yLnZhbHVlID0gZ2xvYmFscy56ZXJvQWRkcmVzcwoJYnl0ZWMgMTMgLy8gICJkb2N0b3IiCglnbG9iYWwgWmVyb0FkZHJlc3MKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6MTQ3CgkvLyB0aGlzLmZhcm1lci52YWx1ZSA9IGdsb2JhbHMuemVyb0FkZHJlc3MKCWJ5dGVjIDM3IC8vICAiZmFybWVyIgoJZ2xvYmFsIFplcm9BZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjE0OAoJLy8gdGhpcy5idXRjaGVyLnZhbHVlID0gZ2xvYmFscy56ZXJvQWRkcmVzcwoJYnl0ZWMgMzUgLy8gICJidXRjaGVyIgoJZ2xvYmFsIFplcm9BZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjE0OQoJLy8gdGhpcy5pbm5rZWVwLnZhbHVlID0gZ2xvYmFscy56ZXJvQWRkcmVzcwoJYnl0ZWMgMzYgLy8gICJpbm5rZWVwIgoJZ2xvYmFsIFplcm9BZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjE1MAoJLy8gdGhpcy5ncm9jZXIudmFsdWUgPSBnbG9iYWxzLnplcm9BZGRyZXNzCglieXRlYyAzOCAvLyAgImdyb2NlciIKCWdsb2JhbCBaZXJvQWRkcmVzcwoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czoxNTIKCS8vIHRoaXMucGxheWVyMUhhc1ZvdGVkLnZhbHVlID0gMAoJYnl0ZWMgMjUgLy8gICJwbGF5ZXIxSGFzVm90ZWQiCglpbnRjIDEgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czoxNTMKCS8vIHRoaXMucGxheWVyMkhhc1ZvdGVkLnZhbHVlID0gMAoJYnl0ZWMgMjYgLy8gICJwbGF5ZXIySGFzVm90ZWQiCglpbnRjIDEgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czoxNTQKCS8vIHRoaXMucGxheWVyM0hhc1ZvdGVkLnZhbHVlID0gMAoJYnl0ZWMgMjcgLy8gICJwbGF5ZXIzSGFzVm90ZWQiCglpbnRjIDEgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czoxNTUKCS8vIHRoaXMucGxheWVyNEhhc1ZvdGVkLnZhbHVlID0gMAoJYnl0ZWMgMjggLy8gICJwbGF5ZXI0SGFzVm90ZWQiCglpbnRjIDEgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czoxNTYKCS8vIHRoaXMucGxheWVyNUhhc1ZvdGVkLnZhbHVlID0gMAoJYnl0ZWMgMjkgLy8gICJwbGF5ZXI1SGFzVm90ZWQiCglpbnRjIDEgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czoxNTcKCS8vIHRoaXMucGxheWVyNkhhc1ZvdGVkLnZhbHVlID0gMAoJYnl0ZWMgMzAgLy8gICJwbGF5ZXI2SGFzVm90ZWQiCglpbnRjIDEgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czoxNTgKCS8vIHRoaXMucGxheWVyc1ZvdGVkLnZhbHVlID0gMAoJYnl0ZWMgMjMgLy8gICJwbGF5ZXJzVm90ZWQiCglpbnRjIDEgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czoxNjAKCS8vIHRoaXMucGxheWVyMVJlY2VpdmVkVm90ZXMudmFsdWUgPSAwCglieXRlYyAxNSAvLyAgInBsYXllcjFSZWNlaXZlZFZvdGVzIgoJaW50YyAxIC8vIDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6MTYxCgkvLyB0aGlzLnBsYXllcjJSZWNlaXZlZFZvdGVzLnZhbHVlID0gMAoJYnl0ZWMgMTYgLy8gICJwbGF5ZXIyUmVjZWl2ZWRWb3RlcyIKCWludGMgMSAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjE2MgoJLy8gdGhpcy5wbGF5ZXIzUmVjZWl2ZWRWb3Rlcy52YWx1ZSA9IDAKCWJ5dGVjIDE3IC8vICAicGxheWVyM1JlY2VpdmVkVm90ZXMiCglpbnRjIDEgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czoxNjMKCS8vIHRoaXMucGxheWVyNFJlY2VpdmVkVm90ZXMudmFsdWUgPSAwCglieXRlYyAxOCAvLyAgInBsYXllcjRSZWNlaXZlZFZvdGVzIgoJaW50YyAxIC8vIDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6MTY0CgkvLyB0aGlzLnBsYXllcjVSZWNlaXZlZFZvdGVzLnZhbHVlID0gMAoJYnl0ZWMgMTkgLy8gICJwbGF5ZXI1UmVjZWl2ZWRWb3RlcyIKCWludGMgMSAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjE2NQoJLy8gdGhpcy5wbGF5ZXI2UmVjZWl2ZWRWb3Rlcy52YWx1ZSA9IDAKCWJ5dGVjIDIwIC8vICAicGxheWVyNlJlY2VpdmVkVm90ZXMiCglpbnRjIDEgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czoxNjYKCS8vIHRoaXMucGxheWVyc1ZvdGVkLnZhbHVlID0gMAoJYnl0ZWMgMjMgLy8gICJwbGF5ZXJzVm90ZWQiCglpbnRjIDEgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czoxNjgKCS8vIHRoaXMucGxheWVyc0pvaW5lZC52YWx1ZSA9IDAKCWJ5dGVjIDI0IC8vICAicGxheWVyc0pvaW5lZCIKCWludGMgMSAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjE2OQoJLy8gdGhpcy5wbGF5ZXJzQWxpdmUudmFsdWUgPSA2CglieXRlYyAxNCAvLyAgInBsYXllcnNBbGl2ZSIKCWludGMgMyAvLyA2CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjE3MQoJLy8gdGhpcy5qdXN0RWxpbWluYXRlZFBsYXllci52YWx1ZSA9IGdsb2JhbHMuemVyb0FkZHJlc3MKCWJ5dGVjIDEgLy8gICJqdXN0RWxpbWluYXRlZFBsYXllciIKCWdsb2JhbCBaZXJvQWRkcmVzcwoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czoxNzIKCS8vIHRoaXMubWFmaWFWaWN0aW0udmFsdWUgPSBnbG9iYWxzLnplcm9BZGRyZXNzCglieXRlYyA5IC8vICAibWFmaWFWaWN0aW0iCglnbG9iYWwgWmVyb0FkZHJlc3MKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6MTczCgkvLyB0aGlzLmRvY3RvclBhdGllbnQudmFsdWUgPSBnbG9iYWxzLnplcm9BZGRyZXNzCglieXRlYyAxMSAvLyAgImRvY3RvclBhdGllbnQiCglnbG9iYWwgWmVyb0FkZHJlc3MKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6MTc1CgkvLyB0aGlzLmdhbWVTdGF0ZS52YWx1ZSA9IDAKCWJ5dGVjIDAgLy8gICJnYW1lU3RhdGUiCglpbnRjIDEgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gZHVtbXlPcFVwKHVpbnQ2NCl1aW50NjQKKmFiaV9yb3V0ZV9kdW1teU9wVXA6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGVjIDMzIC8vIDB4MTUxZjdjNzUKCgkvLyBpOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGR1bW15T3BVcCh1aW50NjQpdWludDY0CgljYWxsc3ViIGR1bW15T3BVcAoJaXRvYgoJY29uY2F0Cglsb2cKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGR1bW15T3BVcChpOiB1aW50NjQpOiB1aW50NjQKLy8KLy8gRHVtbXkgT3AgVXAKLy8gRHVtbXkgb3BlcmF0aW9uIHRvIGdldCBtb3JlIG9wY29kZSBidWRnZXQKLy8gQGkgLSBUaGUgbnVtYmVyIHRvIHJldHVybiwgbmVjc3NhcnkgdG8gZGVkdXBsaWNhdGUgdGhlIG5hbWUKLy8gQHJldHVybnMgdGhlIG51bWJlciAoYnV0IHdlIGRvIG5vdGhpbmcgd2l0aCBpdCkKZHVtbXlPcFVwOgoJcHJvdG8gMSAxCgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6MTg0CgkvLyByZXR1cm4gaTsKCWZyYW1lX2RpZyAtMSAvLyBpOiB1aW50NjQKCXJldHN1YgoKLy8gZGxvZyhieXRlW10sYnl0ZVtdLGJ5dGVbXSxieXRlW10pYm9vbAoqYWJpX3JvdXRlX2Rsb2c6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGVjIDMzIC8vIDB4MTUxZjdjNzUKCgkvLyB6OiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDQKCWV4dHJhY3QgMiAwCgoJLy8gdjogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglleHRyYWN0IDIgMAoKCS8vIHg6IGJ5dGVbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZXh0cmFjdCAyIDAKCgkvLyBnOiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gZXhlY3V0ZSBkbG9nKGJ5dGVbXSxieXRlW10sYnl0ZVtdLGJ5dGVbXSlib29sCgljYWxsc3ViIGRsb2cKCXB1c2hieXRlcyAweDAwCglpbnRjIDEgLy8gMAoJdW5jb3ZlciAyCglzZXRiaXQKCWNvbmNhdAoJbG9nCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBkbG9nKGc6IGJ5dGVzLCB4OiBieXRlcywgdjogYnl0ZXMsIHo6IGJ5dGVzKTogYm9vbGVhbgpkbG9nOgoJcHJvdG8gNCAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDggLy8gMHgKCWR1cAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjIwNwoJLy8gaGFzaCA9IGtlY2NhazI1Nihjb25jYXQoZywgY29uY2F0KHgsIHYpKSkKCWZyYW1lX2RpZyAtMSAvLyBnOiBieXRlcwoJZnJhbWVfZGlnIC0yIC8vIHg6IGJ5dGVzCglmcmFtZV9kaWcgLTMgLy8gdjogYnl0ZXMKCWNvbmNhdAoJY29uY2F0CglrZWNjYWsyNTYKCWZyYW1lX2J1cnkgMCAvLyBoYXNoOiBieXRlWzMyXQoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjIwOAoJLy8gY2hhbGxlbmdlID0gYnRvYmlnaW50KGhhc2gpICUgYnRvYmlnaW50KGhleChCTFMxMjM4MV9DVVJWRV9PUkRFUl9IRVgpKQoJZnJhbWVfZGlnIDAgLy8gaGFzaDogYnl0ZVszMl0KCXB1c2hieXRlcyAweDczZWRhNzUzMjk5ZDdkNDgzMzM5ZDgwODA5YTFkODA1NTNiZGE0MDJmZmZlNWJmZWZmZmZmZmZmMDAwMDAwMDEKCWIlCglmcmFtZV9idXJ5IDEgLy8gY2hhbGxlbmdlOiBiaWdpbnQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czoyMTAKCS8vIHJldHVybiAoCgkvLyAgICAgICB2ID09PSBlY0FkZCgnQkxTMTJfMzgxZzEnLCBlY1NjYWxhck11bCgnQkxTMTJfMzgxZzEnLCBnLCB6KSwgZWNTY2FsYXJNdWwoJ0JMUzEyXzM4MWcxJywgeCwgcmF3Qnl0ZXMoY2hhbGxlbmdlKSkpCgkvLyAgICAgKTsKCWZyYW1lX2RpZyAtMyAvLyB2OiBieXRlcwoJZnJhbWVfZGlnIC0xIC8vIGc6IGJ5dGVzCglmcmFtZV9kaWcgLTQgLy8gejogYnl0ZXMKCWVjX3NjYWxhcl9tdWwgQkxTMTJfMzgxZzEKCWZyYW1lX2RpZyAtMiAvLyB4OiBieXRlcwoJZnJhbWVfZGlnIDEgLy8gY2hhbGxlbmdlOiBiaWdpbnQKCWVjX3NjYWxhcl9tdWwgQkxTMTJfMzgxZzEKCWVjX2FkZCBCTFMxMl8zODFnMQoJPT0KCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiAxCglyZXRzdWIKCi8vIGhhc2hQb2ludFRvUG9pbnQoYnl0ZVtdKWJ5dGVbXQoqYWJpX3JvdXRlX2hhc2hQb2ludFRvUG9pbnQ6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGVjIDMzIC8vIDB4MTUxZjdjNzUKCgkvLyBwb2ludDogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgaGFzaFBvaW50VG9Qb2ludChieXRlW10pYnl0ZVtdCgljYWxsc3ViIGhhc2hQb2ludFRvUG9pbnQKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWxvZwoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gaGFzaFBvaW50VG9Qb2ludChwb2ludDogYnl0ZXMpOiBieXRlcwpoYXNoUG9pbnRUb1BvaW50OgoJcHJvdG8gMSAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDggLy8gMHgKCWR1cG4gMgoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjIxNgoJLy8gaGFzaCA9IGtlY2NhazI1Nihwb2ludCkKCWZyYW1lX2RpZyAtMSAvLyBwb2ludDogYnl0ZXMKCWtlY2NhazI1NgoJZnJhbWVfYnVyeSAwIC8vIGhhc2g6IGJ5dGVbMzJdCgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6MjE3CgkvLyBmcEVsZW1lbnQgPSBidG9iaWdpbnQoaGFzaCkgJSBidG9iaWdpbnQoaGV4KEJMUzEyMzgxX0ZJRUxEX01PRFVMVVNfSEVYKSkKCWZyYW1lX2RpZyAwIC8vIGhhc2g6IGJ5dGVbMzJdCglwdXNoYnl0ZXMgMHgxYTAxMTFlYTM5N2ZlNjlhNGIxYmE3YjY0MzRiYWNkNzY0Nzc0Yjg0ZjM4NTEyYmY2NzMwZDJhMGY2YjBmNjI0MWVhYmZmZmViMTUzZmZmZmI5ZmVmZmZmZmZmZmFhYWIKCWIlCglmcmFtZV9idXJ5IDEgLy8gZnBFbGVtZW50OiBiaWdpbnQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czoyMjAKCS8vIHJlc3VsdCA9IGVjTWFwVG8oJ0JMUzEyXzM4MWcxJywgcmF3Qnl0ZXMoZnBFbGVtZW50KSkKCWZyYW1lX2RpZyAxIC8vIGZwRWxlbWVudDogYmlnaW50CgllY19tYXBfdG8gQkxTMTJfMzgxZzEKCWZyYW1lX2J1cnkgMiAvLyByZXN1bHQ6IGJ5dGVbXQoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjIyMQoJLy8gcmV0dXJuIHJlc3VsdDsKCWZyYW1lX2RpZyAyIC8vIHJlc3VsdDogYnl0ZVtdCgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCgoJLy8gcG9wIGFsbCBsb2NhbCB2YXJpYWJsZXMgZnJvbSB0aGUgc3RhY2sKCXBvcG4gMgoJcmV0c3ViCgovLyBnZXRHYW1lU3RhdGUoKXVpbnQ2NAoqYWJpX3JvdXRlX2dldEdhbWVTdGF0ZToKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgMzMgLy8gMHgxNTFmN2M3NQoKCS8vIGV4ZWN1dGUgZ2V0R2FtZVN0YXRlKCl1aW50NjQKCWNhbGxzdWIgZ2V0R2FtZVN0YXRlCglpdG9iCgljb25jYXQKCWxvZwoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gZ2V0R2FtZVN0YXRlKCk6IHVpbnQ2NApnZXRHYW1lU3RhdGU6Cglwcm90byAwIDEKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czoyMjcKCS8vIHJldHVybiB0aGlzLmdhbWVTdGF0ZS52YWx1ZTsKCWJ5dGVjIDAgLy8gICJnYW1lU3RhdGUiCglhcHBfZ2xvYmFsX2dldAoJcmV0c3ViCgovLyBzZXRMU0lHRnVuZGVyQWRkcmVzcyhhZGRyZXNzKXZvaWQKKmFiaV9yb3V0ZV9zZXRMU0lHRnVuZGVyQWRkcmVzczoKCS8vIGZ1bmRlckxTaWdBZGRyZXNzOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50YyA2IC8vIDMyCgk9PQoKCS8vIGFyZ3VtZW50IDAgKGZ1bmRlckxTaWdBZGRyZXNzKSBmb3Igc2V0TFNJR0Z1bmRlckFkZHJlc3MgbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIGV4ZWN1dGUgc2V0TFNJR0Z1bmRlckFkZHJlc3MoYWRkcmVzcyl2b2lkCgljYWxsc3ViIHNldExTSUdGdW5kZXJBZGRyZXNzCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBzZXRMU0lHRnVuZGVyQWRkcmVzcyhmdW5kZXJMU2lnQWRkcmVzczogQWRkcmVzcyk6IHZvaWQKc2V0TFNJR0Z1bmRlckFkZHJlc3M6Cglwcm90byAxIDAKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czoyMzEKCS8vIGFzc2VydCgKCS8vICAgICAgIHRoaXMuZ2FtZVN0YXRlLnZhbHVlID09PSBzdGF0ZVNldExTSUdGdW5kZXJBZGRyZXNzLAoJLy8gICAgICAgJ0ludmFsaWQgbWV0aG9kIGNhbGw6IENvbnRyYWN0IGlzIG5vdCBpbiBTZXQgTFNpZyBGdW5kZXIgQWRkcmVzcyBzdGF0ZS4nCgkvLyAgICAgKQoJYnl0ZWMgMCAvLyAgImdhbWVTdGF0ZSIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDEgLy8gMAoJPT0KCgkvLyBJbnZhbGlkIG1ldGhvZCBjYWxsOiBDb250cmFjdCBpcyBub3QgaW4gU2V0IExTaWcgRnVuZGVyIEFkZHJlc3Mgc3RhdGUuCglhc3NlcnQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czoyMzYKCS8vIGFzc2VydCgKCS8vICAgICAgIHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5jcmVhdG9yQWRkcmVzcy52YWx1ZSwKCS8vICAgICAgICdFcnJvciBzdGF0ZTogT25seSB0aGUgY3JlYXRvciBjYW4gc2V0IHRoZSBMU2lnIEZ1bmRlciBBZGRyZXNzIScKCS8vICAgICApCgl0eG4gU2VuZGVyCglieXRlYyAzNCAvLyAgImNyZWF0b3JBZGRyZXNzIgoJYXBwX2dsb2JhbF9nZXQKCT09CgoJLy8gRXJyb3Igc3RhdGU6IE9ubHkgdGhlIGNyZWF0b3IgY2FuIHNldCB0aGUgTFNpZyBGdW5kZXIgQWRkcmVzcyEKCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjI0MQoJLy8gYXNzZXJ0KHRoaXMubHNpZ0Z1bmRlckFkZHJlc3MudmFsdWUgPT09IGdsb2JhbHMuemVyb0FkZHJlc3MsICdFcnJvciBzdGF0ZTogTFNpZyBGdW5kZXIgQWRkcmVzcyBhbHJlYWR5IHNldCEnKQoJYnl0ZWMgMjIgLy8gICJsc2lnRnVuZGVyQWRkcmVzcyIKCWFwcF9nbG9iYWxfZ2V0CglnbG9iYWwgWmVyb0FkZHJlc3MKCT09CgoJLy8gRXJyb3Igc3RhdGU6IExTaWcgRnVuZGVyIEFkZHJlc3MgYWxyZWFkeSBzZXQhCglhc3NlcnQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czoyNDMKCS8vIGFzc2VydChmdW5kZXJMU2lnQWRkcmVzcyAhPT0gZ2xvYmFscy56ZXJvQWRkcmVzcywgJ0Vycm9yIHN0YXRlOiBMU2lnIEZ1bmRlciBBZGRyZXNzIGNhbm5vdCBiZSB0aGUgemVybyBhZGRyZXNzLicpCglmcmFtZV9kaWcgLTEgLy8gZnVuZGVyTFNpZ0FkZHJlc3M6IEFkZHJlc3MKCWdsb2JhbCBaZXJvQWRkcmVzcwoJIT0KCgkvLyBFcnJvciBzdGF0ZTogTFNpZyBGdW5kZXIgQWRkcmVzcyBjYW5ub3QgYmUgdGhlIHplcm8gYWRkcmVzcy4KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjI0NgoJLy8gdGhpcy5sc2lnRnVuZGVyQWRkcmVzcy52YWx1ZSA9IGZ1bmRlckxTaWdBZGRyZXNzCglieXRlYyAyMiAvLyAgImxzaWdGdW5kZXJBZGRyZXNzIgoJZnJhbWVfZGlnIC0xIC8vIGZ1bmRlckxTaWdBZGRyZXNzOiBBZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjI0OAoJLy8gdGhpcy5nYW1lU3RhdGUudmFsdWUgPSBzdGF0ZUpvaW5HYW1lTG9iYnkKCWJ5dGVjIDAgLy8gICJnYW1lU3RhdGUiCglpbnRjIDAgLy8gMQoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gam9pbkdhbWVMb2JieShwYXksYnl0ZVtdKXZvaWQKKmFiaV9yb3V0ZV9qb2luR2FtZUxvYmJ5OgoJLy8gTklaS19ETE9HOiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gZGVwb3NpdFR4bjogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50YyAwIC8vIDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludGMgMCAvLyAgcGF5Cgk9PQoKCS8vIGFyZ3VtZW50IDEgKGRlcG9zaXRUeG4pIGZvciBqb2luR2FtZUxvYmJ5IG11c3QgYmUgYSBwYXkgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIGV4ZWN1dGUgam9pbkdhbWVMb2JieShwYXksYnl0ZVtdKXZvaWQKCWNhbGxzdWIgam9pbkdhbWVMb2JieQoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gam9pbkdhbWVMb2JieShkZXBvc2l0VHhuOiBQYXlUeG4sIE5JWktfRExPRzogYnl0ZXMpOiB2b2lkCmpvaW5HYW1lTG9iYnk6Cglwcm90byAyIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgOCAvLyAweAoJZHVwbiAzCgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6MjUyCgkvLyBhc3NlcnQodGhpcy5nYW1lU3RhdGUudmFsdWUgPT09IHN0YXRlSm9pbkdhbWVMb2JieSwgJ0ludmFsaWQgbWV0aG9kIGNhbGw6IEdhbWUgaXMgbm90IGluIEpvaW4gR2FtZSBMb2JieSBzdGF0ZS4nKQoJYnl0ZWMgMCAvLyAgImdhbWVTdGF0ZSIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDAgLy8gMQoJPT0KCgkvLyBJbnZhbGlkIG1ldGhvZCBjYWxsOiBHYW1lIGlzIG5vdCBpbiBKb2luIEdhbWUgTG9iYnkgc3RhdGUuCglhc3NlcnQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czoyNTQKCS8vIGFzc2VydCgKCS8vICAgICAgIHRoaXMucGxheWVyc0pvaW5lZC52YWx1ZSA8IDYsCgkvLyAgICAgICAnTWF4IHBsYXllcnMgYWxyZWFkeSBqb2luZWQhIEVycm9yLCBnYW1lIHNob3VsZCBoYXZlIG1vdmVkIHRvIHRoZSBuZXh0IHN0YWdlIGFscmVhZHkuJwoJLy8gICAgICkKCWJ5dGVjIDI0IC8vICAicGxheWVyc0pvaW5lZCIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDMgLy8gNgoJPAoKCS8vIE1heCBwbGF5ZXJzIGFscmVhZHkgam9pbmVkISBFcnJvciwgZ2FtZSBzaG91bGQgaGF2ZSBtb3ZlZCB0byB0aGUgbmV4dCBzdGFnZSBhbHJlYWR5LgoJYXNzZXJ0CgoJLy8gKmlmMF9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjI2MAoJLy8gdGhpcy5wbGF5ZXIxQWxnb0FkZHIudmFsdWUuYWRkcmVzcyA9PT0gdGhpcy50eG4uc2VuZGVyIHx8CgkvLyAgICAgICB0aGlzLnBsYXllcjJBbGdvQWRkci52YWx1ZS5hZGRyZXNzID09PSB0aGlzLnR4bi5zZW5kZXIgfHwKCS8vICAgICAgIHRoaXMucGxheWVyM0FsZ29BZGRyLnZhbHVlLmFkZHJlc3MgPT09IHRoaXMudHhuLnNlbmRlciB8fAoJLy8gICAgICAgdGhpcy5wbGF5ZXI0QWxnb0FkZHIudmFsdWUuYWRkcmVzcyA9PT0gdGhpcy50eG4uc2VuZGVyIHx8CgkvLyAgICAgICB0aGlzLnBsYXllcjVBbGdvQWRkci52YWx1ZS5hZGRyZXNzID09PSB0aGlzLnR4bi5zZW5kZXIgfHwKCS8vICAgICAgIHRoaXMucGxheWVyNkFsZ29BZGRyLnZhbHVlLmFkZHJlc3MgPT09IHRoaXMudHhuLnNlbmRlcgoJYnl0ZWMgMiAvLyAgInBsYXllcjFBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCXR4biBTZW5kZXIKCT09CglkdXAKCWJueiAqc2tpcF9vcjAKCWJ5dGVjIDMgLy8gICJwbGF5ZXIyQWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAwIDMyCgl0eG4gU2VuZGVyCgk9PQoJfHwKCipza2lwX29yMDoKCWR1cAoJYm56ICpza2lwX29yMQoJYnl0ZWMgNCAvLyAgInBsYXllcjNBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCXR4biBTZW5kZXIKCT09Cgl8fAoKKnNraXBfb3IxOgoJZHVwCglibnogKnNraXBfb3IyCglieXRlYyA1IC8vICAicGxheWVyNEFsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMCAzMgoJdHhuIFNlbmRlcgoJPT0KCXx8Cgoqc2tpcF9vcjI6CglkdXAKCWJueiAqc2tpcF9vcjMKCWJ5dGVjIDYgLy8gICJwbGF5ZXI1QWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAwIDMyCgl0eG4gU2VuZGVyCgk9PQoJfHwKCipza2lwX29yMzoKCWR1cAoJYm56ICpza2lwX29yNAoJYnl0ZWMgNyAvLyAgInBsYXllcjZBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCXR4biBTZW5kZXIKCT09Cgl8fAoKKnNraXBfb3I0OgoJYnogKmlmMF9lbmQKCgkvLyAqaWYwX2NvbnNlcXVlbnQKCS8vIEVycm9yIHN0YXRlOiBQbGF5ZXIgYWxyZWFkeSBqb2luZWQgdGhlIGdhbWUhCgllcnIKCippZjBfZW5kOgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6MjcyCgkvLyBhc3NlcnQoZGVwb3NpdFR4bi5hbW91bnQgPj0gTFNJR19GVU5EX0FNT1VOVCArIFNMQVNIX0RFUE9TSVRfQU1PVU5ULCAnSW52YWxpZCBGdW5kZXJMU2lnIGFtb3VudCEnKQoJZnJhbWVfZGlnIC0xIC8vIGRlcG9zaXRUeG46IFBheVR4bgoJZ3R4bnMgQW1vdW50CglwdXNoaW50IDExNTAwMDAKCT49CgoJLy8gSW52YWxpZCBGdW5kZXJMU2lnIGFtb3VudCEKCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjI3NAoJLy8gZyA9IGV4dHJhY3QzKE5JWktfRExPRywgMCwgQkxTMTIzODFHMV9MRU5HVEgpCglmcmFtZV9kaWcgLTIgLy8gTklaS19ETE9HOiBieXRlcwoJZXh0cmFjdCAwIDk2CglmcmFtZV9idXJ5IDAgLy8gZzogYnl0ZVtdCgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6Mjc1CgkvLyBSaW5nUEsgPSBleHRyYWN0MyhOSVpLX0RMT0csIEJMUzEyMzgxRzFfTEVOR1RILCBCTFMxMjM4MUcxX0xFTkdUSCkKCWZyYW1lX2RpZyAtMiAvLyBOSVpLX0RMT0c6IGJ5dGVzCglleHRyYWN0IDk2IDk2CglmcmFtZV9idXJ5IDEgLy8gUmluZ1BLOiBieXRlW10KCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czoyNzYKCS8vIHYgPSBleHRyYWN0MyhOSVpLX0RMT0csIEJMUzEyMzgxRzFfTEVOR1RIICogMiwgQkxTMTIzODFHMV9MRU5HVEgpCglmcmFtZV9kaWcgLTIgLy8gTklaS19ETE9HOiBieXRlcwoJZXh0cmFjdCAxOTIgOTYKCWZyYW1lX2J1cnkgMiAvLyB2OiBieXRlW10KCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czoyNzcKCS8vIHogPSBleHRyYWN0MyhOSVpLX0RMT0csIEJMUzEyMzgxRzFfTEVOR1RIICogMywgMzIpCglmcmFtZV9kaWcgLTIgLy8gTklaS19ETE9HOiBieXRlcwoJcHVzaGludCAyODgKCWludGMgNiAvLyAzMgoJZXh0cmFjdDMKCWZyYW1lX2J1cnkgMyAvLyB6OiBieXRlW10KCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czoyODIKCS8vIGFzc2VydCh0aGlzLmRsb2coZywgUmluZ1BLLCB2LCB6KSwgJ0RMT0cgTklaSyBQcm9vZiBmYWlsZWQhJykKCWZyYW1lX2RpZyAzIC8vIHo6IGJ5dGVbXQoJZnJhbWVfZGlnIDIgLy8gdjogYnl0ZVtdCglmcmFtZV9kaWcgMSAvLyBSaW5nUEs6IGJ5dGVbXQoJZnJhbWVfZGlnIDAgLy8gZzogYnl0ZVtdCgljYWxsc3ViIGRsb2cKCgkvLyBETE9HIE5JWksgUHJvb2YgZmFpbGVkIQoJYXNzZXJ0CgoJLy8gKmlmMV9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjI4NAoJLy8gIXRoaXMucXVpY2tBY2Nlc3NQS0JveGVzKDApLmV4aXN0cwoJYnl0ZWMgMTAgLy8gMHgwMDAwMDAwMDAwMDAwMDAwCglib3hfbGVuCglzd2FwCglwb3AKCSEKCWJ6ICppZjFfZWxzZQoKCS8vICppZjFfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6Mjg1CgkvLyB0aGlzLnF1aWNrQWNjZXNzUEtCb3hlcygwKS5jcmVhdGUoQkxTMTIzODFHMV9MRU5HVEgpCglieXRlYyAxMCAvLyAweDAwMDAwMDAwMDAwMDAwMDAKCWludGMgMTIgLy8gOTYKCWJveF9jcmVhdGUKCXBvcAoJYiAqaWYxX2VuZAoKKmlmMV9lbHNlOgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6Mjg3CgkvLyB0aGlzLnF1aWNrQWNjZXNzUEtCb3hlcygwKS5yZXNpemUodGhpcy5xdWlja0FjY2Vzc1BLQm94ZXMoMCkuc2l6ZSArIEJMUzEyMzgxRzFfTEVOR1RIKQoJYnl0ZWMgMTAgLy8gMHgwMDAwMDAwMDAwMDAwMDAwCglkdXAKCWJveF9sZW4KCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMucXVpY2tBY2Nlc3NQS0JveGVzKDApLnNpemUKCWFzc2VydAoJaW50YyAxMiAvLyA5NgoJKwoJYm94X3Jlc2l6ZQoKKmlmMV9lbmQ6CgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czoyOTEKCS8vIGFzc2VydCh0aGlzLnF1aWNrQWNjZXNzUEtCb3hlcygwKS5leGlzdHMsICdQSyBCb3ggZmFpbGVkIHRvIGJlIGNyZWF0ZWQuJykKCWJ5dGVjIDEwIC8vIDB4MDAwMDAwMDAwMDAwMDAwMAoJYm94X2xlbgoJc3dhcAoJcG9wCgoJLy8gUEsgQm94IGZhaWxlZCB0byBiZSBjcmVhdGVkLgoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6MjkzCgkvLyB0aGlzLnF1aWNrQWNjZXNzUEtCb3hlcygwKS5yZXBsYWNlKHRoaXMucGxheWVyc0pvaW5lZC52YWx1ZSAqIEJMUzEyMzgxRzFfTEVOR1RILCBSaW5nUEspCglieXRlYyAxMCAvLyAweDAwMDAwMDAwMDAwMDAwMDAKCWJ5dGVjIDI0IC8vICAicGxheWVyc0pvaW5lZCIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDEyIC8vIDk2CgkqCglmcmFtZV9kaWcgMSAvLyBSaW5nUEs6IGJ5dGVbXQoJYm94X3JlcGxhY2UKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czoyOTQKCS8vIHRoaXMucGxheWVyc0pvaW5lZC52YWx1ZSArPSAxCglieXRlYyAyNCAvLyAgInBsYXllcnNKb2luZWQiCglhcHBfZ2xvYmFsX2dldAoJaW50YyAwIC8vIDEKCSsKCWJ5dGVjIDI0IC8vICAicGxheWVyc0pvaW5lZCIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6Mjk2CgkvLyBhc3NlcnQodGhpcy5sc2lnRnVuZGVyQWRkcmVzcy52YWx1ZSAhPT0gZ2xvYmFscy56ZXJvQWRkcmVzcywgJ0Vycm9yIHN0YXRlOiBMU2lnIEZ1bmRlciBBZGRyZXNzIG5vdCBzZXQhJykKCWJ5dGVjIDIyIC8vICAibHNpZ0Z1bmRlckFkZHJlc3MiCglhcHBfZ2xvYmFsX2dldAoJZ2xvYmFsIFplcm9BZGRyZXNzCgkhPQoKCS8vIEVycm9yIHN0YXRlOiBMU2lnIEZ1bmRlciBBZGRyZXNzIG5vdCBzZXQhCglhc3NlcnQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czoyOTkKCS8vIHNlbmRQYXltZW50KHsKCS8vICAgICAgIGFtb3VudDogTFNJR19GVU5EX0FNT1VOVCwKCS8vICAgICAgIHJlY2VpdmVyOiB0aGlzLmxzaWdGdW5kZXJBZGRyZXNzLnZhbHVlLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDAgLy8gIHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjMwMAoJLy8gYW1vdW50OiBMU0lHX0ZVTkRfQU1PVU5UCglpbnRjIDEzIC8vIDE1MDAwMAoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czozMDEKCS8vIHJlY2VpdmVyOiB0aGlzLmxzaWdGdW5kZXJBZGRyZXNzLnZhbHVlCglieXRlYyAyMiAvLyAgImxzaWdGdW5kZXJBZGRyZXNzIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDEgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gKmlmMl9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjMwNAoJLy8gdGhpcy5wbGF5ZXIxQWxnb0FkZHIudmFsdWUuYWRkcmVzcyA9PT0gZ2xvYmFscy56ZXJvQWRkcmVzcwoJYnl0ZWMgMiAvLyAgInBsYXllcjFBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCWdsb2JhbCBaZXJvQWRkcmVzcwoJPT0KCWJ6ICppZjJfZW5kCgoJLy8gKmlmMl9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czozMDUKCS8vIHRoaXMucGxheWVyMUFsZ29BZGRyLnZhbHVlLmFkZHJlc3MgPSB0aGlzLnR4bi5zZW5kZXIKCWJ5dGVjIDIgLy8gICJwbGF5ZXIxQWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJaW50YyAxIC8vIDAKCXR4biBTZW5kZXIKCXJlcGxhY2UzCglieXRlYyAyIC8vICAicGxheWVyMUFsZ29BZGRyIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czozMDYKCS8vIHJldHVybjsKCXJldHN1YgoKKmlmMl9lbmQ6CgkvLyAqaWYzX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6MzA4CgkvLyB0aGlzLnBsYXllcjJBbGdvQWRkci52YWx1ZS5hZGRyZXNzID09PSBnbG9iYWxzLnplcm9BZGRyZXNzCglieXRlYyAzIC8vICAicGxheWVyMkFsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMCAzMgoJZ2xvYmFsIFplcm9BZGRyZXNzCgk9PQoJYnogKmlmM19lbmQKCgkvLyAqaWYzX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjMwOQoJLy8gdGhpcy5wbGF5ZXIyQWxnb0FkZHIudmFsdWUuYWRkcmVzcyA9IHRoaXMudHhuLnNlbmRlcgoJYnl0ZWMgMyAvLyAgInBsYXllcjJBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDEgLy8gMAoJdHhuIFNlbmRlcgoJcmVwbGFjZTMKCWJ5dGVjIDMgLy8gICJwbGF5ZXIyQWxnb0FkZHIiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjMxMAoJLy8gcmV0dXJuOwoJcmV0c3ViCgoqaWYzX2VuZDoKCS8vICppZjRfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czozMTIKCS8vIHRoaXMucGxheWVyM0FsZ29BZGRyLnZhbHVlLmFkZHJlc3MgPT09IGdsb2JhbHMuemVyb0FkZHJlc3MKCWJ5dGVjIDQgLy8gICJwbGF5ZXIzQWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAwIDMyCglnbG9iYWwgWmVyb0FkZHJlc3MKCT09CglieiAqaWY0X2VuZAoKCS8vICppZjRfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6MzEzCgkvLyB0aGlzLnBsYXllcjNBbGdvQWRkci52YWx1ZS5hZGRyZXNzID0gdGhpcy50eG4uc2VuZGVyCglieXRlYyA0IC8vICAicGxheWVyM0FsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMSAvLyAwCgl0eG4gU2VuZGVyCglyZXBsYWNlMwoJYnl0ZWMgNCAvLyAgInBsYXllcjNBbGdvQWRkciIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6MzE0CgkvLyByZXR1cm47CglyZXRzdWIKCippZjRfZW5kOgoJLy8gKmlmNV9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjMxNgoJLy8gdGhpcy5wbGF5ZXI0QWxnb0FkZHIudmFsdWUuYWRkcmVzcyA9PT0gZ2xvYmFscy56ZXJvQWRkcmVzcwoJYnl0ZWMgNSAvLyAgInBsYXllcjRBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCWdsb2JhbCBaZXJvQWRkcmVzcwoJPT0KCWJ6ICppZjVfZW5kCgoJLy8gKmlmNV9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czozMTcKCS8vIHRoaXMucGxheWVyNEFsZ29BZGRyLnZhbHVlLmFkZHJlc3MgPSB0aGlzLnR4bi5zZW5kZXIKCWJ5dGVjIDUgLy8gICJwbGF5ZXI0QWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJaW50YyAxIC8vIDAKCXR4biBTZW5kZXIKCXJlcGxhY2UzCglieXRlYyA1IC8vICAicGxheWVyNEFsZ29BZGRyIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czozMTgKCS8vIHJldHVybjsKCXJldHN1YgoKKmlmNV9lbmQ6CgkvLyAqaWY2X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6MzIwCgkvLyB0aGlzLnBsYXllcjVBbGdvQWRkci52YWx1ZS5hZGRyZXNzID09PSBnbG9iYWxzLnplcm9BZGRyZXNzCglieXRlYyA2IC8vICAicGxheWVyNUFsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMCAzMgoJZ2xvYmFsIFplcm9BZGRyZXNzCgk9PQoJYnogKmlmNl9lbmQKCgkvLyAqaWY2X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjMyMQoJLy8gdGhpcy5wbGF5ZXI1QWxnb0FkZHIudmFsdWUuYWRkcmVzcyA9IHRoaXMudHhuLnNlbmRlcgoJYnl0ZWMgNiAvLyAgInBsYXllcjVBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDEgLy8gMAoJdHhuIFNlbmRlcgoJcmVwbGFjZTMKCWJ5dGVjIDYgLy8gICJwbGF5ZXI1QWxnb0FkZHIiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjMyMgoJLy8gcmV0dXJuOwoJcmV0c3ViCgoqaWY2X2VuZDoKCS8vICppZjdfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czozMjQKCS8vIHRoaXMucGxheWVyNkFsZ29BZGRyLnZhbHVlLmFkZHJlc3MgPT09IGdsb2JhbHMuemVyb0FkZHJlc3MKCWJ5dGVjIDcgLy8gICJwbGF5ZXI2QWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAwIDMyCglnbG9iYWwgWmVyb0FkZHJlc3MKCT09CglieiAqaWY3X2VuZAoKCS8vICppZjdfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6MzI1CgkvLyB0aGlzLnBsYXllcjZBbGdvQWRkci52YWx1ZS5hZGRyZXNzID0gdGhpcy50eG4uc2VuZGVyCglieXRlYyA3IC8vICAicGxheWVyNkFsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMSAvLyAwCgl0eG4gU2VuZGVyCglyZXBsYWNlMwoJYnl0ZWMgNyAvLyAgInBsYXllcjZBbGdvQWRkciIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6MzI2CgkvLyB0aGlzLmdhbWVTdGF0ZS52YWx1ZSA9IHN0YXRlQXNzaWduUm9sZQoJYnl0ZWMgMCAvLyAgImdhbWVTdGF0ZSIKCWludGMgMiAvLyAyCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjMyNwoJLy8gcmV0dXJuOwoJcmV0c3ViCgoqaWY3X2VuZDoKCS8vIEludmFsaWQgc3RhdGUhIEVycm9yLCBnYW1lIHNob3VsZCBoYXZlIG1vdmVkIHRvIHRoZSBuZXh0IHN0YWdlIGFscmVhZHkuCgllcnIKCXJldHN1YgoKLy8gYXNzaWduUm9sZShieXRlW10sYnl0ZVtdLGJ5dGVbXSxieXRlW10sYnl0ZVtdLHBheSxwYXkscGF5LHBheSxwYXkscGF5LHBheSl2b2lkCiphYmlfcm91dGVfYXNzaWduUm9sZToKCS8vIHJpbmdMU2lnVHhuNTogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50YyAwIC8vIDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludGMgMCAvLyAgcGF5Cgk9PQoKCS8vIGFyZ3VtZW50IDAgKHJpbmdMU2lnVHhuNSkgZm9yIGFzc2lnblJvbGUgbXVzdCBiZSBhIHBheSB0cmFuc2FjdGlvbgoJYXNzZXJ0CgoJLy8gcmluZ0xTaWdUeG40OiBwYXkKCXR4biBHcm91cEluZGV4CglpbnRjIDIgLy8gMgoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50YyAwIC8vICBwYXkKCT09CgoJLy8gYXJndW1lbnQgMSAocmluZ0xTaWdUeG40KSBmb3IgYXNzaWduUm9sZSBtdXN0IGJlIGEgcGF5IHRyYW5zYWN0aW9uCglhc3NlcnQKCgkvLyByaW5nTFNpZ1R4bjM6IHBheQoJdHhuIEdyb3VwSW5kZXgKCWludGMgNCAvLyAzCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnRjIDAgLy8gIHBheQoJPT0KCgkvLyBhcmd1bWVudCAyIChyaW5nTFNpZ1R4bjMpIGZvciBhc3NpZ25Sb2xlIG11c3QgYmUgYSBwYXkgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIHJpbmdMU2lnVHhuMjogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50YyA3IC8vIDQKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludGMgMCAvLyAgcGF5Cgk9PQoKCS8vIGFyZ3VtZW50IDMgKHJpbmdMU2lnVHhuMikgZm9yIGFzc2lnblJvbGUgbXVzdCBiZSBhIHBheSB0cmFuc2FjdGlvbgoJYXNzZXJ0CgoJLy8gcmluZ0xTaWdUeG4xOiBwYXkKCXR4biBHcm91cEluZGV4CglpbnRjIDggLy8gNQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50YyAwIC8vICBwYXkKCT09CgoJLy8gYXJndW1lbnQgNCAocmluZ0xTaWdUeG4xKSBmb3IgYXNzaWduUm9sZSBtdXN0IGJlIGEgcGF5IHRyYW5zYWN0aW9uCglhc3NlcnQKCgkvLyByaW5nTFNpZ1R4bjA6IHBheQoJdHhuIEdyb3VwSW5kZXgKCWludGMgMyAvLyA2CgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnRjIDAgLy8gIHBheQoJPT0KCgkvLyBhcmd1bWVudCA1IChyaW5nTFNpZ1R4bjApIGZvciBhc3NpZ25Sb2xlIG11c3QgYmUgYSBwYXkgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIGZ1bmRlckxTaWdUeG46IHBheQoJdHhuIEdyb3VwSW5kZXgKCWludGMgOSAvLyA3CgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnRjIDAgLy8gIHBheQoJPT0KCgkvLyBhcmd1bWVudCA2IChmdW5kZXJMU2lnVHhuKSBmb3IgYXNzaWduUm9sZSBtdXN0IGJlIGEgcGF5IHRyYW5zYWN0aW9uCglhc3NlcnQKCgkvLyBjaGFsbGVuZ2VzOiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDUKCWV4dHJhY3QgMiAwCgoJLy8gc2lnOiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDQKCWV4dHJhY3QgMiAwCgoJLy8ga2V5SW1hZ2U6IGJ5dGVbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJZXh0cmFjdCAyIDAKCgkvLyBwa0FsbDogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglleHRyYWN0IDIgMAoKCS8vIG1zZzogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgYXNzaWduUm9sZShieXRlW10sYnl0ZVtdLGJ5dGVbXSxieXRlW10sYnl0ZVtdLHBheSxwYXkscGF5LHBheSxwYXkscGF5LHBheSl2b2lkCgljYWxsc3ViIGFzc2lnblJvbGUKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGFzc2lnblJvbGUobXNnOiBieXRlcywgcGtBbGw6IGJ5dGVzLCBrZXlJbWFnZTogYnl0ZXMsIHNpZzogYnl0ZXMsIGNoYWxsZW5nZXM6IGJ5dGVzLCBmdW5kZXJMU2lnVHhuOiBQYXlUeG4sIHJpbmdMU2lnVHhuMDogUGF5VHhuLCByaW5nTFNpZ1R4bjE6IFBheVR4biwgcmluZ0xTaWdUeG4yOiBQYXlUeG4sIHJpbmdMU2lnVHhuMzogUGF5VHhuLCByaW5nTFNpZ1R4bjQ6IFBheVR4biwgcmluZ0xTaWdUeG41OiBQYXlUeG4pOiB2b2lkCmFzc2lnblJvbGU6Cglwcm90byAxMiAwCgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6MzQ3CgkvLyBhc3NlcnQodGhpcy5nYW1lU3RhdGUudmFsdWUgPT09IHN0YXRlQXNzaWduUm9sZSwgJ0ludmFsaWQgbWV0aG9kIGNhbGw6IEdhbWUgaXMgbm90IGluIEFzc2lnbiBSb2xlIHN0YXRlLicpCglieXRlYyAwIC8vICAiZ2FtZVN0YXRlIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMiAvLyAyCgk9PQoKCS8vIEludmFsaWQgbWV0aG9kIGNhbGw6IEdhbWUgaXMgbm90IGluIEFzc2lnbiBSb2xlIHN0YXRlLgoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6MzU2CgkvLyBhc3NlcnQoCgkvLyAgICAgICAhdGhpcy5oYXNoRmlsdGVyKHJhd0J5dGVzKHNoYTI1NihrZXlJbWFnZSkpKS5leGlzdHMsCgkvLyAgICAgICAnS2V5SW1hZ2UgYWxyZWFkeSBpbiBzdG9yZS4gQXJlIHlvdSB0cnlpbmcgdG8gZG91YmxlLWRpcCB3aXRoIHlvdXIgcmluZyBzaWduYXR1cmU/JwoJLy8gICAgICkKCWZyYW1lX2RpZyAtMyAvLyBrZXlJbWFnZTogYnl0ZXMKCXNoYTI1NgoJYm94X2xlbgoJc3dhcAoJcG9wCgkhCgoJLy8gS2V5SW1hZ2UgYWxyZWFkeSBpbiBzdG9yZS4gQXJlIHlvdSB0cnlpbmcgdG8gZG91YmxlLWRpcCB3aXRoIHlvdXIgcmluZyBzaWduYXR1cmU/Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czozNjAKCS8vIHRoaXMuaGFzaEZpbHRlcihyYXdCeXRlcyhzaGEyNTYoa2V5SW1hZ2UpKSkuY3JlYXRlKDApCglmcmFtZV9kaWcgLTMgLy8ga2V5SW1hZ2U6IGJ5dGVzCglzaGEyNTYKCWludGMgMSAvLyAwCglib3hfY3JlYXRlCglwb3AKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czozNjQKCS8vIGFzc2VydChtc2cgPT09IGNvbmNhdChyYXdCeXRlcyh0aGlzLnR4bi5zZW5kZXIpLCByYXdCeXRlcyh0aGlzLmFwcC5hZGRyZXNzKSkpCglmcmFtZV9kaWcgLTEgLy8gbXNnOiBieXRlcwoJdHhuIFNlbmRlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWNvbmNhdAoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjM2NwoJLy8gYXNzZXJ0KAoJLy8gICAgICAgdGhpcy5xdWlja0FjY2Vzc1BLQm94ZXMoMCkuZXh0cmFjdCgwLCA2ICogQkxTMTIzODFHMV9MRU5HVEgpID09PSBwa0FsbCwKCS8vICAgICAgICdJbnZhbGlkIFBLcyEgQXJlIHlvdSB0cnlpbmcgdG8gcGFzcyBpbiBhIGRpZmZlcmVudCByaW5nIG9mIFBLcz8nCgkvLyAgICAgKQoJYnl0ZWMgMTAgLy8gMHgwMDAwMDAwMDAwMDAwMDAwCglpbnRjIDEgLy8gMAoJcHVzaGludCA1NzYKCWJveF9leHRyYWN0CglmcmFtZV9kaWcgLTIgLy8gcGtBbGw6IGJ5dGVzCgk9PQoKCS8vIEludmFsaWQgUEtzISBBcmUgeW91IHRyeWluZyB0byBwYXNzIGluIGEgZGlmZmVyZW50IHJpbmcgb2YgUEtzPwoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6Mzc0CgkvLyB2ZXJpZnlUeG4ocmluZ0xTaWdUeG4wLCB7IHNlbmRlcjogQWRkcmVzcy5mcm9tQnl0ZXMoUmluZ0xpbmtMU2lnMC5hZGRyZXNzKCkpIH0pCgkvLyB2ZXJpZnkgc2VuZGVyCglmcmFtZV9kaWcgLTcgLy8gcmluZ0xTaWdUeG4wOiBQYXlUeG4KCWd0eG5zIFNlbmRlcgoJcHVzaGJ5dGVzIDB4Y2NiNDI4YmFkODYxNTlhODBlMWU5Y2E0MjRlYmEzNjYxMmY0OTFkMDkwYTIyOTA3MWMwMzRhZDRiZmRlYmFjNyAvLyBhZGRyICJaUzJDUk9XWU1GTTJRRFE2VFNTQ0oyNURNWUpQSkVPUVNDUkNTQlk0QU5GTkpQNjZYTERWNjVLUEJRIgoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InJpbmdMU2lnVHhuMCIsImZpZWxkIjoic2VuZGVyIiwiZXhwZWN0ZWQiOiJBZGRyZXNzLmZyb21CeXRlcyhSaW5nTGlua0xTaWcwLmFkZHJlc3MoKSkifQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6Mzc1CgkvLyB2ZXJpZnlUeG4ocmluZ0xTaWdUeG4xLCB7IHNlbmRlcjogQWRkcmVzcy5mcm9tQnl0ZXMoUmluZ0xpbmtMU2lnMS5hZGRyZXNzKCkpIH0pCgkvLyB2ZXJpZnkgc2VuZGVyCglmcmFtZV9kaWcgLTggLy8gcmluZ0xTaWdUeG4xOiBQYXlUeG4KCWd0eG5zIFNlbmRlcgoJcHVzaGJ5dGVzIDB4ZTA2ZTY0YmMwMGY3YmE2NWFiNTJlNjU0YWYxYzQ0MDYzYmQ2ODBlMDU0ZGM5ZTc5MjBkNTFiYTIyMzNiNTQ2NSAvLyBhZGRyICI0QlhHSlBBQTY2NUdMSzJTNFpLSzZIQ0VBWTU1TkFIQUtUT0o0NkpBMlVOMkVJWjNLUlNSN1JNREFRIgoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InJpbmdMU2lnVHhuMSIsImZpZWxkIjoic2VuZGVyIiwiZXhwZWN0ZWQiOiJBZGRyZXNzLmZyb21CeXRlcyhSaW5nTGlua0xTaWcxLmFkZHJlc3MoKSkifQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6Mzc2CgkvLyB2ZXJpZnlUeG4ocmluZ0xTaWdUeG4yLCB7IHNlbmRlcjogQWRkcmVzcy5mcm9tQnl0ZXMoUmluZ0xpbmtMU2lnMi5hZGRyZXNzKCkpIH0pCgkvLyB2ZXJpZnkgc2VuZGVyCglmcmFtZV9kaWcgLTkgLy8gcmluZ0xTaWdUeG4yOiBQYXlUeG4KCWd0eG5zIFNlbmRlcgoJcHVzaGJ5dGVzIDB4NTkwNzczYmMzN2JmODljZGNjZjJkMzBkNThhMTdmZDczMzNhODE3NjljMzVkZjMxZTAxZmIyYWRjZjc2Mjk4NCAvLyBhZGRyICJMRURYSFBCWFg2RTQzVEhTMk1HVlJJTDcyNFpUVkFMV1RRMjU2TVBBRDZaSzNUM1dGR0NKTkwySDJRIgoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InJpbmdMU2lnVHhuMiIsImZpZWxkIjoic2VuZGVyIiwiZXhwZWN0ZWQiOiJBZGRyZXNzLmZyb21CeXRlcyhSaW5nTGlua0xTaWcyLmFkZHJlc3MoKSkifQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6Mzc3CgkvLyB2ZXJpZnlUeG4ocmluZ0xTaWdUeG4zLCB7IHNlbmRlcjogQWRkcmVzcy5mcm9tQnl0ZXMoUmluZ0xpbmtMU2lnMy5hZGRyZXNzKCkpIH0pCgkvLyB2ZXJpZnkgc2VuZGVyCglmcmFtZV9kaWcgLTEwIC8vIHJpbmdMU2lnVHhuMzogUGF5VHhuCglndHhucyBTZW5kZXIKCXB1c2hieXRlcyAweDVkMDlmMmUzM2RlMDQyODUzMDRiYWM2NjE4ZDY5ZWNmOWE5MzlmM2QyNTZjNmVhZGM4YmFkNjc2YmJhMGYzNmIgLy8gYWRkciAiTFVFN0ZZWjU0QkJJS01DTFZSVEJSVlU2WjZOSkhIWjVFVldHNUxPSVhMTEhOTzVBNk5WVlpNUUFLNCIKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJyaW5nTFNpZ1R4bjMiLCJmaWVsZCI6InNlbmRlciIsImV4cGVjdGVkIjoiQWRkcmVzcy5mcm9tQnl0ZXMoUmluZ0xpbmtMU2lnMy5hZGRyZXNzKCkpIn0KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjM3OAoJLy8gdmVyaWZ5VHhuKHJpbmdMU2lnVHhuNCwgeyBzZW5kZXI6IEFkZHJlc3MuZnJvbUJ5dGVzKFJpbmdMaW5rTFNpZzQuYWRkcmVzcygpKSB9KQoJLy8gdmVyaWZ5IHNlbmRlcgoJZnJhbWVfZGlnIC0xMSAvLyByaW5nTFNpZ1R4bjQ6IFBheVR4bgoJZ3R4bnMgU2VuZGVyCglwdXNoYnl0ZXMgMHgzZmNmN2YyZjE0ODY3ZThjODRkYjE5NDY3ZTE3M2YwMmI0YWE3YjYzZTY3MGI2YzZhNzFkZTdjZTNjYjRhMWFlIC8vIGFkZHIgIkg3SFg2TFlVUVo3SVpCRzNERkRINEZaN0FLMktVNjNENFpZTE5SVkhEWFQ0NFBGVVVHWEEyQU5NR00iCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoicmluZ0xTaWdUeG40IiwiZmllbGQiOiJzZW5kZXIiLCJleHBlY3RlZCI6IkFkZHJlc3MuZnJvbUJ5dGVzKFJpbmdMaW5rTFNpZzQuYWRkcmVzcygpKSJ9Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czozNzkKCS8vIHZlcmlmeVR4bihyaW5nTFNpZ1R4bjUsIHsgc2VuZGVyOiBBZGRyZXNzLmZyb21CeXRlcyhSaW5nTGlua0xTaWc1LmFkZHJlc3MoKSkgfSkKCS8vIHZlcmlmeSBzZW5kZXIKCWZyYW1lX2RpZyAtMTIgLy8gcmluZ0xTaWdUeG41OiBQYXlUeG4KCWd0eG5zIFNlbmRlcgoJcHVzaGJ5dGVzIDB4MDFmYzEwYThjZjNhZmE1MjdiZDcxM2ZjMTVkNWMyNTRjMWI4MGZmODJhNmUwMjkxYjBlMDFmZWQxNDVjNDU0YiAvLyBhZGRyICJBSDZCQktHUEhMNUZFNjZYQ1A2QkxWT0NLVEEzUUQ3WUZKWEFGRU5RNEFQNjJGQzRJVkZURkRIVVA0IgoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InJpbmdMU2lnVHhuNSIsImZpZWxkIjoic2VuZGVyIiwiZXhwZWN0ZWQiOiJBZGRyZXNzLmZyb21CeXRlcyhSaW5nTGlua0xTaWc1LmFkZHJlc3MoKSkifQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6MzgyCgkvLyB2ZXJpZnlUeG4oZnVuZGVyTFNpZ1R4biwgewoJLy8gICAgICAgc2VuZGVyOiBBZGRyZXNzLmZyb21CeXRlcyh0aGlzLmxzaWdGdW5kZXJBZGRyZXNzLnZhbHVlKSwKCS8vICAgICAgIHJlY2VpdmVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICBhbW91bnQ6IExTSUdfRlVORF9BTU9VTlQsCgkvLyAgICAgfSkKCS8vIHZlcmlmeSBzZW5kZXIKCWZyYW1lX2RpZyAtNiAvLyBmdW5kZXJMU2lnVHhuOiBQYXlUeG4KCWd0eG5zIFNlbmRlcgoJYnl0ZWMgMjIgLy8gICJsc2lnRnVuZGVyQWRkcmVzcyIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoiZnVuZGVyTFNpZ1R4biIsImZpZWxkIjoic2VuZGVyIiwiZXhwZWN0ZWQiOiJBZGRyZXNzLmZyb21CeXRlcyh0aGlzLmxzaWdGdW5kZXJBZGRyZXNzLnZhbHVlKSJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgcmVjZWl2ZXIKCWZyYW1lX2RpZyAtNiAvLyBmdW5kZXJMU2lnVHhuOiBQYXlUeG4KCWd0eG5zIFJlY2VpdmVyCgl0eG4gU2VuZGVyCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoiZnVuZGVyTFNpZ1R4biIsImZpZWxkIjoicmVjZWl2ZXIiLCJleHBlY3RlZCI6InRoaXMudHhuLnNlbmRlciJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYW1vdW50CglmcmFtZV9kaWcgLTYgLy8gZnVuZGVyTFNpZ1R4bjogUGF5VHhuCglndHhucyBBbW91bnQKCWludGMgMTMgLy8gMTUwMDAwCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoiZnVuZGVyTFNpZ1R4biIsImZpZWxkIjoiYW1vdW50IiwiZXhwZWN0ZWQiOiJMU0lHX0ZVTkRfQU1PVU5UIn0KCWFzc2VydAoKCS8vICppZjhfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czozOTMKCS8vIHRoaXMubWFmaWEudmFsdWUgPT09IGdsb2JhbHMuemVyb0FkZHJlc3MKCWJ5dGVjIDIxIC8vICAibWFmaWEiCglhcHBfZ2xvYmFsX2dldAoJZ2xvYmFsIFplcm9BZGRyZXNzCgk9PQoJYnogKmlmOF9lbmQKCgkvLyAqaWY4X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjM5NAoJLy8gdGhpcy5tYWZpYS52YWx1ZSA9IHRoaXMudHhuLnNlbmRlcgoJYnl0ZWMgMjEgLy8gICJtYWZpYSIKCXR4biBTZW5kZXIKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6Mzk1CgkvLyB0aGlzLm1hZmlhS2V5SW1hZ2UudmFsdWUgPSBrZXlJbWFnZQoJYnl0ZWMgMzIgLy8gICJtYWZpYUtleUltYWdlIgoJZnJhbWVfZGlnIC0zIC8vIGtleUltYWdlOiBieXRlcwoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czozOTYKCS8vIHJldHVybjsKCXJldHN1YgoKKmlmOF9lbmQ6CgkvLyAqaWY5X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6Mzk4CgkvLyB0aGlzLmRvY3Rvci52YWx1ZSA9PT0gZ2xvYmFscy56ZXJvQWRkcmVzcwoJYnl0ZWMgMTMgLy8gICJkb2N0b3IiCglhcHBfZ2xvYmFsX2dldAoJZ2xvYmFsIFplcm9BZGRyZXNzCgk9PQoJYnogKmlmOV9lbmQKCgkvLyAqaWY5X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjM5OQoJLy8gdGhpcy5kb2N0b3IudmFsdWUgPSB0aGlzLnR4bi5zZW5kZXIKCWJ5dGVjIDEzIC8vICAiZG9jdG9yIgoJdHhuIFNlbmRlcgoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo0MDAKCS8vIHRoaXMuZG9jdG9yS2V5SW1hZ2UudmFsdWUgPSBrZXlJbWFnZQoJYnl0ZWMgMzEgLy8gICJkb2N0b3JLZXlJbWFnZSIKCWZyYW1lX2RpZyAtMyAvLyBrZXlJbWFnZTogYnl0ZXMKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NDAxCgkvLyByZXR1cm47CglyZXRzdWIKCippZjlfZW5kOgoJLy8gKmlmMTBfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo0MDMKCS8vIHRoaXMuZmFybWVyLnZhbHVlID09PSBnbG9iYWxzLnplcm9BZGRyZXNzCglieXRlYyAzNyAvLyAgImZhcm1lciIKCWFwcF9nbG9iYWxfZ2V0CglnbG9iYWwgWmVyb0FkZHJlc3MKCT09CglieiAqaWYxMF9lbmQKCgkvLyAqaWYxMF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo0MDQKCS8vIHRoaXMuZmFybWVyLnZhbHVlID0gdGhpcy50eG4uc2VuZGVyCglieXRlYyAzNyAvLyAgImZhcm1lciIKCXR4biBTZW5kZXIKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NDA1CgkvLyB0aGlzLmZhcm1lcktleUltYWdlLnZhbHVlID0ga2V5SW1hZ2UKCWJ5dGVjIDQ0IC8vICAiZmFybWVyS2V5SW1hZ2UiCglmcmFtZV9kaWcgLTMgLy8ga2V5SW1hZ2U6IGJ5dGVzCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjQwNgoJLy8gcmV0dXJuOwoJcmV0c3ViCgoqaWYxMF9lbmQ6CgkvLyAqaWYxMV9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjQwOAoJLy8gdGhpcy5idXRjaGVyLnZhbHVlID09PSBnbG9iYWxzLnplcm9BZGRyZXNzCglieXRlYyAzNSAvLyAgImJ1dGNoZXIiCglhcHBfZ2xvYmFsX2dldAoJZ2xvYmFsIFplcm9BZGRyZXNzCgk9PQoJYnogKmlmMTFfZW5kCgoJLy8gKmlmMTFfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NDA5CgkvLyB0aGlzLmJ1dGNoZXIudmFsdWUgPSB0aGlzLnR4bi5zZW5kZXIKCWJ5dGVjIDM1IC8vICAiYnV0Y2hlciIKCXR4biBTZW5kZXIKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NDEwCgkvLyB0aGlzLmJ1dGNoZXJLZXlJbWFnZS52YWx1ZSA9IGtleUltYWdlCglieXRlYyA0MSAvLyAgImJ1dGNoZXJLZXlJbWFnZSIKCWZyYW1lX2RpZyAtMyAvLyBrZXlJbWFnZTogYnl0ZXMKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NDExCgkvLyByZXR1cm47CglyZXRzdWIKCippZjExX2VuZDoKCS8vICppZjEyX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NDEzCgkvLyB0aGlzLmlubmtlZXAudmFsdWUgPT09IGdsb2JhbHMuemVyb0FkZHJlc3MKCWJ5dGVjIDM2IC8vICAiaW5ua2VlcCIKCWFwcF9nbG9iYWxfZ2V0CglnbG9iYWwgWmVyb0FkZHJlc3MKCT09CglieiAqaWYxMl9lbmQKCgkvLyAqaWYxMl9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo0MTQKCS8vIHRoaXMuaW5ua2VlcC52YWx1ZSA9IHRoaXMudHhuLnNlbmRlcgoJYnl0ZWMgMzYgLy8gICJpbm5rZWVwIgoJdHhuIFNlbmRlcgoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo0MTUKCS8vIHRoaXMuaW5ua2VlcEtleUltYWdlLnZhbHVlID0ga2V5SW1hZ2UKCWJ5dGVjIDQyIC8vICAiaW5ua2VlcEtleUltYWdlIgoJZnJhbWVfZGlnIC0zIC8vIGtleUltYWdlOiBieXRlcwoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo0MTYKCS8vIHJldHVybjsKCXJldHN1YgoKKmlmMTJfZW5kOgoJLy8gKmlmMTNfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo0MTgKCS8vIHRoaXMuZ3JvY2VyLnZhbHVlID09PSBnbG9iYWxzLnplcm9BZGRyZXNzCglieXRlYyAzOCAvLyAgImdyb2NlciIKCWFwcF9nbG9iYWxfZ2V0CglnbG9iYWwgWmVyb0FkZHJlc3MKCT09CglieiAqaWYxM19lbmQKCgkvLyAqaWYxM19jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo0MTkKCS8vIHRoaXMuZ3JvY2VyLnZhbHVlID0gdGhpcy50eG4uc2VuZGVyCglieXRlYyAzOCAvLyAgImdyb2NlciIKCXR4biBTZW5kZXIKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NDIwCgkvLyB0aGlzLmdyb2NlcktleUltYWdlLnZhbHVlID0ga2V5SW1hZ2UKCWJ5dGVjIDQ1IC8vICAiZ3JvY2VyS2V5SW1hZ2UiCglmcmFtZV9kaWcgLTMgLy8ga2V5SW1hZ2U6IGJ5dGVzCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjQyMQoJLy8gdGhpcy5nYW1lU3RhdGUudmFsdWUgPSBzdGF0ZURheVN0YWdlVm90ZQoJYnl0ZWMgMCAvLyAgImdhbWVTdGF0ZSIKCWludGMgNCAvLyAzCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjQyMgoJLy8gcmV0dXJuOwoJcmV0c3ViCgoqaWYxM19lbmQ6CgkvLyBJbnZhbGlkIHN0YXRlISBFcnJvciwgZ2FtZSBzaG91bGQgaGF2ZSBtb3ZlZCB0byB0aGUgbmV4dCBzdGFnZSBhbHJlYWR5LgoJZXJyCglyZXRzdWIKCi8vIGRheVN0YWdlVm90ZSh1aW50NjQpdm9pZAoqYWJpX3JvdXRlX2RheVN0YWdlVm90ZToKCS8vIHZvdGU6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgZGF5U3RhZ2VWb3RlKHVpbnQ2NCl2b2lkCgljYWxsc3ViIGRheVN0YWdlVm90ZQoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gZGF5U3RhZ2VWb3RlKHZvdGU6IHVpbnQ2NCk6IHZvaWQKZGF5U3RhZ2VWb3RlOgoJcHJvdG8gMSAwCgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NDI5CgkvLyBhc3NlcnQodGhpcy5nYW1lU3RhdGUudmFsdWUgPT09IHN0YXRlRGF5U3RhZ2VWb3RlLCAnSW52YWxpZCBtZXRob2QgY2FsbDogR2FtZSBpcyBub3QgaW4gRGF5IFN0YWdlIFZvdGUgc3RhdGUuJykKCWJ5dGVjIDAgLy8gICJnYW1lU3RhdGUiCglhcHBfZ2xvYmFsX2dldAoJaW50YyA0IC8vIDMKCT09CgoJLy8gSW52YWxpZCBtZXRob2QgY2FsbDogR2FtZSBpcyBub3QgaW4gRGF5IFN0YWdlIFZvdGUgc3RhdGUuCglhc3NlcnQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo0MzEKCS8vIGFzc2VydCh2b3RlID4gMCAmJiB2b3RlIDwgNywgJ0ludmFsaWQgdm90ZTogVm90ZSBtdXN0IGJlIGludCAxIDw9IG4gPD0gNi4nKQoJZnJhbWVfZGlnIC0xIC8vIHZvdGU6IHVpbnQ2NAoJaW50YyAxIC8vIDAKCT4KCWR1cAoJYnogKnNraXBfYW5kMAoJZnJhbWVfZGlnIC0xIC8vIHZvdGU6IHVpbnQ2NAoJaW50YyA5IC8vIDcKCTwKCSYmCgoqc2tpcF9hbmQwOgoJLy8gSW52YWxpZCB2b3RlOiBWb3RlIG11c3QgYmUgaW50IDEgPD0gbiA8PSA2LgoJYXNzZXJ0CgoJLy8gKmlmMTRfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo0MzQKCS8vICEoCgkvLyAgICAgICAgIHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5wbGF5ZXIxQWxnb0FkZHIudmFsdWUuYWRkcmVzcyB8fAoJLy8gICAgICAgICB0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMucGxheWVyMkFsZ29BZGRyLnZhbHVlLmFkZHJlc3MgfHwKCS8vICAgICAgICAgdGhpcy50eG4uc2VuZGVyID09PSB0aGlzLnBsYXllcjNBbGdvQWRkci52YWx1ZS5hZGRyZXNzIHx8CgkvLyAgICAgICAgIHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5wbGF5ZXI0QWxnb0FkZHIudmFsdWUuYWRkcmVzcyB8fAoJLy8gICAgICAgICB0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMucGxheWVyNUFsZ29BZGRyLnZhbHVlLmFkZHJlc3MgfHwKCS8vICAgICAgICAgdGhpcy50eG4uc2VuZGVyID09PSB0aGlzLnBsYXllcjZBbGdvQWRkci52YWx1ZS5hZGRyZXNzCgkvLyAgICAgICApCgl0eG4gU2VuZGVyCglieXRlYyAyIC8vICAicGxheWVyMUFsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMCAzMgoJPT0KCWR1cAoJYm56ICpza2lwX29yNQoJdHhuIFNlbmRlcgoJYnl0ZWMgMyAvLyAgInBsYXllcjJBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCT09Cgl8fAoKKnNraXBfb3I1OgoJZHVwCglibnogKnNraXBfb3I2Cgl0eG4gU2VuZGVyCglieXRlYyA0IC8vICAicGxheWVyM0FsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMCAzMgoJPT0KCXx8Cgoqc2tpcF9vcjY6CglkdXAKCWJueiAqc2tpcF9vcjcKCXR4biBTZW5kZXIKCWJ5dGVjIDUgLy8gICJwbGF5ZXI0QWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAwIDMyCgk9PQoJfHwKCipza2lwX29yNzoKCWR1cAoJYm56ICpza2lwX29yOAoJdHhuIFNlbmRlcgoJYnl0ZWMgNiAvLyAgInBsYXllcjVBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCT09Cgl8fAoKKnNraXBfb3I4OgoJZHVwCglibnogKnNraXBfb3I5Cgl0eG4gU2VuZGVyCglieXRlYyA3IC8vICAicGxheWVyNkFsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMCAzMgoJPT0KCXx8Cgoqc2tpcF9vcjk6CgkhCglieiAqaWYxNF9lbmQKCgkvLyAqaWYxNF9jb25zZXF1ZW50CgkvLyBJbGxlZ2FsIGNhbGw6IEFkZHJlc3Mgc2VuZGVyIG5vdCBhbGxvd2VkIHRvIHZvdGUuCgllcnIKCippZjE0X2VuZDoKCS8vICppZjE1X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NDQ2CgkvLyB2b3RlID09PSAxICYmIHRoaXMucGxheWVyMUFsZ29BZGRyLnZhbHVlLmFkZHJlc3MgIT09IGdsb2JhbHMuemVyb0FkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyB2b3RlOiB1aW50NjQKCWludGMgMCAvLyAxCgk9PQoJZHVwCglieiAqc2tpcF9hbmQxCglieXRlYyAyIC8vICAicGxheWVyMUFsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMCAzMgoJZ2xvYmFsIFplcm9BZGRyZXNzCgkhPQoJJiYKCipza2lwX2FuZDE6CglieiAqaWYxNV9lbHNlaWYxX2NvbmRpdGlvbgoKCS8vICppZjE1X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjQ0NwoJLy8gdGhpcy5wbGF5ZXIxUmVjZWl2ZWRWb3Rlcy52YWx1ZSArPSAxCglieXRlYyAxNSAvLyAgInBsYXllcjFSZWNlaXZlZFZvdGVzIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMCAvLyAxCgkrCglieXRlYyAxNSAvLyAgInBsYXllcjFSZWNlaXZlZFZvdGVzIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCWIgKmlmMTVfZW5kCgoqaWYxNV9lbHNlaWYxX2NvbmRpdGlvbjoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjQ0OAoJLy8gdm90ZSA9PT0gMiAmJiB0aGlzLnBsYXllcjJBbGdvQWRkci52YWx1ZS5hZGRyZXNzICE9PSBnbG9iYWxzLnplcm9BZGRyZXNzCglmcmFtZV9kaWcgLTEgLy8gdm90ZTogdWludDY0CglpbnRjIDIgLy8gMgoJPT0KCWR1cAoJYnogKnNraXBfYW5kMgoJYnl0ZWMgMyAvLyAgInBsYXllcjJBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCWdsb2JhbCBaZXJvQWRkcmVzcwoJIT0KCSYmCgoqc2tpcF9hbmQyOgoJYnogKmlmMTVfZWxzZWlmMl9jb25kaXRpb24KCgkvLyAqaWYxNV9lbHNlaWYxX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjQ0OQoJLy8gdGhpcy5wbGF5ZXIyUmVjZWl2ZWRWb3Rlcy52YWx1ZSArPSAxCglieXRlYyAxNiAvLyAgInBsYXllcjJSZWNlaXZlZFZvdGVzIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMCAvLyAxCgkrCglieXRlYyAxNiAvLyAgInBsYXllcjJSZWNlaXZlZFZvdGVzIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCWIgKmlmMTVfZW5kCgoqaWYxNV9lbHNlaWYyX2NvbmRpdGlvbjoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjQ1MAoJLy8gdm90ZSA9PT0gMyAmJiB0aGlzLnBsYXllcjNBbGdvQWRkci52YWx1ZS5hZGRyZXNzICE9PSBnbG9iYWxzLnplcm9BZGRyZXNzCglmcmFtZV9kaWcgLTEgLy8gdm90ZTogdWludDY0CglpbnRjIDQgLy8gMwoJPT0KCWR1cAoJYnogKnNraXBfYW5kMwoJYnl0ZWMgNCAvLyAgInBsYXllcjNBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCWdsb2JhbCBaZXJvQWRkcmVzcwoJIT0KCSYmCgoqc2tpcF9hbmQzOgoJYnogKmlmMTVfZWxzZWlmM19jb25kaXRpb24KCgkvLyAqaWYxNV9lbHNlaWYyX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjQ1MQoJLy8gdGhpcy5wbGF5ZXIzUmVjZWl2ZWRWb3Rlcy52YWx1ZSArPSAxCglieXRlYyAxNyAvLyAgInBsYXllcjNSZWNlaXZlZFZvdGVzIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMCAvLyAxCgkrCglieXRlYyAxNyAvLyAgInBsYXllcjNSZWNlaXZlZFZvdGVzIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCWIgKmlmMTVfZW5kCgoqaWYxNV9lbHNlaWYzX2NvbmRpdGlvbjoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjQ1MgoJLy8gdm90ZSA9PT0gNCAmJiB0aGlzLnBsYXllcjRBbGdvQWRkci52YWx1ZS5hZGRyZXNzICE9PSBnbG9iYWxzLnplcm9BZGRyZXNzCglmcmFtZV9kaWcgLTEgLy8gdm90ZTogdWludDY0CglpbnRjIDcgLy8gNAoJPT0KCWR1cAoJYnogKnNraXBfYW5kNAoJYnl0ZWMgNSAvLyAgInBsYXllcjRBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCWdsb2JhbCBaZXJvQWRkcmVzcwoJIT0KCSYmCgoqc2tpcF9hbmQ0OgoJYnogKmlmMTVfZWxzZWlmNF9jb25kaXRpb24KCgkvLyAqaWYxNV9lbHNlaWYzX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjQ1MwoJLy8gdGhpcy5wbGF5ZXI0UmVjZWl2ZWRWb3Rlcy52YWx1ZSArPSAxCglieXRlYyAxOCAvLyAgInBsYXllcjRSZWNlaXZlZFZvdGVzIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMCAvLyAxCgkrCglieXRlYyAxOCAvLyAgInBsYXllcjRSZWNlaXZlZFZvdGVzIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCWIgKmlmMTVfZW5kCgoqaWYxNV9lbHNlaWY0X2NvbmRpdGlvbjoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjQ1NAoJLy8gdm90ZSA9PT0gNSAmJiB0aGlzLnBsYXllcjVBbGdvQWRkci52YWx1ZS5hZGRyZXNzICE9PSBnbG9iYWxzLnplcm9BZGRyZXNzCglmcmFtZV9kaWcgLTEgLy8gdm90ZTogdWludDY0CglpbnRjIDggLy8gNQoJPT0KCWR1cAoJYnogKnNraXBfYW5kNQoJYnl0ZWMgNiAvLyAgInBsYXllcjVBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCWdsb2JhbCBaZXJvQWRkcmVzcwoJIT0KCSYmCgoqc2tpcF9hbmQ1OgoJYnogKmlmMTVfZWxzZWlmNV9jb25kaXRpb24KCgkvLyAqaWYxNV9lbHNlaWY0X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjQ1NQoJLy8gdGhpcy5wbGF5ZXI1UmVjZWl2ZWRWb3Rlcy52YWx1ZSArPSAxCglieXRlYyAxOSAvLyAgInBsYXllcjVSZWNlaXZlZFZvdGVzIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMCAvLyAxCgkrCglieXRlYyAxOSAvLyAgInBsYXllcjVSZWNlaXZlZFZvdGVzIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCWIgKmlmMTVfZW5kCgoqaWYxNV9lbHNlaWY1X2NvbmRpdGlvbjoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjQ1NgoJLy8gdm90ZSA9PT0gNiAmJiB0aGlzLnBsYXllcjZBbGdvQWRkci52YWx1ZS5hZGRyZXNzICE9PSBnbG9iYWxzLnplcm9BZGRyZXNzCglmcmFtZV9kaWcgLTEgLy8gdm90ZTogdWludDY0CglpbnRjIDMgLy8gNgoJPT0KCWR1cAoJYnogKnNraXBfYW5kNgoJYnl0ZWMgNyAvLyAgInBsYXllcjZBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCWdsb2JhbCBaZXJvQWRkcmVzcwoJIT0KCSYmCgoqc2tpcF9hbmQ2OgoJYnogKmlmMTVfZWxzZQoKCS8vICppZjE1X2Vsc2VpZjVfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NDU3CgkvLyB0aGlzLnBsYXllcjZSZWNlaXZlZFZvdGVzLnZhbHVlICs9IDEKCWJ5dGVjIDIwIC8vICAicGxheWVyNlJlY2VpdmVkVm90ZXMiCglhcHBfZ2xvYmFsX2dldAoJaW50YyAwIC8vIDEKCSsKCWJ5dGVjIDIwIC8vICAicGxheWVyNlJlY2VpdmVkVm90ZXMiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoJYiAqaWYxNV9lbmQKCippZjE1X2Vsc2U6CgkvLyBJbnZhbGlkIHZvdGU6IElzIHBsYXllciBzdGlsbCBhbGl2ZT8KCWVycgoKKmlmMTVfZW5kOgoJLy8gKmlmMTZfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo0NjIKCS8vIHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5wbGF5ZXIxQWxnb0FkZHIudmFsdWUuYWRkcmVzcyAmJiB0aGlzLnBsYXllcjFIYXNWb3RlZC52YWx1ZSA9PT0gMAoJdHhuIFNlbmRlcgoJYnl0ZWMgMiAvLyAgInBsYXllcjFBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCT09CglkdXAKCWJ6ICpza2lwX2FuZDcKCWJ5dGVjIDI1IC8vICAicGxheWVyMUhhc1ZvdGVkIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMSAvLyAwCgk9PQoJJiYKCipza2lwX2FuZDc6CglieiAqaWYxNl9lbHNlaWYxX2NvbmRpdGlvbgoKCS8vICppZjE2X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjQ2MwoJLy8gdGhpcy5wbGF5ZXIxSGFzVm90ZWQudmFsdWUgPSAxCglieXRlYyAyNSAvLyAgInBsYXllcjFIYXNWb3RlZCIKCWludGMgMCAvLyAxCglhcHBfZ2xvYmFsX3B1dAoJYiAqaWYxNl9lbmQKCippZjE2X2Vsc2VpZjFfY29uZGl0aW9uOgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NDY0CgkvLyB0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMucGxheWVyMkFsZ29BZGRyLnZhbHVlLmFkZHJlc3MgJiYgdGhpcy5wbGF5ZXIySGFzVm90ZWQudmFsdWUgPT09IDAKCXR4biBTZW5kZXIKCWJ5dGVjIDMgLy8gICJwbGF5ZXIyQWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAwIDMyCgk9PQoJZHVwCglieiAqc2tpcF9hbmQ4CglieXRlYyAyNiAvLyAgInBsYXllcjJIYXNWb3RlZCIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDEgLy8gMAoJPT0KCSYmCgoqc2tpcF9hbmQ4OgoJYnogKmlmMTZfZWxzZWlmMl9jb25kaXRpb24KCgkvLyAqaWYxNl9lbHNlaWYxX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjQ2NQoJLy8gdGhpcy5wbGF5ZXIySGFzVm90ZWQudmFsdWUgPSAxCglieXRlYyAyNiAvLyAgInBsYXllcjJIYXNWb3RlZCIKCWludGMgMCAvLyAxCglhcHBfZ2xvYmFsX3B1dAoJYiAqaWYxNl9lbmQKCippZjE2X2Vsc2VpZjJfY29uZGl0aW9uOgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NDY2CgkvLyB0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMucGxheWVyM0FsZ29BZGRyLnZhbHVlLmFkZHJlc3MgJiYgdGhpcy5wbGF5ZXIzSGFzVm90ZWQudmFsdWUgPT09IDAKCXR4biBTZW5kZXIKCWJ5dGVjIDQgLy8gICJwbGF5ZXIzQWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAwIDMyCgk9PQoJZHVwCglieiAqc2tpcF9hbmQ5CglieXRlYyAyNyAvLyAgInBsYXllcjNIYXNWb3RlZCIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDEgLy8gMAoJPT0KCSYmCgoqc2tpcF9hbmQ5OgoJYnogKmlmMTZfZWxzZWlmM19jb25kaXRpb24KCgkvLyAqaWYxNl9lbHNlaWYyX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjQ2NwoJLy8gdGhpcy5wbGF5ZXIzSGFzVm90ZWQudmFsdWUgPSAxCglieXRlYyAyNyAvLyAgInBsYXllcjNIYXNWb3RlZCIKCWludGMgMCAvLyAxCglhcHBfZ2xvYmFsX3B1dAoJYiAqaWYxNl9lbmQKCippZjE2X2Vsc2VpZjNfY29uZGl0aW9uOgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NDY4CgkvLyB0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMucGxheWVyNEFsZ29BZGRyLnZhbHVlLmFkZHJlc3MgJiYgdGhpcy5wbGF5ZXI0SGFzVm90ZWQudmFsdWUgPT09IDAKCXR4biBTZW5kZXIKCWJ5dGVjIDUgLy8gICJwbGF5ZXI0QWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAwIDMyCgk9PQoJZHVwCglieiAqc2tpcF9hbmQxMAoJYnl0ZWMgMjggLy8gICJwbGF5ZXI0SGFzVm90ZWQiCglhcHBfZ2xvYmFsX2dldAoJaW50YyAxIC8vIDAKCT09CgkmJgoKKnNraXBfYW5kMTA6CglieiAqaWYxNl9lbHNlaWY0X2NvbmRpdGlvbgoKCS8vICppZjE2X2Vsc2VpZjNfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NDY5CgkvLyB0aGlzLnBsYXllcjRIYXNWb3RlZC52YWx1ZSA9IDEKCWJ5dGVjIDI4IC8vICAicGxheWVyNEhhc1ZvdGVkIgoJaW50YyAwIC8vIDEKCWFwcF9nbG9iYWxfcHV0CgliICppZjE2X2VuZAoKKmlmMTZfZWxzZWlmNF9jb25kaXRpb246CgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo0NzAKCS8vIHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5wbGF5ZXI1QWxnb0FkZHIudmFsdWUuYWRkcmVzcyAmJiB0aGlzLnBsYXllcjVIYXNWb3RlZC52YWx1ZSA9PT0gMAoJdHhuIFNlbmRlcgoJYnl0ZWMgNiAvLyAgInBsYXllcjVBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCT09CglkdXAKCWJ6ICpza2lwX2FuZDExCglieXRlYyAyOSAvLyAgInBsYXllcjVIYXNWb3RlZCIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDEgLy8gMAoJPT0KCSYmCgoqc2tpcF9hbmQxMToKCWJ6ICppZjE2X2Vsc2VpZjVfY29uZGl0aW9uCgoJLy8gKmlmMTZfZWxzZWlmNF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo0NzEKCS8vIHRoaXMucGxheWVyNUhhc1ZvdGVkLnZhbHVlID0gMQoJYnl0ZWMgMjkgLy8gICJwbGF5ZXI1SGFzVm90ZWQiCglpbnRjIDAgLy8gMQoJYXBwX2dsb2JhbF9wdXQKCWIgKmlmMTZfZW5kCgoqaWYxNl9lbHNlaWY1X2NvbmRpdGlvbjoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjQ3MgoJLy8gdGhpcy50eG4uc2VuZGVyID09PSB0aGlzLnBsYXllcjZBbGdvQWRkci52YWx1ZS5hZGRyZXNzICYmIHRoaXMucGxheWVyNkhhc1ZvdGVkLnZhbHVlID09PSAwCgl0eG4gU2VuZGVyCglieXRlYyA3IC8vICAicGxheWVyNkFsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMCAzMgoJPT0KCWR1cAoJYnogKnNraXBfYW5kMTIKCWJ5dGVjIDMwIC8vICAicGxheWVyNkhhc1ZvdGVkIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMSAvLyAwCgk9PQoJJiYKCipza2lwX2FuZDEyOgoJYnogKmlmMTZfZWxzZQoKCS8vICppZjE2X2Vsc2VpZjVfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NDczCgkvLyB0aGlzLnBsYXllcjZIYXNWb3RlZC52YWx1ZSA9IDEKCWJ5dGVjIDMwIC8vICAicGxheWVyNkhhc1ZvdGVkIgoJaW50YyAwIC8vIDEKCWFwcF9nbG9iYWxfcHV0CgliICppZjE2X2VuZAoKKmlmMTZfZWxzZToKCS8vIEFkZHJlc3Mgbm90IGFsbG93ZWQgdG8gdm90ZS4KCWVycgoKKmlmMTZfZW5kOgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NDc4CgkvLyB0aGlzLnBsYXllcnNWb3RlZC52YWx1ZSArPSAxCglieXRlYyAyMyAvLyAgInBsYXllcnNWb3RlZCIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDAgLy8gMQoJKwoJYnl0ZWMgMjMgLy8gICJwbGF5ZXJzVm90ZWQiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vICppZjE3X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NDgwCgkvLyB0aGlzLnBsYXllcnNWb3RlZC52YWx1ZSA9PT0gdGhpcy5wbGF5ZXJzQWxpdmUudmFsdWUKCWJ5dGVjIDIzIC8vICAicGxheWVyc1ZvdGVkIgoJYXBwX2dsb2JhbF9nZXQKCWJ5dGVjIDE0IC8vICAicGxheWVyc0FsaXZlIgoJYXBwX2dsb2JhbF9nZXQKCT09CglieiAqaWYxN19lbmQKCgkvLyAqaWYxN19jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo0ODIKCS8vIHRoaXMuZ2FtZVN0YXRlLnZhbHVlID0gc3RhdGVEYXlTdGFnZUVsaW1pbmF0ZQoJYnl0ZWMgMCAvLyAgImdhbWVTdGF0ZSIKCWludGMgNyAvLyA0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjQ4NQoJLy8gdGhpcy5wbGF5ZXJzVm90ZWQudmFsdWUgPSAwCglieXRlYyAyMyAvLyAgInBsYXllcnNWb3RlZCIKCWludGMgMSAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjQ4NgoJLy8gdGhpcy5wbGF5ZXIxSGFzVm90ZWQudmFsdWUgPSAwCglieXRlYyAyNSAvLyAgInBsYXllcjFIYXNWb3RlZCIKCWludGMgMSAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjQ4NwoJLy8gdGhpcy5wbGF5ZXIySGFzVm90ZWQudmFsdWUgPSAwCglieXRlYyAyNiAvLyAgInBsYXllcjJIYXNWb3RlZCIKCWludGMgMSAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjQ4OAoJLy8gdGhpcy5wbGF5ZXIzSGFzVm90ZWQudmFsdWUgPSAwCglieXRlYyAyNyAvLyAgInBsYXllcjNIYXNWb3RlZCIKCWludGMgMSAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjQ4OQoJLy8gdGhpcy5wbGF5ZXI0SGFzVm90ZWQudmFsdWUgPSAwCglieXRlYyAyOCAvLyAgInBsYXllcjRIYXNWb3RlZCIKCWludGMgMSAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjQ5MAoJLy8gdGhpcy5wbGF5ZXI1SGFzVm90ZWQudmFsdWUgPSAwCglieXRlYyAyOSAvLyAgInBsYXllcjVIYXNWb3RlZCIKCWludGMgMSAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjQ5MQoJLy8gdGhpcy5wbGF5ZXI2SGFzVm90ZWQudmFsdWUgPSAwCglieXRlYyAzMCAvLyAgInBsYXllcjZIYXNWb3RlZCIKCWludGMgMSAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKKmlmMTdfZW5kOgoJcmV0c3ViCgovLyBkYXlTdGFnZUVsaW1pbmF0ZSgpdm9pZAoqYWJpX3JvdXRlX2RheVN0YWdlRWxpbWluYXRlOgoJLy8gZXhlY3V0ZSBkYXlTdGFnZUVsaW1pbmF0ZSgpdm9pZAoJY2FsbHN1YiBkYXlTdGFnZUVsaW1pbmF0ZQoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gZGF5U3RhZ2VFbGltaW5hdGUoKTogdm9pZApkYXlTdGFnZUVsaW1pbmF0ZToKCXByb3RvIDAgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyA4IC8vIDB4CglkdXAKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo0OTgKCS8vIGFzc2VydCgKCS8vICAgICAgIHRoaXMuZ2FtZVN0YXRlLnZhbHVlID09PSBzdGF0ZURheVN0YWdlRWxpbWluYXRlLAoJLy8gICAgICAgJ0ludmFsaWQgbWV0aG9kIGNhbGw6IEdhbWUgaXMgbm90IGluIERheSBTdGFnZSBFbGltaW5hdGUgc3RhdGUuJwoJLy8gICAgICkKCWJ5dGVjIDAgLy8gICJnYW1lU3RhdGUiCglhcHBfZ2xvYmFsX2dldAoJaW50YyA3IC8vIDQKCT09CgoJLy8gSW52YWxpZCBtZXRob2QgY2FsbDogR2FtZSBpcyBub3QgaW4gRGF5IFN0YWdlIEVsaW1pbmF0ZSBzdGF0ZS4KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjUwMwoJLy8gdGhpcy5qdXN0RWxpbWluYXRlZFBsYXllci52YWx1ZSA9IGdsb2JhbHMuemVyb0FkZHJlc3MKCWJ5dGVjIDEgLy8gICJqdXN0RWxpbWluYXRlZFBsYXllciIKCWdsb2JhbCBaZXJvQWRkcmVzcwoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo1MDQKCS8vIHRvcFZvdGVzID0gMAoJaW50YyAxIC8vIDAKCWZyYW1lX2J1cnkgMCAvLyB0b3BWb3RlczogdWludDY0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NTEwCgkvLyBldmVuID0gZ2xvYmFscy5yb3VuZCAlIDIgPT09IDAKCWdsb2JhbCBSb3VuZAoJaW50YyAyIC8vIDIKCSUKCWludGMgMSAvLyAwCgk9PQoJZnJhbWVfYnVyeSAxIC8vIGV2ZW46IGJvb2wKCgkvLyAqaWYxOF9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjUxMgoJLy8gdGhpcy5wbGF5ZXIxUmVjZWl2ZWRWb3Rlcy52YWx1ZSA+IHRvcFZvdGVzIHx8ICh0aGlzLnBsYXllcjFSZWNlaXZlZFZvdGVzLnZhbHVlID09PSB0b3BWb3RlcyAmJiBldmVuKQoJYnl0ZWMgMTUgLy8gICJwbGF5ZXIxUmVjZWl2ZWRWb3RlcyIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgMCAvLyB0b3BWb3RlczogdWludDY0Cgk+CglkdXAKCWJueiAqc2tpcF9vcjEwCglieXRlYyAxNSAvLyAgInBsYXllcjFSZWNlaXZlZFZvdGVzIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAwIC8vIHRvcFZvdGVzOiB1aW50NjQKCT09CglkdXAKCWJ6ICpza2lwX2FuZDEzCglmcmFtZV9kaWcgMSAvLyBldmVuOiBib29sCgkmJgoKKnNraXBfYW5kMTM6Cgl8fAoKKnNraXBfb3IxMDoKCWJ6ICppZjE4X2VuZAoKCS8vICppZjE4X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjUxMwoJLy8gdGhpcy5qdXN0RWxpbWluYXRlZFBsYXllci52YWx1ZSA9IHRoaXMucGxheWVyMUFsZ29BZGRyLnZhbHVlLmFkZHJlc3MKCWJ5dGVjIDEgLy8gICJqdXN0RWxpbWluYXRlZFBsYXllciIKCWJ5dGVjIDIgLy8gICJwbGF5ZXIxQWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAwIDMyCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjUxNAoJLy8gdG9wVm90ZXMgPSB0aGlzLnBsYXllcjFSZWNlaXZlZFZvdGVzLnZhbHVlCglieXRlYyAxNSAvLyAgInBsYXllcjFSZWNlaXZlZFZvdGVzIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2J1cnkgMCAvLyB0b3BWb3RlczogdWludDY0CgoqaWYxOF9lbmQ6CgkvLyAqaWYxOV9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjUxNwoJLy8gdGhpcy5wbGF5ZXIyUmVjZWl2ZWRWb3Rlcy52YWx1ZSA+IHRvcFZvdGVzIHx8ICh0aGlzLnBsYXllcjJSZWNlaXZlZFZvdGVzLnZhbHVlID09PSB0b3BWb3RlcyAmJiBldmVuKQoJYnl0ZWMgMTYgLy8gICJwbGF5ZXIyUmVjZWl2ZWRWb3RlcyIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgMCAvLyB0b3BWb3RlczogdWludDY0Cgk+CglkdXAKCWJueiAqc2tpcF9vcjExCglieXRlYyAxNiAvLyAgInBsYXllcjJSZWNlaXZlZFZvdGVzIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAwIC8vIHRvcFZvdGVzOiB1aW50NjQKCT09CglkdXAKCWJ6ICpza2lwX2FuZDE0CglmcmFtZV9kaWcgMSAvLyBldmVuOiBib29sCgkmJgoKKnNraXBfYW5kMTQ6Cgl8fAoKKnNraXBfb3IxMToKCWJ6ICppZjE5X2VuZAoKCS8vICppZjE5X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjUxOAoJLy8gdGhpcy5qdXN0RWxpbWluYXRlZFBsYXllci52YWx1ZSA9IHRoaXMucGxheWVyMkFsZ29BZGRyLnZhbHVlLmFkZHJlc3MKCWJ5dGVjIDEgLy8gICJqdXN0RWxpbWluYXRlZFBsYXllciIKCWJ5dGVjIDMgLy8gICJwbGF5ZXIyQWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAwIDMyCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjUxOQoJLy8gdG9wVm90ZXMgPSB0aGlzLnBsYXllcjJSZWNlaXZlZFZvdGVzLnZhbHVlCglieXRlYyAxNiAvLyAgInBsYXllcjJSZWNlaXZlZFZvdGVzIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2J1cnkgMCAvLyB0b3BWb3RlczogdWludDY0CgoqaWYxOV9lbmQ6CgkvLyAqaWYyMF9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjUyMgoJLy8gdGhpcy5wbGF5ZXIzUmVjZWl2ZWRWb3Rlcy52YWx1ZSA+IHRvcFZvdGVzIHx8ICh0aGlzLnBsYXllcjNSZWNlaXZlZFZvdGVzLnZhbHVlID09PSB0b3BWb3RlcyAmJiBldmVuKQoJYnl0ZWMgMTcgLy8gICJwbGF5ZXIzUmVjZWl2ZWRWb3RlcyIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgMCAvLyB0b3BWb3RlczogdWludDY0Cgk+CglkdXAKCWJueiAqc2tpcF9vcjEyCglieXRlYyAxNyAvLyAgInBsYXllcjNSZWNlaXZlZFZvdGVzIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAwIC8vIHRvcFZvdGVzOiB1aW50NjQKCT09CglkdXAKCWJ6ICpza2lwX2FuZDE1CglmcmFtZV9kaWcgMSAvLyBldmVuOiBib29sCgkmJgoKKnNraXBfYW5kMTU6Cgl8fAoKKnNraXBfb3IxMjoKCWJ6ICppZjIwX2VuZAoKCS8vICppZjIwX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjUyMwoJLy8gdGhpcy5qdXN0RWxpbWluYXRlZFBsYXllci52YWx1ZSA9IHRoaXMucGxheWVyM0FsZ29BZGRyLnZhbHVlLmFkZHJlc3MKCWJ5dGVjIDEgLy8gICJqdXN0RWxpbWluYXRlZFBsYXllciIKCWJ5dGVjIDQgLy8gICJwbGF5ZXIzQWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAwIDMyCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjUyNAoJLy8gdG9wVm90ZXMgPSB0aGlzLnBsYXllcjNSZWNlaXZlZFZvdGVzLnZhbHVlCglieXRlYyAxNyAvLyAgInBsYXllcjNSZWNlaXZlZFZvdGVzIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2J1cnkgMCAvLyB0b3BWb3RlczogdWludDY0CgoqaWYyMF9lbmQ6CgkvLyAqaWYyMV9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjUyNwoJLy8gdGhpcy5wbGF5ZXI0UmVjZWl2ZWRWb3Rlcy52YWx1ZSA+IHRvcFZvdGVzIHx8ICh0aGlzLnBsYXllcjRSZWNlaXZlZFZvdGVzLnZhbHVlID09PSB0b3BWb3RlcyAmJiBldmVuKQoJYnl0ZWMgMTggLy8gICJwbGF5ZXI0UmVjZWl2ZWRWb3RlcyIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgMCAvLyB0b3BWb3RlczogdWludDY0Cgk+CglkdXAKCWJueiAqc2tpcF9vcjEzCglieXRlYyAxOCAvLyAgInBsYXllcjRSZWNlaXZlZFZvdGVzIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAwIC8vIHRvcFZvdGVzOiB1aW50NjQKCT09CglkdXAKCWJ6ICpza2lwX2FuZDE2CglmcmFtZV9kaWcgMSAvLyBldmVuOiBib29sCgkmJgoKKnNraXBfYW5kMTY6Cgl8fAoKKnNraXBfb3IxMzoKCWJ6ICppZjIxX2VuZAoKCS8vICppZjIxX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjUyOAoJLy8gdGhpcy5qdXN0RWxpbWluYXRlZFBsYXllci52YWx1ZSA9IHRoaXMucGxheWVyNEFsZ29BZGRyLnZhbHVlLmFkZHJlc3MKCWJ5dGVjIDEgLy8gICJqdXN0RWxpbWluYXRlZFBsYXllciIKCWJ5dGVjIDUgLy8gICJwbGF5ZXI0QWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAwIDMyCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjUyOQoJLy8gdG9wVm90ZXMgPSB0aGlzLnBsYXllcjRSZWNlaXZlZFZvdGVzLnZhbHVlCglieXRlYyAxOCAvLyAgInBsYXllcjRSZWNlaXZlZFZvdGVzIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2J1cnkgMCAvLyB0b3BWb3RlczogdWludDY0CgoqaWYyMV9lbmQ6CgkvLyAqaWYyMl9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjUzMgoJLy8gdGhpcy5wbGF5ZXI1UmVjZWl2ZWRWb3Rlcy52YWx1ZSA+IHRvcFZvdGVzIHx8ICh0aGlzLnBsYXllcjVSZWNlaXZlZFZvdGVzLnZhbHVlID09PSB0b3BWb3RlcyAmJiBldmVuKQoJYnl0ZWMgMTkgLy8gICJwbGF5ZXI1UmVjZWl2ZWRWb3RlcyIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgMCAvLyB0b3BWb3RlczogdWludDY0Cgk+CglkdXAKCWJueiAqc2tpcF9vcjE0CglieXRlYyAxOSAvLyAgInBsYXllcjVSZWNlaXZlZFZvdGVzIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAwIC8vIHRvcFZvdGVzOiB1aW50NjQKCT09CglkdXAKCWJ6ICpza2lwX2FuZDE3CglmcmFtZV9kaWcgMSAvLyBldmVuOiBib29sCgkmJgoKKnNraXBfYW5kMTc6Cgl8fAoKKnNraXBfb3IxNDoKCWJ6ICppZjIyX2VuZAoKCS8vICppZjIyX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjUzMwoJLy8gdGhpcy5qdXN0RWxpbWluYXRlZFBsYXllci52YWx1ZSA9IHRoaXMucGxheWVyNUFsZ29BZGRyLnZhbHVlLmFkZHJlc3MKCWJ5dGVjIDEgLy8gICJqdXN0RWxpbWluYXRlZFBsYXllciIKCWJ5dGVjIDYgLy8gICJwbGF5ZXI1QWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAwIDMyCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjUzNAoJLy8gdG9wVm90ZXMgPSB0aGlzLnBsYXllcjVSZWNlaXZlZFZvdGVzLnZhbHVlCglieXRlYyAxOSAvLyAgInBsYXllcjVSZWNlaXZlZFZvdGVzIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2J1cnkgMCAvLyB0b3BWb3RlczogdWludDY0CgoqaWYyMl9lbmQ6CgkvLyAqaWYyM19jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjUzNwoJLy8gdGhpcy5wbGF5ZXI2UmVjZWl2ZWRWb3Rlcy52YWx1ZSA+IHRvcFZvdGVzIHx8ICh0aGlzLnBsYXllcjZSZWNlaXZlZFZvdGVzLnZhbHVlID09PSB0b3BWb3RlcyAmJiBldmVuKQoJYnl0ZWMgMjAgLy8gICJwbGF5ZXI2UmVjZWl2ZWRWb3RlcyIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgMCAvLyB0b3BWb3RlczogdWludDY0Cgk+CglkdXAKCWJueiAqc2tpcF9vcjE1CglieXRlYyAyMCAvLyAgInBsYXllcjZSZWNlaXZlZFZvdGVzIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAwIC8vIHRvcFZvdGVzOiB1aW50NjQKCT09CglkdXAKCWJ6ICpza2lwX2FuZDE4CglmcmFtZV9kaWcgMSAvLyBldmVuOiBib29sCgkmJgoKKnNraXBfYW5kMTg6Cgl8fAoKKnNraXBfb3IxNToKCWJ6ICppZjIzX2VuZAoKCS8vICppZjIzX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjUzOAoJLy8gdGhpcy5qdXN0RWxpbWluYXRlZFBsYXllci52YWx1ZSA9IHRoaXMucGxheWVyNkFsZ29BZGRyLnZhbHVlLmFkZHJlc3MKCWJ5dGVjIDEgLy8gICJqdXN0RWxpbWluYXRlZFBsYXllciIKCWJ5dGVjIDcgLy8gICJwbGF5ZXI2QWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAwIDMyCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjUzOQoJLy8gdG9wVm90ZXMgPSB0aGlzLnBsYXllcjZSZWNlaXZlZFZvdGVzLnZhbHVlCglieXRlYyAyMCAvLyAgInBsYXllcjZSZWNlaXZlZFZvdGVzIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2J1cnkgMCAvLyB0b3BWb3RlczogdWludDY0CgoqaWYyM19lbmQ6CgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo1NDIKCS8vIGFzc2VydCh0aGlzLmp1c3RFbGltaW5hdGVkUGxheWVyLnZhbHVlICE9PSBnbG9iYWxzLnplcm9BZGRyZXNzLCAnRXJyb3Igc3RhdGU6IFplcm8gQWRkcmVzcyB3b24gdm90ZSEnKQoJYnl0ZWMgMSAvLyAgImp1c3RFbGltaW5hdGVkUGxheWVyIgoJYXBwX2dsb2JhbF9nZXQKCWdsb2JhbCBaZXJvQWRkcmVzcwoJIT0KCgkvLyBFcnJvciBzdGF0ZTogWmVybyBBZGRyZXNzIHdvbiB2b3RlIQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NTQzCgkvLyBhc3NlcnQodG9wVm90ZXMgIT09IDAsICdFcnJvciBzdGF0ZTogTm8gdm90ZXMgd2VyZSBjYXN0IScpCglmcmFtZV9kaWcgMCAvLyB0b3BWb3RlczogdWludDY0CglpbnRjIDEgLy8gMAoJIT0KCgkvLyBFcnJvciBzdGF0ZTogTm8gdm90ZXMgd2VyZSBjYXN0IQoJYXNzZXJ0CgoJLy8gKmlmMjRfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo1NDgKCS8vIHRoaXMuanVzdEVsaW1pbmF0ZWRQbGF5ZXIudmFsdWUgPT09IHRoaXMucGxheWVyMUFsZ29BZGRyLnZhbHVlLmFkZHJlc3MKCWJ5dGVjIDEgLy8gICJqdXN0RWxpbWluYXRlZFBsYXllciIKCWFwcF9nbG9iYWxfZ2V0CglieXRlYyAyIC8vICAicGxheWVyMUFsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMCAzMgoJPT0KCWJ6ICppZjI0X2VuZAoKCS8vICppZjI0X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjU0OQoJLy8gdGhpcy5wbGF5ZXIxQWxnb0FkZHIudmFsdWUuZWxpbWluYXRlZCA9IDEKCWJ5dGVjIDIgLy8gICJwbGF5ZXIxQWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJYnl0ZWMgMTIgLy8gMHgwMDAwMDAwMDAwMDAwMDAxCglyZXBsYWNlMiAzMgoJYnl0ZWMgMiAvLyAgInBsYXllcjFBbGdvQWRkciIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoqaWYyNF9lbmQ6CgkvLyAqaWYyNV9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjU1MgoJLy8gdGhpcy5qdXN0RWxpbWluYXRlZFBsYXllci52YWx1ZSA9PT0gdGhpcy5wbGF5ZXIyQWxnb0FkZHIudmFsdWUuYWRkcmVzcwoJYnl0ZWMgMSAvLyAgImp1c3RFbGltaW5hdGVkUGxheWVyIgoJYXBwX2dsb2JhbF9nZXQKCWJ5dGVjIDMgLy8gICJwbGF5ZXIyQWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAwIDMyCgk9PQoJYnogKmlmMjVfZW5kCgoJLy8gKmlmMjVfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NTUzCgkvLyB0aGlzLnBsYXllcjJBbGdvQWRkci52YWx1ZS5lbGltaW5hdGVkID0gMQoJYnl0ZWMgMyAvLyAgInBsYXllcjJBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglieXRlYyAxMiAvLyAweDAwMDAwMDAwMDAwMDAwMDEKCXJlcGxhY2UyIDMyCglieXRlYyAzIC8vICAicGxheWVyMkFsZ29BZGRyIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCippZjI1X2VuZDoKCS8vICppZjI2X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NTU2CgkvLyB0aGlzLmp1c3RFbGltaW5hdGVkUGxheWVyLnZhbHVlID09PSB0aGlzLnBsYXllcjNBbGdvQWRkci52YWx1ZS5hZGRyZXNzCglieXRlYyAxIC8vICAianVzdEVsaW1pbmF0ZWRQbGF5ZXIiCglhcHBfZ2xvYmFsX2dldAoJYnl0ZWMgNCAvLyAgInBsYXllcjNBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCT09CglieiAqaWYyNl9lbmQKCgkvLyAqaWYyNl9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo1NTcKCS8vIHRoaXMucGxheWVyM0FsZ29BZGRyLnZhbHVlLmVsaW1pbmF0ZWQgPSAxCglieXRlYyA0IC8vICAicGxheWVyM0FsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWJ5dGVjIDEyIC8vIDB4MDAwMDAwMDAwMDAwMDAwMQoJcmVwbGFjZTIgMzIKCWJ5dGVjIDQgLy8gICJwbGF5ZXIzQWxnb0FkZHIiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKKmlmMjZfZW5kOgoJLy8gKmlmMjdfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo1NjAKCS8vIHRoaXMuanVzdEVsaW1pbmF0ZWRQbGF5ZXIudmFsdWUgPT09IHRoaXMucGxheWVyNEFsZ29BZGRyLnZhbHVlLmFkZHJlc3MKCWJ5dGVjIDEgLy8gICJqdXN0RWxpbWluYXRlZFBsYXllciIKCWFwcF9nbG9iYWxfZ2V0CglieXRlYyA1IC8vICAicGxheWVyNEFsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMCAzMgoJPT0KCWJ6ICppZjI3X2VuZAoKCS8vICppZjI3X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjU2MQoJLy8gdGhpcy5wbGF5ZXI0QWxnb0FkZHIudmFsdWUuZWxpbWluYXRlZCA9IDEKCWJ5dGVjIDUgLy8gICJwbGF5ZXI0QWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJYnl0ZWMgMTIgLy8gMHgwMDAwMDAwMDAwMDAwMDAxCglyZXBsYWNlMiAzMgoJYnl0ZWMgNSAvLyAgInBsYXllcjRBbGdvQWRkciIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoqaWYyN19lbmQ6CgkvLyAqaWYyOF9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjU2NAoJLy8gdGhpcy5qdXN0RWxpbWluYXRlZFBsYXllci52YWx1ZSA9PT0gdGhpcy5wbGF5ZXI1QWxnb0FkZHIudmFsdWUuYWRkcmVzcwoJYnl0ZWMgMSAvLyAgImp1c3RFbGltaW5hdGVkUGxheWVyIgoJYXBwX2dsb2JhbF9nZXQKCWJ5dGVjIDYgLy8gICJwbGF5ZXI1QWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAwIDMyCgk9PQoJYnogKmlmMjhfZW5kCgoJLy8gKmlmMjhfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NTY1CgkvLyB0aGlzLnBsYXllcjVBbGdvQWRkci52YWx1ZS5lbGltaW5hdGVkID0gMQoJYnl0ZWMgNiAvLyAgInBsYXllcjVBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglieXRlYyAxMiAvLyAweDAwMDAwMDAwMDAwMDAwMDEKCXJlcGxhY2UyIDMyCglieXRlYyA2IC8vICAicGxheWVyNUFsZ29BZGRyIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCippZjI4X2VuZDoKCS8vICppZjI5X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NTY4CgkvLyB0aGlzLmp1c3RFbGltaW5hdGVkUGxheWVyLnZhbHVlID09PSB0aGlzLnBsYXllcjZBbGdvQWRkci52YWx1ZS5hZGRyZXNzCglieXRlYyAxIC8vICAianVzdEVsaW1pbmF0ZWRQbGF5ZXIiCglhcHBfZ2xvYmFsX2dldAoJYnl0ZWMgNyAvLyAgInBsYXllcjZBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCT09CglieiAqaWYyOV9lbmQKCgkvLyAqaWYyOV9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo1NjkKCS8vIHRoaXMucGxheWVyNkFsZ29BZGRyLnZhbHVlLmVsaW1pbmF0ZWQgPSAxCglieXRlYyA3IC8vICAicGxheWVyNkFsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWJ5dGVjIDEyIC8vIDB4MDAwMDAwMDAwMDAwMDAwMQoJcmVwbGFjZTIgMzIKCWJ5dGVjIDcgLy8gICJwbGF5ZXI2QWxnb0FkZHIiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKKmlmMjlfZW5kOgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NTcyCgkvLyB0aGlzLnBsYXllcnNBbGl2ZS52YWx1ZSAtPSAxCglieXRlYyAxNCAvLyAgInBsYXllcnNBbGl2ZSIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDAgLy8gMQoJLQoJYnl0ZWMgMTQgLy8gICJwbGF5ZXJzQWxpdmUiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjU3NgoJLy8gdGhpcy5wbGF5ZXIxUmVjZWl2ZWRWb3Rlcy52YWx1ZSA9IDAKCWJ5dGVjIDE1IC8vICAicGxheWVyMVJlY2VpdmVkVm90ZXMiCglpbnRjIDEgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo1NzcKCS8vIHRoaXMucGxheWVyMlJlY2VpdmVkVm90ZXMudmFsdWUgPSAwCglieXRlYyAxNiAvLyAgInBsYXllcjJSZWNlaXZlZFZvdGVzIgoJaW50YyAxIC8vIDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NTc4CgkvLyB0aGlzLnBsYXllcjNSZWNlaXZlZFZvdGVzLnZhbHVlID0gMAoJYnl0ZWMgMTcgLy8gICJwbGF5ZXIzUmVjZWl2ZWRWb3RlcyIKCWludGMgMSAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjU3OQoJLy8gdGhpcy5wbGF5ZXI0UmVjZWl2ZWRWb3Rlcy52YWx1ZSA9IDAKCWJ5dGVjIDE4IC8vICAicGxheWVyNFJlY2VpdmVkVm90ZXMiCglpbnRjIDEgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo1ODAKCS8vIHRoaXMucGxheWVyNVJlY2VpdmVkVm90ZXMudmFsdWUgPSAwCglieXRlYyAxOSAvLyAgInBsYXllcjVSZWNlaXZlZFZvdGVzIgoJaW50YyAxIC8vIDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NTgxCgkvLyB0aGlzLnBsYXllcjZSZWNlaXZlZFZvdGVzLnZhbHVlID0gMAoJYnl0ZWMgMjAgLy8gICJwbGF5ZXI2UmVjZWl2ZWRWb3RlcyIKCWludGMgMSAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjU4MwoJLy8gdGhpcy5nYW1lU3RhdGUudmFsdWUgPSBzdGF0ZURheVN0YWdlVW5tYXNraW5nCglieXRlYyAwIC8vICAiZ2FtZVN0YXRlIgoJaW50YyA4IC8vIDUKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIGRheVN0YWdlVW5tYXNraW5nKGJ5dGVbXSl2b2lkCiphYmlfcm91dGVfZGF5U3RhZ2VVbm1hc2tpbmc6CgkvLyBibHNTazogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgZGF5U3RhZ2VVbm1hc2tpbmcoYnl0ZVtdKXZvaWQKCWNhbGxzdWIgZGF5U3RhZ2VVbm1hc2tpbmcKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGRheVN0YWdlVW5tYXNraW5nKGJsc1NrOiBieXRlcyk6IHZvaWQKZGF5U3RhZ2VVbm1hc2tpbmc6Cglwcm90byAxIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgOCAvLyAweAoJZHVwbiAyCgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NTg3CgkvLyBhc3NlcnQoCgkvLyAgICAgICB0aGlzLmdhbWVTdGF0ZS52YWx1ZSA9PT0gc3RhdGVEYXlTdGFnZVVubWFza2luZywKCS8vICAgICAgICdJbnZhbGlkIG1ldGhvZCBjYWxsOiBHYW1lIGlzIG5vdCBpbiBEYXkgU3RhZ2UgUmV2ZWFsIHN0YXRlLicKCS8vICAgICApCglieXRlYyAwIC8vICAiZ2FtZVN0YXRlIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgOCAvLyA1Cgk9PQoKCS8vIEludmFsaWQgbWV0aG9kIGNhbGw6IEdhbWUgaXMgbm90IGluIERheSBTdGFnZSBSZXZlYWwgc3RhdGUuCglhc3NlcnQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo1OTIKCS8vIGFzc2VydCh0aGlzLmp1c3RFbGltaW5hdGVkUGxheWVyLnZhbHVlID09PSB0aGlzLnR4bi5zZW5kZXIsICdFcnJvciBzdGF0ZTogT3RoZXIgcGxheWVyIGNhbGxlZCBtZXRob2QuJykKCWJ5dGVjIDEgLy8gICJqdXN0RWxpbWluYXRlZFBsYXllciIKCWFwcF9nbG9iYWxfZ2V0Cgl0eG4gU2VuZGVyCgk9PQoKCS8vIEVycm9yIHN0YXRlOiBPdGhlciBwbGF5ZXIgY2FsbGVkIG1ldGhvZC4KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjU5NQoJLy8gQkxTX1BLID0gZWNTY2FsYXJNdWwoJ0JMUzEyXzM4MWcxJywgaGV4KEJMUzEyMzgxRzFfQkFTRVBPSU5UX0JZVEVTKSwgYmxzU2spCglieXRlYyAzOSAvLyAweDE3ZjFkM2E3MzE5N2Q3OTQyNjk1NjM4YzRmYTlhYzBmYzM2ODhjNGY5Nzc0YjkwNWExNGUzYTNmMTcxYmFjNTg2YzU1ZTgzZmY5N2ExYWVmZmIzYWYwMGFkYjIyYzZiYjA4YjNmNDgxZTNhYWEwZjFhMDllMzBlZDc0MWQ4YWU0ZmNmNWUwOTVkNWQwMGFmNjAwZGIxOGNiMmMwNGIzZWRkMDNjYzc0NGEyODg4YWU0MGNhYTIzMjk0NmM1ZTdlMQoJZnJhbWVfZGlnIC0xIC8vIGJsc1NrOiBieXRlcwoJZWNfc2NhbGFyX211bCBCTFMxMl8zODFnMQoJZnJhbWVfYnVyeSAwIC8vIEJMU19QSzogYnl0ZVtdCgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NTk2CgkvLyBoYXNoVG9Qb2ludCA9IHRoaXMuaGFzaFBvaW50VG9Qb2ludChCTFNfUEspCglmcmFtZV9kaWcgMCAvLyBCTFNfUEs6IGJ5dGVbXQoJY2FsbHN1YiBoYXNoUG9pbnRUb1BvaW50CglmcmFtZV9idXJ5IDEgLy8gaGFzaFRvUG9pbnQ6IGJ5dGVbXQoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjU5NwoJLy8gZ2VuS2V5SW1hZ2UgPSBlY1NjYWxhck11bCgnQkxTMTJfMzgxZzEnLCBoYXNoVG9Qb2ludCwgYmxzU2spCglmcmFtZV9kaWcgMSAvLyBoYXNoVG9Qb2ludDogYnl0ZVtdCglmcmFtZV9kaWcgLTEgLy8gYmxzU2s6IGJ5dGVzCgllY19zY2FsYXJfbXVsIEJMUzEyXzM4MWcxCglmcmFtZV9idXJ5IDIgLy8gZ2VuS2V5SW1hZ2U6IGJ5dGVbXQoKCS8vICppZjMwX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NTk5CgkvLyBnZW5LZXlJbWFnZSA9PT0gdGhpcy5tYWZpYUtleUltYWdlLnZhbHVlCglmcmFtZV9kaWcgMiAvLyBnZW5LZXlJbWFnZTogYnl0ZVtdCglieXRlYyAzMiAvLyAgIm1hZmlhS2V5SW1hZ2UiCglhcHBfZ2xvYmFsX2dldAoJPT0KCWJ6ICppZjMwX2VuZAoKCS8vICppZjMwX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjYwMgoJLy8gdGhpcy5tYWZpYS52YWx1ZSA9IGdsb2JhbHMuemVyb0FkZHJlc3MKCWJ5dGVjIDIxIC8vICAibWFmaWEiCglnbG9iYWwgWmVyb0FkZHJlc3MKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NjAzCgkvLyB0aGlzLmdhbWVTdGF0ZS52YWx1ZSA9IHN0YXRlR2FtZU92ZXIKCWJ5dGVjIDAgLy8gICJnYW1lU3RhdGUiCglpbnRjIDUgLy8gMTIKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NjA0CgkvLyByZXR1cm47CglyZXRzdWIKCippZjMwX2VuZDoKCS8vICppZjMxX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NjA3CgkvLyBnZW5LZXlJbWFnZSA9PT0gdGhpcy5kb2N0b3JLZXlJbWFnZS52YWx1ZQoJZnJhbWVfZGlnIDIgLy8gZ2VuS2V5SW1hZ2U6IGJ5dGVbXQoJYnl0ZWMgMzEgLy8gICJkb2N0b3JLZXlJbWFnZSIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoJYnogKmlmMzFfZW5kCgoJLy8gKmlmMzFfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NjA5CgkvLyB0aGlzLmRvY3Rvci52YWx1ZSA9IGdsb2JhbHMuemVyb0FkZHJlc3MKCWJ5dGVjIDEzIC8vICAiZG9jdG9yIgoJZ2xvYmFsIFplcm9BZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoKKmlmMzFfZW5kOgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NjEyCgkvLyB0aGlzLmp1c3RFbGltaW5hdGVkUGxheWVyLnZhbHVlID0gZ2xvYmFscy56ZXJvQWRkcmVzcwoJYnl0ZWMgMSAvLyAgImp1c3RFbGltaW5hdGVkUGxheWVyIgoJZ2xvYmFsIFplcm9BZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoKCS8vICppZjMyX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NjE0CgkvLyB0aGlzLnBsYXllcnNBbGl2ZS52YWx1ZSA8PSAyCglieXRlYyAxNCAvLyAgInBsYXllcnNBbGl2ZSIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDIgLy8gMgoJPD0KCWJ6ICppZjMyX2VuZAoKCS8vICppZjMyX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjYxNwoJLy8gdGhpcy5nYW1lU3RhdGUudmFsdWUgPSBzdGF0ZUdhbWVPdmVyCglieXRlYyAwIC8vICAiZ2FtZVN0YXRlIgoJaW50YyA1IC8vIDEyCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjYxOAoJLy8gcmV0dXJuOwoJcmV0c3ViCgoqaWYzMl9lbmQ6CgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo2MjEKCS8vIHRoaXMuZ2FtZVN0YXRlLnZhbHVlID0gc3RhdGVOaWdodFN0YWdlTWFmaWFDb21taXQKCWJ5dGVjIDAgLy8gICJnYW1lU3RhdGUiCglpbnRjIDMgLy8gNgoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gbmlnaHRTdGFnZU1hZmlhQ29tbWl0KGJ5dGVbXSl2b2lkCiphYmlfcm91dGVfbmlnaHRTdGFnZU1hZmlhQ29tbWl0OgoJLy8gY29tbWl0bWVudDogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgbmlnaHRTdGFnZU1hZmlhQ29tbWl0KGJ5dGVbXSl2b2lkCgljYWxsc3ViIG5pZ2h0U3RhZ2VNYWZpYUNvbW1pdAoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gbmlnaHRTdGFnZU1hZmlhQ29tbWl0KGNvbW1pdG1lbnQ6IGJ5dGVzKTogdm9pZApuaWdodFN0YWdlTWFmaWFDb21taXQ6Cglwcm90byAxIDAKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo2MjUKCS8vIGFzc2VydCgKCS8vICAgICAgIHRoaXMuZ2FtZVN0YXRlLnZhbHVlID09PSBzdGF0ZU5pZ2h0U3RhZ2VNYWZpYUNvbW1pdCwKCS8vICAgICAgICdJbnZhbGlkIG1ldGhvZCBjYWxsOiBHYW1lIGlzIG5vdCBpbiBOaWdodCBTdGFnZSBNYWZmaWEgQ29tbWl0IHN0YXRlLicKCS8vICAgICApCglieXRlYyAwIC8vICAiZ2FtZVN0YXRlIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMyAvLyA2Cgk9PQoKCS8vIEludmFsaWQgbWV0aG9kIGNhbGw6IEdhbWUgaXMgbm90IGluIE5pZ2h0IFN0YWdlIE1hZmZpYSBDb21taXQgc3RhdGUuCglhc3NlcnQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo2MzAKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMubWFmaWEudmFsdWUsICdFcnJvciBzdGF0ZTogTm9uLW1hZmlhIHBsYXllciBjYWxsZWQgbWV0aG9kLicpCgl0eG4gU2VuZGVyCglieXRlYyAyMSAvLyAgIm1hZmlhIgoJYXBwX2dsb2JhbF9nZXQKCT09CgoJLy8gRXJyb3Igc3RhdGU6IE5vbi1tYWZpYSBwbGF5ZXIgY2FsbGVkIG1ldGhvZC4KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjYzMgoJLy8gdGhpcy5tYWZpYUNvbW1pdG1lbnQudmFsdWUgPSBjb21taXRtZW50CglieXRlYyA0MyAvLyAgIm1hZmlhQ29tbWl0bWVudCIKCWZyYW1lX2RpZyAtMSAvLyBjb21taXRtZW50OiBieXRlcwoJYXBwX2dsb2JhbF9wdXQKCgkvLyAqaWYzM19jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjYzNAoJLy8gdGhpcy5kb2N0b3IudmFsdWUgPT09IGdsb2JhbHMuemVyb0FkZHJlc3MKCWJ5dGVjIDEzIC8vICAiZG9jdG9yIgoJYXBwX2dsb2JhbF9nZXQKCWdsb2JhbCBaZXJvQWRkcmVzcwoJPT0KCWJ6ICppZjMzX2Vsc2UKCgkvLyAqaWYzM19jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo2MzYKCS8vIHRoaXMuZ2FtZVN0YXRlLnZhbHVlID0gc3RhdGVEYXduU3RhZ2VNYWZpYVJldmVhbAoJYnl0ZWMgMCAvLyAgImdhbWVTdGF0ZSIKCWludGMgMTAgLy8gOAoJYXBwX2dsb2JhbF9wdXQKCWIgKmlmMzNfZW5kCgoqaWYzM19lbHNlOgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NjM4CgkvLyB0aGlzLmdhbWVTdGF0ZS52YWx1ZSA9IHN0YXRlTmlnaHRTdGFnZURvY3RvckNvbW1pdAoJYnl0ZWMgMCAvLyAgImdhbWVTdGF0ZSIKCWludGMgOSAvLyA3CglhcHBfZ2xvYmFsX3B1dAoKKmlmMzNfZW5kOgoJcmV0c3ViCgovLyBuaWdodFN0YWdlRG9jdG9yQ29tbWl0KGJ5dGVbXSl2b2lkCiphYmlfcm91dGVfbmlnaHRTdGFnZURvY3RvckNvbW1pdDoKCS8vIGNvbW1pdG1lbnQ6IGJ5dGVbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZXh0cmFjdCAyIDAKCgkvLyBleGVjdXRlIG5pZ2h0U3RhZ2VEb2N0b3JDb21taXQoYnl0ZVtdKXZvaWQKCWNhbGxzdWIgbmlnaHRTdGFnZURvY3RvckNvbW1pdAoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gbmlnaHRTdGFnZURvY3RvckNvbW1pdChjb21taXRtZW50OiBieXRlcyk6IHZvaWQKbmlnaHRTdGFnZURvY3RvckNvbW1pdDoKCXByb3RvIDEgMAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjY0MwoJLy8gYXNzZXJ0KAoJLy8gICAgICAgdGhpcy5nYW1lU3RhdGUudmFsdWUgPT09IHN0YXRlTmlnaHRTdGFnZURvY3RvckNvbW1pdCwKCS8vICAgICAgICdJbnZhbGlkIG1ldGhvZCBjYWxsOiBHYW1lIGlzIG5vdCBpbiBOaWdodCBTdGFnZSBEb2N0b3IgQ29tbWl0IHN0YXRlLicKCS8vICAgICApCglieXRlYyAwIC8vICAiZ2FtZVN0YXRlIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgOSAvLyA3Cgk9PQoKCS8vIEludmFsaWQgbWV0aG9kIGNhbGw6IEdhbWUgaXMgbm90IGluIE5pZ2h0IFN0YWdlIERvY3RvciBDb21taXQgc3RhdGUuCglhc3NlcnQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo2NDgKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMuZG9jdG9yLnZhbHVlLCAnRXJyb3Igc3RhdGU6IE5vbi1kb2N0b3IgcGxheWVyIGNhbGxlZCBtZXRob2QuJykKCXR4biBTZW5kZXIKCWJ5dGVjIDEzIC8vICAiZG9jdG9yIgoJYXBwX2dsb2JhbF9nZXQKCT09CgoJLy8gRXJyb3Igc3RhdGU6IE5vbi1kb2N0b3IgcGxheWVyIGNhbGxlZCBtZXRob2QuCglhc3NlcnQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo2NDkKCS8vIGFzc2VydCgKCS8vICAgICAgIHRoaXMuZG9jdG9yLnZhbHVlICE9PSBnbG9iYWxzLnplcm9BZGRyZXNzLAoJLy8gICAgICAgJ0Vycm9yIHN0YXRlOiBEb2N0b3IgaXMgZGVhZCwgc2hvdWxkIG5vdCBoYXZlIGVudGVyZWQgdGhpcyBzdGF0ZS4nCgkvLyAgICAgKQoJYnl0ZWMgMTMgLy8gICJkb2N0b3IiCglhcHBfZ2xvYmFsX2dldAoJZ2xvYmFsIFplcm9BZGRyZXNzCgkhPQoKCS8vIEVycm9yIHN0YXRlOiBEb2N0b3IgaXMgZGVhZCwgc2hvdWxkIG5vdCBoYXZlIGVudGVyZWQgdGhpcyBzdGF0ZS4KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjY1NAoJLy8gdGhpcy5kb2N0b3JDb21taXRtZW50LnZhbHVlID0gY29tbWl0bWVudAoJYnl0ZWMgNDAgLy8gICJkb2N0b3JDb21taXRtZW50IgoJZnJhbWVfZGlnIC0xIC8vIGNvbW1pdG1lbnQ6IGJ5dGVzCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjY1NgoJLy8gdGhpcy5nYW1lU3RhdGUudmFsdWUgPSBzdGF0ZURhd25TdGFnZU1hZmlhUmV2ZWFsCglieXRlYyAwIC8vICAiZ2FtZVN0YXRlIgoJaW50YyAxMCAvLyA4CglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBkYXduU3RhZ2VNYWZpYVJldmVhbChhZGRyZXNzLGJ5dGVbMzJdKXZvaWQKKmFiaV9yb3V0ZV9kYXduU3RhZ2VNYWZpYVJldmVhbDoKCS8vIGJsaW5kZXI6IGJ5dGVbMzJdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50YyA2IC8vIDMyCgk9PQoKCS8vIGFyZ3VtZW50IDAgKGJsaW5kZXIpIGZvciBkYXduU3RhZ2VNYWZpYVJldmVhbCBtdXN0IGJlIGEgYnl0ZVszMl0KCWFzc2VydAoKCS8vIHZpY3RpbUFpbTogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludGMgNiAvLyAzMgoJPT0KCgkvLyBhcmd1bWVudCAxICh2aWN0aW1BaW0pIGZvciBkYXduU3RhZ2VNYWZpYVJldmVhbCBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBkYXduU3RhZ2VNYWZpYVJldmVhbChhZGRyZXNzLGJ5dGVbMzJdKXZvaWQKCWNhbGxzdWIgZGF3blN0YWdlTWFmaWFSZXZlYWwKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGRhd25TdGFnZU1hZmlhUmV2ZWFsKHZpY3RpbUFpbTogQWRkcmVzcywgYmxpbmRlcjogYnl0ZXMzMik6IHZvaWQKZGF3blN0YWdlTWFmaWFSZXZlYWw6Cglwcm90byAyIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgOCAvLyAweAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjY2MAoJLy8gYXNzZXJ0KAoJLy8gICAgICAgdGhpcy5nYW1lU3RhdGUudmFsdWUgPT09IHN0YXRlRGF3blN0YWdlTWFmaWFSZXZlYWwsCgkvLyAgICAgICAnSW52YWxpZCBtZXRob2QgY2FsbDogR2FtZSBpcyBub3QgaW4gRGF3biBTdGFnZSBNYWZmaWEgUmV2ZWFsIHN0YXRlLicKCS8vICAgICApCglieXRlYyAwIC8vICAiZ2FtZVN0YXRlIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMTAgLy8gOAoJPT0KCgkvLyBJbnZhbGlkIG1ldGhvZCBjYWxsOiBHYW1lIGlzIG5vdCBpbiBEYXduIFN0YWdlIE1hZmZpYSBSZXZlYWwgc3RhdGUuCglhc3NlcnQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo2NjUKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMubWFmaWEudmFsdWUsICdFcnJvciBzdGF0ZTogTm9uLW1hZmlhIHBsYXllciBjYWxsZWQgbWV0aG9kLicpCgl0eG4gU2VuZGVyCglieXRlYyAyMSAvLyAgIm1hZmlhIgoJYXBwX2dsb2JhbF9nZXQKCT09CgoJLy8gRXJyb3Igc3RhdGU6IE5vbi1tYWZpYSBwbGF5ZXIgY2FsbGVkIG1ldGhvZC4KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjY2NwoJLy8gYXNzZXJ0KHZpY3RpbUFpbSAhPT0gZ2xvYmFscy56ZXJvQWRkcmVzcywgJ0Vycm9yIHN0YXRlOiBWaWN0aW0gbXVzdCBiZSBhIHZhbGlkIGFkZHJlc3MuJykKCWZyYW1lX2RpZyAtMSAvLyB2aWN0aW1BaW06IEFkZHJlc3MKCWdsb2JhbCBaZXJvQWRkcmVzcwoJIT0KCgkvLyBFcnJvciBzdGF0ZTogVmljdGltIG11c3QgYmUgYSB2YWxpZCBhZGRyZXNzLgoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NjcxCgkvLyByZXZlYWwgPSBzaGEyNTYoY29uY2F0KHZpY3RpbUFpbSwgYmxpbmRlcikpCglmcmFtZV9kaWcgLTEgLy8gdmljdGltQWltOiBBZGRyZXNzCglmcmFtZV9kaWcgLTIgLy8gYmxpbmRlcjogYnl0ZXMzMgoJY29uY2F0CglzaGEyNTYKCWZyYW1lX2J1cnkgMCAvLyByZXZlYWw6IGJ5dGVbMzJdCgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NjczCgkvLyBhc3NlcnQoCgkvLyAgICAgICByYXdCeXRlcyhyZXZlYWwpID09PSB0aGlzLm1hZmlhQ29tbWl0bWVudC52YWx1ZSwKCS8vICAgICAgICdFcnJvciBzdGF0ZTogUHJvdmlkZWQgYWRkcmVzcyArIGJsaW5kZXIgZG9lcyBOT1QgbWF0Y2ggY29tbWl0bWVudC4nCgkvLyAgICAgKQoJZnJhbWVfZGlnIDAgLy8gcmV2ZWFsOiBieXRlWzMyXQoJYnl0ZWMgNDMgLy8gICJtYWZpYUNvbW1pdG1lbnQiCglhcHBfZ2xvYmFsX2dldAoJPT0KCgkvLyBFcnJvciBzdGF0ZTogUHJvdmlkZWQgYWRkcmVzcyArIGJsaW5kZXIgZG9lcyBOT1QgbWF0Y2ggY29tbWl0bWVudC4KCWFzc2VydAoKCS8vICppZjM0X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6Njc4CgkvLyB2aWN0aW1BaW0gPT09IHRoaXMucGxheWVyMUFsZ29BZGRyLnZhbHVlLmFkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyB2aWN0aW1BaW06IEFkZHJlc3MKCWJ5dGVjIDIgLy8gICJwbGF5ZXIxQWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAwIDMyCgk9PQoJYnogKmlmMzRfZWxzZWlmMV9jb25kaXRpb24KCgkvLyAqaWYzNF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo2NzkKCS8vIHRoaXMubWFmaWFWaWN0aW0udmFsdWUgPSB0aGlzLnBsYXllcjFBbGdvQWRkci52YWx1ZS5hZGRyZXNzCglieXRlYyA5IC8vICAibWFmaWFWaWN0aW0iCglieXRlYyAyIC8vICAicGxheWVyMUFsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMCAzMgoJYXBwX2dsb2JhbF9wdXQKCWIgKmlmMzRfZW5kCgoqaWYzNF9lbHNlaWYxX2NvbmRpdGlvbjoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjY4MAoJLy8gdmljdGltQWltID09PSB0aGlzLnBsYXllcjJBbGdvQWRkci52YWx1ZS5hZGRyZXNzCglmcmFtZV9kaWcgLTEgLy8gdmljdGltQWltOiBBZGRyZXNzCglieXRlYyAzIC8vICAicGxheWVyMkFsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMCAzMgoJPT0KCWJ6ICppZjM0X2Vsc2VpZjJfY29uZGl0aW9uCgoJLy8gKmlmMzRfZWxzZWlmMV9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo2ODEKCS8vIHRoaXMubWFmaWFWaWN0aW0udmFsdWUgPSB0aGlzLnBsYXllcjJBbGdvQWRkci52YWx1ZS5hZGRyZXNzCglieXRlYyA5IC8vICAibWFmaWFWaWN0aW0iCglieXRlYyAzIC8vICAicGxheWVyMkFsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMCAzMgoJYXBwX2dsb2JhbF9wdXQKCWIgKmlmMzRfZW5kCgoqaWYzNF9lbHNlaWYyX2NvbmRpdGlvbjoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjY4MgoJLy8gdmljdGltQWltID09PSB0aGlzLnBsYXllcjNBbGdvQWRkci52YWx1ZS5hZGRyZXNzCglmcmFtZV9kaWcgLTEgLy8gdmljdGltQWltOiBBZGRyZXNzCglieXRlYyA0IC8vICAicGxheWVyM0FsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMCAzMgoJPT0KCWJ6ICppZjM0X2Vsc2VpZjNfY29uZGl0aW9uCgoJLy8gKmlmMzRfZWxzZWlmMl9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo2ODMKCS8vIHRoaXMubWFmaWFWaWN0aW0udmFsdWUgPSB0aGlzLnBsYXllcjNBbGdvQWRkci52YWx1ZS5hZGRyZXNzCglieXRlYyA5IC8vICAibWFmaWFWaWN0aW0iCglieXRlYyA0IC8vICAicGxheWVyM0FsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMCAzMgoJYXBwX2dsb2JhbF9wdXQKCWIgKmlmMzRfZW5kCgoqaWYzNF9lbHNlaWYzX2NvbmRpdGlvbjoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjY4NAoJLy8gdmljdGltQWltID09PSB0aGlzLnBsYXllcjRBbGdvQWRkci52YWx1ZS5hZGRyZXNzCglmcmFtZV9kaWcgLTEgLy8gdmljdGltQWltOiBBZGRyZXNzCglieXRlYyA1IC8vICAicGxheWVyNEFsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMCAzMgoJPT0KCWJ6ICppZjM0X2Vsc2VpZjRfY29uZGl0aW9uCgoJLy8gKmlmMzRfZWxzZWlmM19jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo2ODUKCS8vIHRoaXMubWFmaWFWaWN0aW0udmFsdWUgPSB0aGlzLnBsYXllcjRBbGdvQWRkci52YWx1ZS5hZGRyZXNzCglieXRlYyA5IC8vICAibWFmaWFWaWN0aW0iCglieXRlYyA1IC8vICAicGxheWVyNEFsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMCAzMgoJYXBwX2dsb2JhbF9wdXQKCWIgKmlmMzRfZW5kCgoqaWYzNF9lbHNlaWY0X2NvbmRpdGlvbjoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjY4NgoJLy8gdmljdGltQWltID09PSB0aGlzLnBsYXllcjVBbGdvQWRkci52YWx1ZS5hZGRyZXNzCglmcmFtZV9kaWcgLTEgLy8gdmljdGltQWltOiBBZGRyZXNzCglieXRlYyA2IC8vICAicGxheWVyNUFsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMCAzMgoJPT0KCWJ6ICppZjM0X2Vsc2VpZjVfY29uZGl0aW9uCgoJLy8gKmlmMzRfZWxzZWlmNF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo2ODcKCS8vIHRoaXMubWFmaWFWaWN0aW0udmFsdWUgPSB0aGlzLnBsYXllcjVBbGdvQWRkci52YWx1ZS5hZGRyZXNzCglieXRlYyA5IC8vICAibWFmaWFWaWN0aW0iCglieXRlYyA2IC8vICAicGxheWVyNUFsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMCAzMgoJYXBwX2dsb2JhbF9wdXQKCWIgKmlmMzRfZW5kCgoqaWYzNF9lbHNlaWY1X2NvbmRpdGlvbjoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjY4OAoJLy8gdmljdGltQWltID09PSB0aGlzLnBsYXllcjZBbGdvQWRkci52YWx1ZS5hZGRyZXNzCglmcmFtZV9kaWcgLTEgLy8gdmljdGltQWltOiBBZGRyZXNzCglieXRlYyA3IC8vICAicGxheWVyNkFsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMCAzMgoJPT0KCWJ6ICppZjM0X2Vsc2UKCgkvLyAqaWYzNF9lbHNlaWY1X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjY4OQoJLy8gdGhpcy5tYWZpYVZpY3RpbS52YWx1ZSA9IHRoaXMucGxheWVyNkFsZ29BZGRyLnZhbHVlLmFkZHJlc3MKCWJ5dGVjIDkgLy8gICJtYWZpYVZpY3RpbSIKCWJ5dGVjIDcgLy8gICJwbGF5ZXI2QWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAwIDMyCglhcHBfZ2xvYmFsX3B1dAoJYiAqaWYzNF9lbmQKCippZjM0X2Vsc2U6CgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo2OTEKCS8vIHRoaXMubWFmaWFWaWN0aW0udmFsdWUgPSBnbG9iYWxzLnplcm9BZGRyZXNzCglieXRlYyA5IC8vICAibWFmaWFWaWN0aW0iCglnbG9iYWwgWmVyb0FkZHJlc3MKCWFwcF9nbG9iYWxfcHV0CgoqaWYzNF9lbmQ6CgkvLyAqaWYzNV9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjY5NwoJLy8gdGhpcy5kb2N0b3IudmFsdWUgPT09IGdsb2JhbHMuemVyb0FkZHJlc3MKCWJ5dGVjIDEzIC8vICAiZG9jdG9yIgoJYXBwX2dsb2JhbF9nZXQKCWdsb2JhbCBaZXJvQWRkcmVzcwoJPT0KCWJ6ICppZjM1X2Vsc2UKCgkvLyAqaWYzNV9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo2OTkKCS8vIHRoaXMuZ2FtZVN0YXRlLnZhbHVlID0gc3RhdGVEYXduU3RhZ2VEZWFkT3JTYXZlZAoJYnl0ZWMgMCAvLyAgImdhbWVTdGF0ZSIKCWludGMgMTEgLy8gMTAKCWFwcF9nbG9iYWxfcHV0CgliICppZjM1X2VuZAoKKmlmMzVfZWxzZToKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjcwMgoJLy8gdGhpcy5nYW1lU3RhdGUudmFsdWUgPSBzdGF0ZURhd25TdGFnZURvY3RvclJldmVhbAoJYnl0ZWMgMCAvLyAgImdhbWVTdGF0ZSIKCWludGMgMTQgLy8gOQoJYXBwX2dsb2JhbF9wdXQKCippZjM1X2VuZDoKCXJldHN1YgoKLy8gZGF3blN0YWdlRG9jdG9yUmV2ZWFsKGFkZHJlc3MsYnl0ZVszMl0pdm9pZAoqYWJpX3JvdXRlX2Rhd25TdGFnZURvY3RvclJldmVhbDoKCS8vIGJsaW5kZXI6IGJ5dGVbMzJdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50YyA2IC8vIDMyCgk9PQoKCS8vIGFyZ3VtZW50IDAgKGJsaW5kZXIpIGZvciBkYXduU3RhZ2VEb2N0b3JSZXZlYWwgbXVzdCBiZSBhIGJ5dGVbMzJdCglhc3NlcnQKCgkvLyBwYXRpZW50QWltOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50YyA2IC8vIDMyCgk9PQoKCS8vIGFyZ3VtZW50IDEgKHBhdGllbnRBaW0pIGZvciBkYXduU3RhZ2VEb2N0b3JSZXZlYWwgbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIGV4ZWN1dGUgZGF3blN0YWdlRG9jdG9yUmV2ZWFsKGFkZHJlc3MsYnl0ZVszMl0pdm9pZAoJY2FsbHN1YiBkYXduU3RhZ2VEb2N0b3JSZXZlYWwKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGRhd25TdGFnZURvY3RvclJldmVhbChwYXRpZW50QWltOiBBZGRyZXNzLCBibGluZGVyOiBieXRlczMyKTogdm9pZApkYXduU3RhZ2VEb2N0b3JSZXZlYWw6Cglwcm90byAyIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgOCAvLyAweAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjcwNwoJLy8gYXNzZXJ0KAoJLy8gICAgICAgdGhpcy5nYW1lU3RhdGUudmFsdWUgPT09IHN0YXRlRGF3blN0YWdlRG9jdG9yUmV2ZWFsLAoJLy8gICAgICAgJ0ludmFsaWQgbWV0aG9kIGNhbGw6IEdhbWUgaXMgbm90IGluIERhd24gU3RhZ2UgRG9jdG9yIFJldmVhbCBzdGF0ZS4nCgkvLyAgICAgKQoJYnl0ZWMgMCAvLyAgImdhbWVTdGF0ZSIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDE0IC8vIDkKCT09CgoJLy8gSW52YWxpZCBtZXRob2QgY2FsbDogR2FtZSBpcyBub3QgaW4gRGF3biBTdGFnZSBEb2N0b3IgUmV2ZWFsIHN0YXRlLgoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NzEyCgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLmRvY3Rvci52YWx1ZSwgJ0Vycm9yIHN0YXRlOiBOb24tZG9jdG9yIHBsYXllciBjYWxsZWQgbWV0aG9kLicpCgl0eG4gU2VuZGVyCglieXRlYyAxMyAvLyAgImRvY3RvciIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoKCS8vIEVycm9yIHN0YXRlOiBOb24tZG9jdG9yIHBsYXllciBjYWxsZWQgbWV0aG9kLgoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NzE0CgkvLyBhc3NlcnQodGhpcy5kb2N0b3JQYXRpZW50LnZhbHVlID09PSBnbG9iYWxzLnplcm9BZGRyZXNzLCAnRXJyb3Igc3RhdGU6IERvY3RvciBoYXMgYWxyZWFkeSBjb21taXR0ZWQgdG8gYSBwYXRpZW50LicpCglieXRlYyAxMSAvLyAgImRvY3RvclBhdGllbnQiCglhcHBfZ2xvYmFsX2dldAoJZ2xvYmFsIFplcm9BZGRyZXNzCgk9PQoKCS8vIEVycm9yIHN0YXRlOiBEb2N0b3IgaGFzIGFscmVhZHkgY29tbWl0dGVkIHRvIGEgcGF0aWVudC4KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjcxNgoJLy8gYXNzZXJ0KHBhdGllbnRBaW0gIT09IGdsb2JhbHMuemVyb0FkZHJlc3MsICdFcnJvciBzdGF0ZTogUGF0aWVudCBtdXN0IGJlIGEgdmFsaWQgYWRkcmVzcy4nKQoJZnJhbWVfZGlnIC0xIC8vIHBhdGllbnRBaW06IEFkZHJlc3MKCWdsb2JhbCBaZXJvQWRkcmVzcwoJIT0KCgkvLyBFcnJvciBzdGF0ZTogUGF0aWVudCBtdXN0IGJlIGEgdmFsaWQgYWRkcmVzcy4KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjcyMAoJLy8gcmV2ZWFsID0gc2hhMjU2KGNvbmNhdChwYXRpZW50QWltLCBibGluZGVyKSkKCWZyYW1lX2RpZyAtMSAvLyBwYXRpZW50QWltOiBBZGRyZXNzCglmcmFtZV9kaWcgLTIgLy8gYmxpbmRlcjogYnl0ZXMzMgoJY29uY2F0CglzaGEyNTYKCWZyYW1lX2J1cnkgMCAvLyByZXZlYWw6IGJ5dGVbMzJdCgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NzIyCgkvLyBhc3NlcnQoCgkvLyAgICAgICByYXdCeXRlcyhyZXZlYWwpID09PSB0aGlzLmRvY3RvckNvbW1pdG1lbnQudmFsdWUsCgkvLyAgICAgICAnRXJyb3Igc3RhdGU6IFByb3ZpZGVkIGFkZHJlc3MgKyBibGluZGVyIGRvZXMgTk9UIG1hdGNoIGNvbW1pdG1lbnQuJwoJLy8gICAgICkKCWZyYW1lX2RpZyAwIC8vIHJldmVhbDogYnl0ZVszMl0KCWJ5dGVjIDQwIC8vICAiZG9jdG9yQ29tbWl0bWVudCIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoKCS8vIEVycm9yIHN0YXRlOiBQcm92aWRlZCBhZGRyZXNzICsgYmxpbmRlciBkb2VzIE5PVCBtYXRjaCBjb21taXRtZW50LgoJYXNzZXJ0CgoJLy8gKmlmMzZfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo3MjcKCS8vIHBhdGllbnRBaW0gPT09IHRoaXMucGxheWVyMUFsZ29BZGRyLnZhbHVlLmFkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyBwYXRpZW50QWltOiBBZGRyZXNzCglieXRlYyAyIC8vICAicGxheWVyMUFsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMCAzMgoJPT0KCWJ6ICppZjM2X2Vsc2VpZjFfY29uZGl0aW9uCgoJLy8gKmlmMzZfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NzI4CgkvLyB0aGlzLmRvY3RvclBhdGllbnQudmFsdWUgPSB0aGlzLnBsYXllcjFBbGdvQWRkci52YWx1ZS5hZGRyZXNzCglieXRlYyAxMSAvLyAgImRvY3RvclBhdGllbnQiCglieXRlYyAyIC8vICAicGxheWVyMUFsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMCAzMgoJYXBwX2dsb2JhbF9wdXQKCWIgKmlmMzZfZW5kCgoqaWYzNl9lbHNlaWYxX2NvbmRpdGlvbjoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjcyOQoJLy8gcGF0aWVudEFpbSA9PT0gdGhpcy5wbGF5ZXIyQWxnb0FkZHIudmFsdWUuYWRkcmVzcwoJZnJhbWVfZGlnIC0xIC8vIHBhdGllbnRBaW06IEFkZHJlc3MKCWJ5dGVjIDMgLy8gICJwbGF5ZXIyQWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAwIDMyCgk9PQoJYnogKmlmMzZfZWxzZWlmMl9jb25kaXRpb24KCgkvLyAqaWYzNl9lbHNlaWYxX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjczMAoJLy8gdGhpcy5kb2N0b3JQYXRpZW50LnZhbHVlID0gdGhpcy5wbGF5ZXIyQWxnb0FkZHIudmFsdWUuYWRkcmVzcwoJYnl0ZWMgMTEgLy8gICJkb2N0b3JQYXRpZW50IgoJYnl0ZWMgMyAvLyAgInBsYXllcjJBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCWFwcF9nbG9iYWxfcHV0CgliICppZjM2X2VuZAoKKmlmMzZfZWxzZWlmMl9jb25kaXRpb246CgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo3MzEKCS8vIHBhdGllbnRBaW0gPT09IHRoaXMucGxheWVyM0FsZ29BZGRyLnZhbHVlLmFkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyBwYXRpZW50QWltOiBBZGRyZXNzCglieXRlYyA0IC8vICAicGxheWVyM0FsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMCAzMgoJPT0KCWJ6ICppZjM2X2Vsc2VpZjNfY29uZGl0aW9uCgoJLy8gKmlmMzZfZWxzZWlmMl9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo3MzIKCS8vIHRoaXMuZG9jdG9yUGF0aWVudC52YWx1ZSA9IHRoaXMucGxheWVyM0FsZ29BZGRyLnZhbHVlLmFkZHJlc3MKCWJ5dGVjIDExIC8vICAiZG9jdG9yUGF0aWVudCIKCWJ5dGVjIDQgLy8gICJwbGF5ZXIzQWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAwIDMyCglhcHBfZ2xvYmFsX3B1dAoJYiAqaWYzNl9lbmQKCippZjM2X2Vsc2VpZjNfY29uZGl0aW9uOgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NzMzCgkvLyBwYXRpZW50QWltID09PSB0aGlzLnBsYXllcjRBbGdvQWRkci52YWx1ZS5hZGRyZXNzCglmcmFtZV9kaWcgLTEgLy8gcGF0aWVudEFpbTogQWRkcmVzcwoJYnl0ZWMgNSAvLyAgInBsYXllcjRBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCT09CglieiAqaWYzNl9lbHNlaWY0X2NvbmRpdGlvbgoKCS8vICppZjM2X2Vsc2VpZjNfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NzM0CgkvLyB0aGlzLmRvY3RvclBhdGllbnQudmFsdWUgPSB0aGlzLnBsYXllcjRBbGdvQWRkci52YWx1ZS5hZGRyZXNzCglieXRlYyAxMSAvLyAgImRvY3RvclBhdGllbnQiCglieXRlYyA1IC8vICAicGxheWVyNEFsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMCAzMgoJYXBwX2dsb2JhbF9wdXQKCWIgKmlmMzZfZW5kCgoqaWYzNl9lbHNlaWY0X2NvbmRpdGlvbjoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjczNQoJLy8gcGF0aWVudEFpbSA9PT0gdGhpcy5wbGF5ZXI1QWxnb0FkZHIudmFsdWUuYWRkcmVzcwoJZnJhbWVfZGlnIC0xIC8vIHBhdGllbnRBaW06IEFkZHJlc3MKCWJ5dGVjIDYgLy8gICJwbGF5ZXI1QWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAwIDMyCgk9PQoJYnogKmlmMzZfZWxzZWlmNV9jb25kaXRpb24KCgkvLyAqaWYzNl9lbHNlaWY0X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjczNgoJLy8gdGhpcy5kb2N0b3JQYXRpZW50LnZhbHVlID0gdGhpcy5wbGF5ZXI1QWxnb0FkZHIudmFsdWUuYWRkcmVzcwoJYnl0ZWMgMTEgLy8gICJkb2N0b3JQYXRpZW50IgoJYnl0ZWMgNiAvLyAgInBsYXllcjVBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCWFwcF9nbG9iYWxfcHV0CgliICppZjM2X2VuZAoKKmlmMzZfZWxzZWlmNV9jb25kaXRpb246CgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo3MzcKCS8vIHBhdGllbnRBaW0gPT09IHRoaXMucGxheWVyNkFsZ29BZGRyLnZhbHVlLmFkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyBwYXRpZW50QWltOiBBZGRyZXNzCglieXRlYyA3IC8vICAicGxheWVyNkFsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMCAzMgoJPT0KCWJ6ICppZjM2X2Vsc2UKCgkvLyAqaWYzNl9lbHNlaWY1X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjczOAoJLy8gdGhpcy5kb2N0b3JQYXRpZW50LnZhbHVlID0gdGhpcy5wbGF5ZXI2QWxnb0FkZHIudmFsdWUuYWRkcmVzcwoJYnl0ZWMgMTEgLy8gICJkb2N0b3JQYXRpZW50IgoJYnl0ZWMgNyAvLyAgInBsYXllcjZBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCWFwcF9nbG9iYWxfcHV0CgliICppZjM2X2VuZAoKKmlmMzZfZWxzZToKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjc0MAoJLy8gdGhpcy5kb2N0b3JQYXRpZW50LnZhbHVlID0gZ2xvYmFscy56ZXJvQWRkcmVzcwoJYnl0ZWMgMTEgLy8gICJkb2N0b3JQYXRpZW50IgoJZ2xvYmFsIFplcm9BZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoKKmlmMzZfZW5kOgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NzQ2CgkvLyB0aGlzLmdhbWVTdGF0ZS52YWx1ZSA9IHN0YXRlRGF3blN0YWdlRGVhZE9yU2F2ZWQKCWJ5dGVjIDAgLy8gICJnYW1lU3RhdGUiCglpbnRjIDExIC8vIDEwCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBkYXduU3RhZ2VEZWFkT3JTYXZlZCgpdm9pZAoqYWJpX3JvdXRlX2Rhd25TdGFnZURlYWRPclNhdmVkOgoJLy8gZXhlY3V0ZSBkYXduU3RhZ2VEZWFkT3JTYXZlZCgpdm9pZAoJY2FsbHN1YiBkYXduU3RhZ2VEZWFkT3JTYXZlZAoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gZGF3blN0YWdlRGVhZE9yU2F2ZWQoKTogdm9pZApkYXduU3RhZ2VEZWFkT3JTYXZlZDoKCXByb3RvIDAgMAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjc1MAoJLy8gYXNzZXJ0KAoJLy8gICAgICAgdGhpcy5nYW1lU3RhdGUudmFsdWUgPT09IHN0YXRlRGF3blN0YWdlRGVhZE9yU2F2ZWQsCgkvLyAgICAgICAnSW52YWxpZCBtZXRob2QgY2FsbDogR2FtZSBpcyBub3QgaW4gRGF3biBTdGFnZSBEZWFkT3JTYXZlZD8gc3RhdGUuJwoJLy8gICAgICkKCWJ5dGVjIDAgLy8gICJnYW1lU3RhdGUiCglhcHBfZ2xvYmFsX2dldAoJaW50YyAxMSAvLyAxMAoJPT0KCgkvLyBJbnZhbGlkIG1ldGhvZCBjYWxsOiBHYW1lIGlzIG5vdCBpbiBEYXduIFN0YWdlIERlYWRPclNhdmVkPyBzdGF0ZS4KCWFzc2VydAoKCS8vICppZjM3X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NzU1CgkvLyB0aGlzLm1hZmlhVmljdGltLnZhbHVlID09PSBnbG9iYWxzLnplcm9BZGRyZXNzIHx8IHRoaXMubWFmaWFWaWN0aW0udmFsdWUgPT09IHRoaXMuZG9jdG9yUGF0aWVudC52YWx1ZQoJYnl0ZWMgOSAvLyAgIm1hZmlhVmljdGltIgoJYXBwX2dsb2JhbF9nZXQKCWdsb2JhbCBaZXJvQWRkcmVzcwoJPT0KCWR1cAoJYm56ICpza2lwX29yMTYKCWJ5dGVjIDkgLy8gICJtYWZpYVZpY3RpbSIKCWFwcF9nbG9iYWxfZ2V0CglieXRlYyAxMSAvLyAgImRvY3RvclBhdGllbnQiCglhcHBfZ2xvYmFsX2dldAoJPT0KCXx8Cgoqc2tpcF9vcjE2OgoJYnogKmlmMzdfZW5kCgoJLy8gKmlmMzdfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NzYwCgkvLyB0aGlzLm1hZmlhVmljdGltLnZhbHVlID0gZ2xvYmFscy56ZXJvQWRkcmVzcwoJYnl0ZWMgOSAvLyAgIm1hZmlhVmljdGltIgoJZ2xvYmFsIFplcm9BZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjc2MQoJLy8gdGhpcy5kb2N0b3JQYXRpZW50LnZhbHVlID0gZ2xvYmFscy56ZXJvQWRkcmVzcwoJYnl0ZWMgMTEgLy8gICJkb2N0b3JQYXRpZW50IgoJZ2xvYmFsIFplcm9BZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjc2MgoJLy8gdGhpcy5nYW1lU3RhdGUudmFsdWUgPSBzdGF0ZURheVN0YWdlVm90ZQoJYnl0ZWMgMCAvLyAgImdhbWVTdGF0ZSIKCWludGMgNCAvLyAzCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjc2MwoJLy8gcmV0dXJuOwoJcmV0c3ViCgoqaWYzN19lbmQ6CgkvLyAqaWYzOF9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjc2OAoJLy8gdGhpcy5tYWZpYVZpY3RpbS52YWx1ZSA9PT0gdGhpcy5wbGF5ZXIxQWxnb0FkZHIudmFsdWUuYWRkcmVzcwoJYnl0ZWMgOSAvLyAgIm1hZmlhVmljdGltIgoJYXBwX2dsb2JhbF9nZXQKCWJ5dGVjIDIgLy8gICJwbGF5ZXIxQWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAwIDMyCgk9PQoJYnogKmlmMzhfZWxzZWlmMV9jb25kaXRpb24KCgkvLyAqaWYzOF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo3NjkKCS8vIHRoaXMuanVzdEVsaW1pbmF0ZWRQbGF5ZXIudmFsdWUgPSB0aGlzLnBsYXllcjFBbGdvQWRkci52YWx1ZS5hZGRyZXNzCglieXRlYyAxIC8vICAianVzdEVsaW1pbmF0ZWRQbGF5ZXIiCglieXRlYyAyIC8vICAicGxheWVyMUFsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMCAzMgoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo3NzAKCS8vIHRoaXMucGxheWVyMUFsZ29BZGRyLnZhbHVlLmVsaW1pbmF0ZWQgPSAxCglieXRlYyAyIC8vICAicGxheWVyMUFsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWJ5dGVjIDEyIC8vIDB4MDAwMDAwMDAwMDAwMDAwMQoJcmVwbGFjZTIgMzIKCWJ5dGVjIDIgLy8gICJwbGF5ZXIxQWxnb0FkZHIiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoJYiAqaWYzOF9lbmQKCippZjM4X2Vsc2VpZjFfY29uZGl0aW9uOgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NzcxCgkvLyB0aGlzLm1hZmlhVmljdGltLnZhbHVlID09PSB0aGlzLnBsYXllcjJBbGdvQWRkci52YWx1ZS5hZGRyZXNzCglieXRlYyA5IC8vICAibWFmaWFWaWN0aW0iCglhcHBfZ2xvYmFsX2dldAoJYnl0ZWMgMyAvLyAgInBsYXllcjJBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCT09CglieiAqaWYzOF9lbHNlaWYyX2NvbmRpdGlvbgoKCS8vICppZjM4X2Vsc2VpZjFfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NzcyCgkvLyB0aGlzLmp1c3RFbGltaW5hdGVkUGxheWVyLnZhbHVlID0gdGhpcy5wbGF5ZXIyQWxnb0FkZHIudmFsdWUuYWRkcmVzcwoJYnl0ZWMgMSAvLyAgImp1c3RFbGltaW5hdGVkUGxheWVyIgoJYnl0ZWMgMyAvLyAgInBsYXllcjJBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NzczCgkvLyB0aGlzLnBsYXllcjJBbGdvQWRkci52YWx1ZS5lbGltaW5hdGVkID0gMQoJYnl0ZWMgMyAvLyAgInBsYXllcjJBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglieXRlYyAxMiAvLyAweDAwMDAwMDAwMDAwMDAwMDEKCXJlcGxhY2UyIDMyCglieXRlYyAzIC8vICAicGxheWVyMkFsZ29BZGRyIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCWIgKmlmMzhfZW5kCgoqaWYzOF9lbHNlaWYyX2NvbmRpdGlvbjoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjc3NAoJLy8gdGhpcy5tYWZpYVZpY3RpbS52YWx1ZSA9PT0gdGhpcy5wbGF5ZXIzQWxnb0FkZHIudmFsdWUuYWRkcmVzcwoJYnl0ZWMgOSAvLyAgIm1hZmlhVmljdGltIgoJYXBwX2dsb2JhbF9nZXQKCWJ5dGVjIDQgLy8gICJwbGF5ZXIzQWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAwIDMyCgk9PQoJYnogKmlmMzhfZWxzZWlmM19jb25kaXRpb24KCgkvLyAqaWYzOF9lbHNlaWYyX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjc3NQoJLy8gdGhpcy5qdXN0RWxpbWluYXRlZFBsYXllci52YWx1ZSA9IHRoaXMucGxheWVyM0FsZ29BZGRyLnZhbHVlLmFkZHJlc3MKCWJ5dGVjIDEgLy8gICJqdXN0RWxpbWluYXRlZFBsYXllciIKCWJ5dGVjIDQgLy8gICJwbGF5ZXIzQWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAwIDMyCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjc3NgoJLy8gdGhpcy5wbGF5ZXIzQWxnb0FkZHIudmFsdWUuZWxpbWluYXRlZCA9IDEKCWJ5dGVjIDQgLy8gICJwbGF5ZXIzQWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJYnl0ZWMgMTIgLy8gMHgwMDAwMDAwMDAwMDAwMDAxCglyZXBsYWNlMiAzMgoJYnl0ZWMgNCAvLyAgInBsYXllcjNBbGdvQWRkciIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgliICppZjM4X2VuZAoKKmlmMzhfZWxzZWlmM19jb25kaXRpb246CgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo3NzcKCS8vIHRoaXMubWFmaWFWaWN0aW0udmFsdWUgPT09IHRoaXMucGxheWVyNEFsZ29BZGRyLnZhbHVlLmFkZHJlc3MKCWJ5dGVjIDkgLy8gICJtYWZpYVZpY3RpbSIKCWFwcF9nbG9iYWxfZ2V0CglieXRlYyA1IC8vICAicGxheWVyNEFsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMCAzMgoJPT0KCWJ6ICppZjM4X2Vsc2VpZjRfY29uZGl0aW9uCgoJLy8gKmlmMzhfZWxzZWlmM19jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo3NzgKCS8vIHRoaXMuanVzdEVsaW1pbmF0ZWRQbGF5ZXIudmFsdWUgPSB0aGlzLnBsYXllcjRBbGdvQWRkci52YWx1ZS5hZGRyZXNzCglieXRlYyAxIC8vICAianVzdEVsaW1pbmF0ZWRQbGF5ZXIiCglieXRlYyA1IC8vICAicGxheWVyNEFsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMCAzMgoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo3NzkKCS8vIHRoaXMucGxheWVyNEFsZ29BZGRyLnZhbHVlLmVsaW1pbmF0ZWQgPSAxCglieXRlYyA1IC8vICAicGxheWVyNEFsZ29BZGRyIgoJYXBwX2dsb2JhbF9nZXQKCWJ5dGVjIDEyIC8vIDB4MDAwMDAwMDAwMDAwMDAwMQoJcmVwbGFjZTIgMzIKCWJ5dGVjIDUgLy8gICJwbGF5ZXI0QWxnb0FkZHIiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoJYiAqaWYzOF9lbmQKCippZjM4X2Vsc2VpZjRfY29uZGl0aW9uOgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NzgwCgkvLyB0aGlzLm1hZmlhVmljdGltLnZhbHVlID09PSB0aGlzLnBsYXllcjVBbGdvQWRkci52YWx1ZS5hZGRyZXNzCglieXRlYyA5IC8vICAibWFmaWFWaWN0aW0iCglhcHBfZ2xvYmFsX2dldAoJYnl0ZWMgNiAvLyAgInBsYXllcjVBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCT09CglieiAqaWYzOF9lbHNlaWY1X2NvbmRpdGlvbgoKCS8vICppZjM4X2Vsc2VpZjRfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NzgxCgkvLyB0aGlzLmp1c3RFbGltaW5hdGVkUGxheWVyLnZhbHVlID0gdGhpcy5wbGF5ZXI1QWxnb0FkZHIudmFsdWUuYWRkcmVzcwoJYnl0ZWMgMSAvLyAgImp1c3RFbGltaW5hdGVkUGxheWVyIgoJYnl0ZWMgNiAvLyAgInBsYXllcjVBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NzgyCgkvLyB0aGlzLnBsYXllcjVBbGdvQWRkci52YWx1ZS5lbGltaW5hdGVkID0gMQoJYnl0ZWMgNiAvLyAgInBsYXllcjVBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglieXRlYyAxMiAvLyAweDAwMDAwMDAwMDAwMDAwMDEKCXJlcGxhY2UyIDMyCglieXRlYyA2IC8vICAicGxheWVyNUFsZ29BZGRyIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCWIgKmlmMzhfZW5kCgoqaWYzOF9lbHNlaWY1X2NvbmRpdGlvbjoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjc4MwoJLy8gdGhpcy5tYWZpYVZpY3RpbS52YWx1ZSA9PT0gdGhpcy5wbGF5ZXI2QWxnb0FkZHIudmFsdWUuYWRkcmVzcwoJYnl0ZWMgOSAvLyAgIm1hZmlhVmljdGltIgoJYXBwX2dsb2JhbF9nZXQKCWJ5dGVjIDcgLy8gICJwbGF5ZXI2QWxnb0FkZHIiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAwIDMyCgk9PQoJYnogKmlmMzhfZWxzZQoKCS8vICppZjM4X2Vsc2VpZjVfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6Nzg0CgkvLyB0aGlzLmp1c3RFbGltaW5hdGVkUGxheWVyLnZhbHVlID0gdGhpcy5wbGF5ZXI2QWxnb0FkZHIudmFsdWUuYWRkcmVzcwoJYnl0ZWMgMSAvLyAgImp1c3RFbGltaW5hdGVkUGxheWVyIgoJYnl0ZWMgNyAvLyAgInBsYXllcjZBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6Nzg1CgkvLyB0aGlzLnBsYXllcjZBbGdvQWRkci52YWx1ZS5lbGltaW5hdGVkID0gMQoJYnl0ZWMgNyAvLyAgInBsYXllcjZBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglieXRlYyAxMiAvLyAweDAwMDAwMDAwMDAwMDAwMDEKCXJlcGxhY2UyIDMyCglieXRlYyA3IC8vICAicGxheWVyNkFsZ29BZGRyIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCWIgKmlmMzhfZW5kCgoqaWYzOF9lbHNlOgoJLy8gRXJyb3Igc3RhdGU6IFZpY3RpbSBtdXN0IGJlIGEgcGxheWVyISBTaG91bGQgbm90IGhhdmUgZW50ZXJlZCB0aGlzIHN0YXRlLgoJZXJyCgoqaWYzOF9lbmQ6CgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo3OTAKCS8vIHRoaXMucGxheWVyc0FsaXZlLnZhbHVlIC09IDEKCWJ5dGVjIDE0IC8vICAicGxheWVyc0FsaXZlIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMCAvLyAxCgktCglieXRlYyAxNCAvLyAgInBsYXllcnNBbGl2ZSIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6NzkyCgkvLyB0aGlzLm1hZmlhVmljdGltLnZhbHVlID0gZ2xvYmFscy56ZXJvQWRkcmVzcwoJYnl0ZWMgOSAvLyAgIm1hZmlhVmljdGltIgoJZ2xvYmFsIFplcm9BZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjc5MwoJLy8gdGhpcy5kb2N0b3JQYXRpZW50LnZhbHVlID0gZ2xvYmFscy56ZXJvQWRkcmVzcwoJYnl0ZWMgMTEgLy8gICJkb2N0b3JQYXRpZW50IgoJZ2xvYmFsIFplcm9BZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoKCS8vICppZjM5X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6Nzk1CgkvLyB0aGlzLnBsYXllcnNBbGl2ZS52YWx1ZSA8PSAyCglieXRlYyAxNCAvLyAgInBsYXllcnNBbGl2ZSIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDIgLy8gMgoJPD0KCWJ6ICppZjM5X2VuZAoKCS8vICppZjM5X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjc5OAoJLy8gdGhpcy5nYW1lU3RhdGUudmFsdWUgPSBzdGF0ZUdhbWVPdmVyCglieXRlYyAwIC8vICAiZ2FtZVN0YXRlIgoJaW50YyA1IC8vIDEyCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjc5OQoJLy8gcmV0dXJuOwoJcmV0c3ViCgoqaWYzOV9lbmQ6CgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo4MDIKCS8vIHRoaXMuZ2FtZVN0YXRlLnZhbHVlID0gc3RhdGVEYXduU3RhZ2VVbm1hc2tpbmcKCWJ5dGVjIDAgLy8gICJnYW1lU3RhdGUiCglpbnRjIDE1IC8vIDExCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBkYXduU3RhZ2VVbm1hc2tpbmcoYnl0ZVtdKXZvaWQKKmFiaV9yb3V0ZV9kYXduU3RhZ2VVbm1hc2tpbmc6CgkvLyBibHNTazogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgZGF3blN0YWdlVW5tYXNraW5nKGJ5dGVbXSl2b2lkCgljYWxsc3ViIGRhd25TdGFnZVVubWFza2luZwoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gZGF3blN0YWdlVW5tYXNraW5nKGJsc1NrOiBieXRlcyk6IHZvaWQKZGF3blN0YWdlVW5tYXNraW5nOgoJcHJvdG8gMSAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDggLy8gMHgKCWR1cG4gMgoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjgxMQoJLy8gYXNzZXJ0KAoJLy8gICAgICAgdGhpcy5nYW1lU3RhdGUudmFsdWUgPT09IHN0YXRlRGF3blN0YWdlVW5tYXNraW5nLAoJLy8gICAgICAgJ0ludmFsaWQgbWV0aG9kIGNhbGw6IEdhbWUgaXMgbm90IGluIERhd24gU3RhZ2UgVW5tYXNraW5nIHN0YXRlLicKCS8vICAgICApCglieXRlYyAwIC8vICAiZ2FtZVN0YXRlIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMTUgLy8gMTEKCT09CgoJLy8gSW52YWxpZCBtZXRob2QgY2FsbDogR2FtZSBpcyBub3QgaW4gRGF3biBTdGFnZSBVbm1hc2tpbmcgc3RhdGUuCglhc3NlcnQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo4MTYKCS8vIGFzc2VydCh0aGlzLmp1c3RFbGltaW5hdGVkUGxheWVyLnZhbHVlID09PSB0aGlzLnR4bi5zZW5kZXIsICdFcnJvciBzdGF0ZTogT3RoZXIgcGxheWVyIGNhbGxlZCBtZXRob2QuJykKCWJ5dGVjIDEgLy8gICJqdXN0RWxpbWluYXRlZFBsYXllciIKCWFwcF9nbG9iYWxfZ2V0Cgl0eG4gU2VuZGVyCgk9PQoKCS8vIEVycm9yIHN0YXRlOiBPdGhlciBwbGF5ZXIgY2FsbGVkIG1ldGhvZC4KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjgxOQoJLy8gQkxTX1BLID0gZWNTY2FsYXJNdWwoJ0JMUzEyXzM4MWcxJywgaGV4KEJMUzEyMzgxRzFfQkFTRVBPSU5UX0JZVEVTKSwgYmxzU2spCglieXRlYyAzOSAvLyAweDE3ZjFkM2E3MzE5N2Q3OTQyNjk1NjM4YzRmYTlhYzBmYzM2ODhjNGY5Nzc0YjkwNWExNGUzYTNmMTcxYmFjNTg2YzU1ZTgzZmY5N2ExYWVmZmIzYWYwMGFkYjIyYzZiYjA4YjNmNDgxZTNhYWEwZjFhMDllMzBlZDc0MWQ4YWU0ZmNmNWUwOTVkNWQwMGFmNjAwZGIxOGNiMmMwNGIzZWRkMDNjYzc0NGEyODg4YWU0MGNhYTIzMjk0NmM1ZTdlMQoJZnJhbWVfZGlnIC0xIC8vIGJsc1NrOiBieXRlcwoJZWNfc2NhbGFyX211bCBCTFMxMl8zODFnMQoJZnJhbWVfYnVyeSAwIC8vIEJMU19QSzogYnl0ZVtdCgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6ODIwCgkvLyBoYXNoVG9Qb2ludCA9IHRoaXMuaGFzaFBvaW50VG9Qb2ludChCTFNfUEspCglmcmFtZV9kaWcgMCAvLyBCTFNfUEs6IGJ5dGVbXQoJY2FsbHN1YiBoYXNoUG9pbnRUb1BvaW50CglmcmFtZV9idXJ5IDEgLy8gaGFzaFRvUG9pbnQ6IGJ5dGVbXQoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjgyMQoJLy8gZ2VuS2V5SW1hZ2UgPSBlY1NjYWxhck11bCgnQkxTMTJfMzgxZzEnLCBoYXNoVG9Qb2ludCwgYmxzU2spCglmcmFtZV9kaWcgMSAvLyBoYXNoVG9Qb2ludDogYnl0ZVtdCglmcmFtZV9kaWcgLTEgLy8gYmxzU2s6IGJ5dGVzCgllY19zY2FsYXJfbXVsIEJMUzEyXzM4MWcxCglmcmFtZV9idXJ5IDIgLy8gZ2VuS2V5SW1hZ2U6IGJ5dGVbXQoKCS8vICppZjQwX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6ODIzCgkvLyBnZW5LZXlJbWFnZSA9PT0gdGhpcy5tYWZpYUtleUltYWdlLnZhbHVlCglmcmFtZV9kaWcgMiAvLyBnZW5LZXlJbWFnZTogYnl0ZVtdCglieXRlYyAzMiAvLyAgIm1hZmlhS2V5SW1hZ2UiCglhcHBfZ2xvYmFsX2dldAoJPT0KCWJ6ICppZjQwX2VuZAoKCS8vICppZjQwX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjgyNwoJLy8gdGhpcy5nYW1lU3RhdGUudmFsdWUgPSBzdGF0ZUdhbWVPdmVyCglieXRlYyAwIC8vICAiZ2FtZVN0YXRlIgoJaW50YyA1IC8vIDEyCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjgyOAoJLy8gdGhpcy5tYWZpYS52YWx1ZSA9IGdsb2JhbHMuemVyb0FkZHJlc3MKCWJ5dGVjIDIxIC8vICAibWFmaWEiCglnbG9iYWwgWmVyb0FkZHJlc3MKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6ODI5CgkvLyByZXR1cm47CglyZXRzdWIKCippZjQwX2VuZDoKCS8vICppZjQxX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6ODMyCgkvLyBnZW5LZXlJbWFnZSA9PT0gdGhpcy5kb2N0b3JLZXlJbWFnZS52YWx1ZQoJZnJhbWVfZGlnIDIgLy8gZ2VuS2V5SW1hZ2U6IGJ5dGVbXQoJYnl0ZWMgMzEgLy8gICJkb2N0b3JLZXlJbWFnZSIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoJYnogKmlmNDFfZW5kCgoJLy8gKmlmNDFfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6ODM0CgkvLyB0aGlzLmRvY3Rvci52YWx1ZSA9IGdsb2JhbHMuemVyb0FkZHJlc3MKCWJ5dGVjIDEzIC8vICAiZG9jdG9yIgoJZ2xvYmFsIFplcm9BZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoKKmlmNDFfZW5kOgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6ODM4CgkvLyB0aGlzLmp1c3RFbGltaW5hdGVkUGxheWVyLnZhbHVlID0gZ2xvYmFscy56ZXJvQWRkcmVzcwoJYnl0ZWMgMSAvLyAgImp1c3RFbGltaW5hdGVkUGxheWVyIgoJZ2xvYmFsIFplcm9BZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjg0MAoJLy8gdGhpcy5nYW1lU3RhdGUudmFsdWUgPSBzdGF0ZURheVN0YWdlVm90ZQoJYnl0ZWMgMCAvLyAgImdhbWVTdGF0ZSIKCWludGMgNCAvLyAzCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBnYW1lT3Zlcigpdm9pZAoqYWJpX3JvdXRlX2dhbWVPdmVyOgoJLy8gZXhlY3V0ZSBnYW1lT3Zlcigpdm9pZAoJY2FsbHN1YiBnYW1lT3ZlcgoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gZ2FtZU92ZXIoKTogdm9pZApnYW1lT3ZlcjoKCXByb3RvIDAgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyA4IC8vIDB4CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6ODQ1CgkvLyBhc3NlcnQodGhpcy5nYW1lU3RhdGUudmFsdWUgPT09IHN0YXRlR2FtZU92ZXIsICdJbnZhbGlkIG1ldGhvZCBjYWxsOiBHYW1lIGlzIG5vdCBpbiBHYW1lIE92ZXIgc3RhdGUuJykKCWJ5dGVjIDAgLy8gICJnYW1lU3RhdGUiCglhcHBfZ2xvYmFsX2dldAoJaW50YyA1IC8vIDEyCgk9PQoKCS8vIEludmFsaWQgbWV0aG9kIGNhbGw6IEdhbWUgaXMgbm90IGluIEdhbWUgT3ZlciBzdGF0ZS4KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjg0NgoJLy8gdGhpcy5xdWlja0FjY2Vzc1BLQm94ZXMoMCkuZGVsZXRlKCkKCWJ5dGVjIDEwIC8vIDB4MDAwMDAwMDAwMDAwMDAwMAoJYm94X2RlbAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjg0NwoJLy8gdGhpcy5oYXNoRmlsdGVyKHJhd0J5dGVzKHNoYTI1Nih0aGlzLm1hZmlhS2V5SW1hZ2UudmFsdWUpKSkuZGVsZXRlKCkKCWJ5dGVjIDMyIC8vICAibWFmaWFLZXlJbWFnZSIKCWFwcF9nbG9iYWxfZ2V0CglzaGEyNTYKCWJveF9kZWwKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo4NDgKCS8vIHRoaXMuaGFzaEZpbHRlcihyYXdCeXRlcyhzaGEyNTYodGhpcy5kb2N0b3JLZXlJbWFnZS52YWx1ZSkpKS5kZWxldGUoKQoJYnl0ZWMgMzEgLy8gICJkb2N0b3JLZXlJbWFnZSIKCWFwcF9nbG9iYWxfZ2V0CglzaGEyNTYKCWJveF9kZWwKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo4NDkKCS8vIHRoaXMuaGFzaEZpbHRlcihyYXdCeXRlcyhzaGEyNTYodGhpcy5mYXJtZXJLZXlJbWFnZS52YWx1ZSkpKS5kZWxldGUoKQoJYnl0ZWMgNDQgLy8gICJmYXJtZXJLZXlJbWFnZSIKCWFwcF9nbG9iYWxfZ2V0CglzaGEyNTYKCWJveF9kZWwKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo4NTAKCS8vIHRoaXMuaGFzaEZpbHRlcihyYXdCeXRlcyhzaGEyNTYodGhpcy5idXRjaGVyS2V5SW1hZ2UudmFsdWUpKSkuZGVsZXRlKCkKCWJ5dGVjIDQxIC8vICAiYnV0Y2hlcktleUltYWdlIgoJYXBwX2dsb2JhbF9nZXQKCXNoYTI1NgoJYm94X2RlbAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjg1MQoJLy8gdGhpcy5oYXNoRmlsdGVyKHJhd0J5dGVzKHNoYTI1Nih0aGlzLmlubmtlZXBLZXlJbWFnZS52YWx1ZSkpKS5kZWxldGUoKQoJYnl0ZWMgNDIgLy8gICJpbm5rZWVwS2V5SW1hZ2UiCglhcHBfZ2xvYmFsX2dldAoJc2hhMjU2Cglib3hfZGVsCgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6ODUyCgkvLyB0aGlzLmhhc2hGaWx0ZXIocmF3Qnl0ZXMoc2hhMjU2KHRoaXMuZ3JvY2VyS2V5SW1hZ2UudmFsdWUpKSkuZGVsZXRlKCkKCWJ5dGVjIDQ1IC8vICAiZ3JvY2VyS2V5SW1hZ2UiCglhcHBfZ2xvYmFsX2dldAoJc2hhMjU2Cglib3hfZGVsCgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6ODU0CgkvLyByZXR1cm5BbW91bnQgPSBTTEFTSF9ERVBPU0lUX0FNT1VOVCAtIGdsb2JhbHMubWluVHhuRmVlCglwdXNoaW50IDEwMDAwMDAKCWdsb2JhbCBNaW5UeG5GZWUKCS0KCWZyYW1lX2J1cnkgMCAvLyByZXR1cm5BbW91bnQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjg1NgoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgYW1vdW50OiByZXR1cm5BbW91bnQsCgkvLyAgICAgICByZWNlaXZlcjogdGhpcy5wbGF5ZXIxQWxnb0FkZHIudmFsdWUuYWRkcmVzcywKCS8vICAgICAgIGZlZTogZ2xvYmFscy5taW5UeG5GZWUsCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgMCAvLyAgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6ODU3CgkvLyBhbW91bnQ6IHJldHVybkFtb3VudAoJZnJhbWVfZGlnIDAgLy8gcmV0dXJuQW1vdW50OiB1aW50NjQKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6ODU4CgkvLyByZWNlaXZlcjogdGhpcy5wbGF5ZXIxQWxnb0FkZHIudmFsdWUuYWRkcmVzcwoJYnl0ZWMgMiAvLyAgInBsYXllcjFBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo4NTkKCS8vIGZlZTogZ2xvYmFscy5taW5UeG5GZWUKCWdsb2JhbCBNaW5UeG5GZWUKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjg2MgoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgYW1vdW50OiByZXR1cm5BbW91bnQsCgkvLyAgICAgICByZWNlaXZlcjogdGhpcy5wbGF5ZXIyQWxnb0FkZHIudmFsdWUuYWRkcmVzcywKCS8vICAgICAgIGZlZTogZ2xvYmFscy5taW5UeG5GZWUsCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgMCAvLyAgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6ODYzCgkvLyBhbW91bnQ6IHJldHVybkFtb3VudAoJZnJhbWVfZGlnIDAgLy8gcmV0dXJuQW1vdW50OiB1aW50NjQKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6ODY0CgkvLyByZWNlaXZlcjogdGhpcy5wbGF5ZXIyQWxnb0FkZHIudmFsdWUuYWRkcmVzcwoJYnl0ZWMgMyAvLyAgInBsYXllcjJBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo4NjUKCS8vIGZlZTogZ2xvYmFscy5taW5UeG5GZWUKCWdsb2JhbCBNaW5UeG5GZWUKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjg2NwoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgYW1vdW50OiByZXR1cm5BbW91bnQsCgkvLyAgICAgICByZWNlaXZlcjogdGhpcy5wbGF5ZXIzQWxnb0FkZHIudmFsdWUuYWRkcmVzcywKCS8vICAgICAgIGZlZTogZ2xvYmFscy5taW5UeG5GZWUsCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgMCAvLyAgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6ODY4CgkvLyBhbW91bnQ6IHJldHVybkFtb3VudAoJZnJhbWVfZGlnIDAgLy8gcmV0dXJuQW1vdW50OiB1aW50NjQKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6ODY5CgkvLyByZWNlaXZlcjogdGhpcy5wbGF5ZXIzQWxnb0FkZHIudmFsdWUuYWRkcmVzcwoJYnl0ZWMgNCAvLyAgInBsYXllcjNBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo4NzAKCS8vIGZlZTogZ2xvYmFscy5taW5UeG5GZWUKCWdsb2JhbCBNaW5UeG5GZWUKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjg3MwoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgYW1vdW50OiByZXR1cm5BbW91bnQsCgkvLyAgICAgICByZWNlaXZlcjogdGhpcy5wbGF5ZXI0QWxnb0FkZHIudmFsdWUuYWRkcmVzcywKCS8vICAgICAgIGZlZTogZ2xvYmFscy5taW5UeG5GZWUsCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgMCAvLyAgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6ODc0CgkvLyBhbW91bnQ6IHJldHVybkFtb3VudAoJZnJhbWVfZGlnIDAgLy8gcmV0dXJuQW1vdW50OiB1aW50NjQKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6ODc1CgkvLyByZWNlaXZlcjogdGhpcy5wbGF5ZXI0QWxnb0FkZHIudmFsdWUuYWRkcmVzcwoJYnl0ZWMgNSAvLyAgInBsYXllcjRBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo4NzYKCS8vIGZlZTogZ2xvYmFscy5taW5UeG5GZWUKCWdsb2JhbCBNaW5UeG5GZWUKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjg3OQoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgYW1vdW50OiByZXR1cm5BbW91bnQsCgkvLyAgICAgICByZWNlaXZlcjogdGhpcy5wbGF5ZXI1QWxnb0FkZHIudmFsdWUuYWRkcmVzcywKCS8vICAgICAgIGZlZTogZ2xvYmFscy5taW5UeG5GZWUsCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgMCAvLyAgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6ODgwCgkvLyBhbW91bnQ6IHJldHVybkFtb3VudAoJZnJhbWVfZGlnIDAgLy8gcmV0dXJuQW1vdW50OiB1aW50NjQKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6ODgxCgkvLyByZWNlaXZlcjogdGhpcy5wbGF5ZXI1QWxnb0FkZHIudmFsdWUuYWRkcmVzcwoJYnl0ZWMgNiAvLyAgInBsYXllcjVBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo4ODIKCS8vIGZlZTogZ2xvYmFscy5taW5UeG5GZWUKCWdsb2JhbCBNaW5UeG5GZWUKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjg4NQoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgYW1vdW50OiByZXR1cm5BbW91bnQsCgkvLyAgICAgICByZWNlaXZlcjogdGhpcy5wbGF5ZXI2QWxnb0FkZHIudmFsdWUuYWRkcmVzcywKCS8vICAgICAgIGZlZTogZ2xvYmFscy5taW5UeG5GZWUsCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgMCAvLyAgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6ODg2CgkvLyBhbW91bnQ6IHJldHVybkFtb3VudAoJZnJhbWVfZGlnIDAgLy8gcmV0dXJuQW1vdW50OiB1aW50NjQKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gY29udHJhY3RzL1Rvd25IYWxsLmFsZ28udHM6ODg3CgkvLyByZWNlaXZlcjogdGhpcy5wbGF5ZXI2QWxnb0FkZHIudmFsdWUuYWRkcmVzcwoJYnl0ZWMgNyAvLyAgInBsYXllcjZBbGdvQWRkciIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDAgMzIKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo4ODgKCS8vIGZlZTogZ2xvYmFscy5taW5UeG5GZWUKCWdsb2JhbCBNaW5UeG5GZWUKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJcmV0c3ViCgovLyBkZWxldGVBcHBsaWNhdGlvbigpdm9pZAoqYWJpX3JvdXRlX2RlbGV0ZUFwcGxpY2F0aW9uOgoJLy8gZXhlY3V0ZSBkZWxldGVBcHBsaWNhdGlvbigpdm9pZAoJY2FsbHN1YiBkZWxldGVBcHBsaWNhdGlvbgoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gZGVsZXRlQXBwbGljYXRpb24oKTogdm9pZApkZWxldGVBcHBsaWNhdGlvbjoKCXByb3RvIDAgMAoKCS8vIGNvbnRyYWN0cy9Ub3duSGFsbC5hbGdvLnRzOjg5MwoJLy8gYXNzZXJ0KHRoaXMuZ2FtZVN0YXRlLnZhbHVlID09PSBzdGF0ZUdhbWVPdmVyLCAnSW52YWxpZCBtZXRob2QgY2FsbDogR2FtZSBpcyBub3QgaW4gR2FtZSBPdmVyIHN0YXRlLicpCglieXRlYyAwIC8vICAiZ2FtZVN0YXRlIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgNSAvLyAxMgoJPT0KCgkvLyBJbnZhbGlkIG1ldGhvZCBjYWxsOiBHYW1lIGlzIG5vdCBpbiBHYW1lIE92ZXIgc3RhdGUuCglhc3NlcnQKCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo4OTQKCS8vIHNlbmRQYXltZW50KHsgY2xvc2VSZW1haW5kZXJUbzogdGhpcy5jcmVhdG9yQWRkcmVzcy52YWx1ZSB9KQoJaXR4bl9iZWdpbgoJaW50YyAwIC8vICBwYXkKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHMvVG93bkhhbGwuYWxnby50czo4OTQKCS8vIGNsb3NlUmVtYWluZGVyVG86IHRoaXMuY3JlYXRvckFkZHJlc3MudmFsdWUKCWJ5dGVjIDM0IC8vICAiY3JlYXRvckFkZHJlc3MiCglhcHBfZ2xvYmFsX2dldAoJaXR4bl9maWVsZCBDbG9zZVJlbWFpbmRlclRvCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAxIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJcmV0c3ViCgoqY3JlYXRlX05vT3A6CglwdXNoYnl0ZXMgMHhiODQ0N2IzNiAvLyBtZXRob2QgImNyZWF0ZUFwcGxpY2F0aW9uKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjcmVhdGUgTm9PcAoJZXJyCgoqY2FsbF9Ob09wOgoJcHVzaGJ5dGVzIDB4NzBjZWVhMWIgLy8gbWV0aG9kICJkdW1teU9wVXAodWludDY0KXVpbnQ2NCIKCXB1c2hieXRlcyAweGEwMTdiZDhjIC8vIG1ldGhvZCAiZGxvZyhieXRlW10sYnl0ZVtdLGJ5dGVbXSxieXRlW10pYm9vbCIKCXB1c2hieXRlcyAweGQ3NzJjZGJjIC8vIG1ldGhvZCAiaGFzaFBvaW50VG9Qb2ludChieXRlW10pYnl0ZVtdIgoJcHVzaGJ5dGVzIDB4ZjU0MGJhMmMgLy8gbWV0aG9kICJnZXRHYW1lU3RhdGUoKXVpbnQ2NCIKCXB1c2hieXRlcyAweGZmNjMwZWZkIC8vIG1ldGhvZCAic2V0TFNJR0Z1bmRlckFkZHJlc3MoYWRkcmVzcyl2b2lkIgoJcHVzaGJ5dGVzIDB4NTRkOTJiZTMgLy8gbWV0aG9kICJqb2luR2FtZUxvYmJ5KHBheSxieXRlW10pdm9pZCIKCXB1c2hieXRlcyAweDliMDdiZjhmIC8vIG1ldGhvZCAiYXNzaWduUm9sZShieXRlW10sYnl0ZVtdLGJ5dGVbXSxieXRlW10sYnl0ZVtdLHBheSxwYXkscGF5LHBheSxwYXkscGF5LHBheSl2b2lkIgoJcHVzaGJ5dGVzIDB4NGZiMTIxYmIgLy8gbWV0aG9kICJkYXlTdGFnZVZvdGUodWludDY0KXZvaWQiCglwdXNoYnl0ZXMgMHhjNDIzNjE2OSAvLyBtZXRob2QgImRheVN0YWdlRWxpbWluYXRlKCl2b2lkIgoJcHVzaGJ5dGVzIDB4ZWU5ZjM2MWEgLy8gbWV0aG9kICJkYXlTdGFnZVVubWFza2luZyhieXRlW10pdm9pZCIKCXB1c2hieXRlcyAweDBiNWU3NTg1IC8vIG1ldGhvZCAibmlnaHRTdGFnZU1hZmlhQ29tbWl0KGJ5dGVbXSl2b2lkIgoJcHVzaGJ5dGVzIDB4Yzg2NDU4NzUgLy8gbWV0aG9kICJuaWdodFN0YWdlRG9jdG9yQ29tbWl0KGJ5dGVbXSl2b2lkIgoJcHVzaGJ5dGVzIDB4ZWRjNDg2YmIgLy8gbWV0aG9kICJkYXduU3RhZ2VNYWZpYVJldmVhbChhZGRyZXNzLGJ5dGVbMzJdKXZvaWQiCglwdXNoYnl0ZXMgMHg3NzM3NjJlNSAvLyBtZXRob2QgImRhd25TdGFnZURvY3RvclJldmVhbChhZGRyZXNzLGJ5dGVbMzJdKXZvaWQiCglwdXNoYnl0ZXMgMHgzOTk1ZWQ2YSAvLyBtZXRob2QgImRhd25TdGFnZURlYWRPclNhdmVkKCl2b2lkIgoJcHVzaGJ5dGVzIDB4ZWY2NWE2OTcgLy8gbWV0aG9kICJkYXduU3RhZ2VVbm1hc2tpbmcoYnl0ZVtdKXZvaWQiCglwdXNoYnl0ZXMgMHg2YWRiNDUzOCAvLyBtZXRob2QgImdhbWVPdmVyKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9kdW1teU9wVXAgKmFiaV9yb3V0ZV9kbG9nICphYmlfcm91dGVfaGFzaFBvaW50VG9Qb2ludCAqYWJpX3JvdXRlX2dldEdhbWVTdGF0ZSAqYWJpX3JvdXRlX3NldExTSUdGdW5kZXJBZGRyZXNzICphYmlfcm91dGVfam9pbkdhbWVMb2JieSAqYWJpX3JvdXRlX2Fzc2lnblJvbGUgKmFiaV9yb3V0ZV9kYXlTdGFnZVZvdGUgKmFiaV9yb3V0ZV9kYXlTdGFnZUVsaW1pbmF0ZSAqYWJpX3JvdXRlX2RheVN0YWdlVW5tYXNraW5nICphYmlfcm91dGVfbmlnaHRTdGFnZU1hZmlhQ29tbWl0ICphYmlfcm91dGVfbmlnaHRTdGFnZURvY3RvckNvbW1pdCAqYWJpX3JvdXRlX2Rhd25TdGFnZU1hZmlhUmV2ZWFsICphYmlfcm91dGVfZGF3blN0YWdlRG9jdG9yUmV2ZWFsICphYmlfcm91dGVfZGF3blN0YWdlRGVhZE9yU2F2ZWQgKmFiaV9yb3V0ZV9kYXduU3RhZ2VVbm1hc2tpbmcgKmFiaV9yb3V0ZV9nYW1lT3ZlcgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjYWxsIE5vT3AKCWVycgoKKmNhbGxfRGVsZXRlQXBwbGljYXRpb246CglwdXNoYnl0ZXMgMHgyNDg3YzMyYyAvLyBtZXRob2QgImRlbGV0ZUFwcGxpY2F0aW9uKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9kZWxldGVBcHBsaWNhdGlvbgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjYWxsIERlbGV0ZUFwcGxpY2F0aW9uCgllcnI=",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "TownHall",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "dummyOpUp",
        "desc": "Dummy Op Up\nDummy operation to get more opcode budget\n - The number to return, necssary to deduplicate the name",
        "args": [
          {
            "name": "i",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "the number (but we do nothing with it)"
        }
      },
      {
        "name": "dlog",
        "args": [
          {
            "name": "g",
            "type": "byte[]"
          },
          {
            "name": "x",
            "type": "byte[]"
          },
          {
            "name": "v",
            "type": "byte[]"
          },
          {
            "name": "z",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "hashPointToPoint",
        "args": [
          {
            "name": "point",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "byte[]"
        }
      },
      {
        "name": "getGameState",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "setLSIGFunderAddress",
        "args": [
          {
            "name": "funderLSigAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "joinGameLobby",
        "args": [
          {
            "name": "depositTxn",
            "type": "pay"
          },
          {
            "name": "NIZK_DLOG",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "assignRole",
        "args": [
          {
            "name": "msg",
            "type": "byte[]"
          },
          {
            "name": "pkAll",
            "type": "byte[]"
          },
          {
            "name": "keyImage",
            "type": "byte[]"
          },
          {
            "name": "sig",
            "type": "byte[]"
          },
          {
            "name": "challenges",
            "type": "byte[]"
          },
          {
            "name": "funderLSigTxn",
            "type": "pay"
          },
          {
            "name": "ringLSigTxn0",
            "type": "pay"
          },
          {
            "name": "ringLSigTxn1",
            "type": "pay"
          },
          {
            "name": "ringLSigTxn2",
            "type": "pay"
          },
          {
            "name": "ringLSigTxn3",
            "type": "pay"
          },
          {
            "name": "ringLSigTxn4",
            "type": "pay"
          },
          {
            "name": "ringLSigTxn5",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "dayStageVote",
        "args": [
          {
            "name": "vote",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "dayStageEliminate",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "dayStageUnmasking",
        "args": [
          {
            "name": "blsSk",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "nightStageMafiaCommit",
        "args": [
          {
            "name": "commitment",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "nightStageDoctorCommit",
        "args": [
          {
            "name": "commitment",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "dawnStageMafiaReveal",
        "args": [
          {
            "name": "victimAim",
            "type": "address"
          },
          {
            "name": "blinder",
            "type": "byte[32]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "dawnStageDoctorReveal",
        "args": [
          {
            "name": "patientAim",
            "type": "address"
          },
          {
            "name": "blinder",
            "type": "byte[32]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "dawnStageDeadOrSaved",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "dawnStageUnmasking",
        "args": [
          {
            "name": "blsSk",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "gameOver",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}