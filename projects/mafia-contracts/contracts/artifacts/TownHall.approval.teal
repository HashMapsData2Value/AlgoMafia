#pragma version 10
intcblock 1 0 2 6 3 32 12 4 5 7 8 10 96 150000 9 11
bytecblock 0x67616d655374617465 0x6a757374456c696d696e61746564506c61796572 0x 0x6d6166696156696374696d 0x706c6179657231416c676f41646472 0x706c6179657232416c676f41646472 0x706c6179657233416c676f41646472 0x706c6179657234416c676f41646472 0x706c6179657235416c676f41646472 0x706c6179657236416c676f41646472 0x646f63746f7250617469656e74 0x646f63746f72 0x706c6179657273416c697665 0x706c61796572315265636569766564566f746573 0x706c61796572325265636569766564566f746573 0x706c61796572335265636569766564566f746573 0x706c61796572345265636569766564566f746573 0x706c61796572355265636569766564566f746573 0x706c61796572365265636569766564566f746573 0x0000000000000000 0x6d61666961 0x6c73696746756e64657241646472657373 0x706c6179657273566f746564 0x706c61796572734a6f696e6564 0x706c6179657231486173566f746564 0x706c6179657232486173566f746564 0x706c6179657233486173566f746564 0x706c6179657234486173566f746564 0x706c6179657235486173566f746564 0x706c6179657236486173566f746564 0x151f7c75 0x646f63746f724b6579496d616765 0x6d616669614b6579496d616765 0x62757463686572 0x696e6e6b656570 0x6661726d6572 0x67726f636572 0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1 0x646f63746f72436f6d6d69746d656e74 0x6d61666961436f6d6d69746d656e74 0x63726561746f7241646472657373

// This TEAL was generated by TEALScript v0.106.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 3 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts/TownHall.algo.ts:125
	// this.creatorAddress.value = this.txn.sender
	bytec 40 //  "creatorAddress"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:127
	// this.lsigFunderAddress.value = globals.zeroAddress
	bytec 21 //  "lsigFunderAddress"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:129
	// this.player1AlgoAddr.value = globals.zeroAddress
	bytec 4 //  "player1AlgoAddr"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:130
	// this.player2AlgoAddr.value = globals.zeroAddress
	bytec 5 //  "player2AlgoAddr"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:131
	// this.player3AlgoAddr.value = globals.zeroAddress
	bytec 6 //  "player3AlgoAddr"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:132
	// this.player4AlgoAddr.value = globals.zeroAddress
	bytec 7 //  "player4AlgoAddr"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:133
	// this.player5AlgoAddr.value = globals.zeroAddress
	bytec 8 //  "player5AlgoAddr"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:134
	// this.player6AlgoAddr.value = globals.zeroAddress
	bytec 9 //  "player6AlgoAddr"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:136
	// this.mafia.value = globals.zeroAddress
	bytec 20 //  "mafia"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:137
	// this.doctor.value = globals.zeroAddress
	bytec 11 //  "doctor"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:138
	// this.farmer.value = globals.zeroAddress
	bytec 35 //  "farmer"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:139
	// this.butcher.value = globals.zeroAddress
	bytec 33 //  "butcher"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:140
	// this.innkeep.value = globals.zeroAddress
	bytec 34 //  "innkeep"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:141
	// this.grocer.value = globals.zeroAddress
	bytec 36 //  "grocer"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:143
	// this.player1HasVoted.value = 0
	bytec 24 //  "player1HasVoted"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:144
	// this.player2HasVoted.value = 0
	bytec 25 //  "player2HasVoted"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:145
	// this.player3HasVoted.value = 0
	bytec 26 //  "player3HasVoted"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:146
	// this.player4HasVoted.value = 0
	bytec 27 //  "player4HasVoted"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:147
	// this.player5HasVoted.value = 0
	bytec 28 //  "player5HasVoted"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:148
	// this.player6HasVoted.value = 0
	bytec 29 //  "player6HasVoted"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:149
	// this.playersVoted.value = 0
	bytec 22 //  "playersVoted"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:151
	// this.player1ReceivedVotes.value = 0
	bytec 13 //  "player1ReceivedVotes"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:152
	// this.player2ReceivedVotes.value = 0
	bytec 14 //  "player2ReceivedVotes"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:153
	// this.player3ReceivedVotes.value = 0
	bytec 15 //  "player3ReceivedVotes"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:154
	// this.player4ReceivedVotes.value = 0
	bytec 16 //  "player4ReceivedVotes"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:155
	// this.player5ReceivedVotes.value = 0
	bytec 17 //  "player5ReceivedVotes"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:156
	// this.player6ReceivedVotes.value = 0
	bytec 18 //  "player6ReceivedVotes"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:157
	// this.playersVoted.value = 0
	bytec 22 //  "playersVoted"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:159
	// this.playersJoined.value = 0
	bytec 23 //  "playersJoined"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:160
	// this.playersAlive.value = 6
	bytec 12 //  "playersAlive"
	intc 3 // 6
	app_global_put

	// contracts/TownHall.algo.ts:162
	// this.justEliminatedPlayer.value = globals.zeroAddress
	bytec 1 //  "justEliminatedPlayer"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:163
	// this.mafiaVictim.value = globals.zeroAddress
	bytec 3 //  "mafiaVictim"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:164
	// this.doctorPatient.value = globals.zeroAddress
	bytec 10 //  "doctorPatient"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:166
	// this.gameState.value = 0
	bytec 0 //  "gameState"
	intc 1 // 0
	app_global_put
	retsub

// dummyOpUp(uint64)uint64
*abi_route_dummyOpUp:
	// The ABI return prefix
	bytec 30 // 0x151f7c75

	// i: uint64
	txna ApplicationArgs 1
	btoi

	// execute dummyOpUp(uint64)uint64
	callsub dummyOpUp
	itob
	concat
	log
	intc 0 // 1
	return

// dummyOpUp(i: uint64): uint64
//
// Dummy Op Up
// Dummy operation to get more opcode budget
// @i - The number to return, necssary to deduplicate the name
// @returns the number (but we do nothing with it)
dummyOpUp:
	proto 1 1

	// contracts/TownHall.algo.ts:175
	// return i;
	frame_dig -1 // i: uint64
	retsub

// dlog(byte[],byte[],byte[],byte[])bool
*abi_route_dlog:
	// The ABI return prefix
	bytec 30 // 0x151f7c75

	// z: byte[]
	txna ApplicationArgs 4
	extract 2 0

	// v: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// x: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// g: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute dlog(byte[],byte[],byte[],byte[])bool
	callsub dlog
	pushbytes 0x00
	intc 1 // 0
	uncover 2
	setbit
	concat
	log
	intc 0 // 1
	return

// dlog(g: bytes, x: bytes, v: bytes, z: bytes): boolean
dlog:
	proto 4 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x
	dup

	// contracts/TownHall.algo.ts:198
	// hash = keccak256(concat(g, concat(x, v)))
	frame_dig -1 // g: bytes
	frame_dig -2 // x: bytes
	frame_dig -3 // v: bytes
	concat
	concat
	keccak256
	frame_bury 0 // hash: byte[32]

	// contracts/TownHall.algo.ts:199
	// challenge = btobigint(hash) % btobigint(hex(BLS12381_CURVE_ORDER_HEX))
	frame_dig 0 // hash: byte[32]
	pushbytes 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
	b%
	frame_bury 1 // challenge: bigint

	// contracts/TownHall.algo.ts:201
	// return (
	//       v === ecAdd('BLS12_381g1', ecScalarMul('BLS12_381g1', g, z), ecScalarMul('BLS12_381g1', x, rawBytes(challenge)))
	//     );
	frame_dig -3 // v: bytes
	frame_dig -1 // g: bytes
	frame_dig -4 // z: bytes
	ec_scalar_mul BLS12_381g1
	frame_dig -2 // x: bytes
	frame_dig 1 // challenge: bigint
	ec_scalar_mul BLS12_381g1
	ec_add BLS12_381g1
	==

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// hashPointToPoint(byte[])byte[]
*abi_route_hashPointToPoint:
	// The ABI return prefix
	bytec 30 // 0x151f7c75

	// point: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute hashPointToPoint(byte[])byte[]
	callsub hashPointToPoint
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// hashPointToPoint(point: bytes): bytes
hashPointToPoint:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x
	dupn 2

	// contracts/TownHall.algo.ts:207
	// hash = keccak256(point)
	frame_dig -1 // point: bytes
	keccak256
	frame_bury 0 // hash: byte[32]

	// contracts/TownHall.algo.ts:208
	// fpElement = btobigint(hash) % btobigint(hex(BLS12381_FIELD_MODULUS_HEX))
	frame_dig 0 // hash: byte[32]
	pushbytes 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab
	b%
	frame_bury 1 // fpElement: bigint

	// contracts/TownHall.algo.ts:211
	// result = ecMapTo('BLS12_381g1', rawBytes(fpElement))
	frame_dig 1 // fpElement: bigint
	ec_map_to BLS12_381g1
	frame_bury 2 // result: byte[]

	// contracts/TownHall.algo.ts:212
	// return result;
	frame_dig 2 // result: byte[]

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// getGameState()uint64
*abi_route_getGameState:
	// The ABI return prefix
	bytec 30 // 0x151f7c75

	// execute getGameState()uint64
	callsub getGameState
	itob
	concat
	log
	intc 0 // 1
	return

// getGameState(): uint64
getGameState:
	proto 0 1

	// contracts/TownHall.algo.ts:218
	// return this.gameState.value;
	bytec 0 //  "gameState"
	app_global_get
	retsub

// setLSIGFunderAddress(address)void
*abi_route_setLSIGFunderAddress:
	// funderLSigAddress: address
	txna ApplicationArgs 1
	dup
	len
	intc 5 // 32
	==

	// argument 0 (funderLSigAddress) for setLSIGFunderAddress must be a address
	assert

	// execute setLSIGFunderAddress(address)void
	callsub setLSIGFunderAddress
	intc 0 // 1
	return

// setLSIGFunderAddress(funderLSigAddress: Address): void
setLSIGFunderAddress:
	proto 1 0

	// contracts/TownHall.algo.ts:222
	// assert(
	//       this.gameState.value === stateSetLSIGFunderAddress,
	//       'Invalid method call: Contract is not in Set LSig Funder Address state.'
	//     )
	bytec 0 //  "gameState"
	app_global_get
	intc 1 // 0
	==

	// Invalid method call: Contract is not in Set LSig Funder Address state.
	assert

	// contracts/TownHall.algo.ts:227
	// assert(
	//       this.txn.sender === this.creatorAddress.value,
	//       'Error state: Only the creator can set the LSig Funder Address!'
	//     )
	txn Sender
	bytec 40 //  "creatorAddress"
	app_global_get
	==

	// Error state: Only the creator can set the LSig Funder Address!
	assert

	// contracts/TownHall.algo.ts:232
	// assert(this.lsigFunderAddress.value === globals.zeroAddress, 'Error state: LSig Funder Address already set!')
	bytec 21 //  "lsigFunderAddress"
	app_global_get
	global ZeroAddress
	==

	// Error state: LSig Funder Address already set!
	assert

	// contracts/TownHall.algo.ts:234
	// assert(funderLSigAddress !== globals.zeroAddress, 'Error state: LSig Funder Address cannot be the zero address.')
	frame_dig -1 // funderLSigAddress: Address
	global ZeroAddress
	!=

	// Error state: LSig Funder Address cannot be the zero address.
	assert

	// contracts/TownHall.algo.ts:237
	// this.lsigFunderAddress.value = funderLSigAddress
	bytec 21 //  "lsigFunderAddress"
	frame_dig -1 // funderLSigAddress: Address
	app_global_put

	// contracts/TownHall.algo.ts:239
	// this.gameState.value = stateJoinGameLobby
	bytec 0 //  "gameState"
	intc 0 // 1
	app_global_put
	retsub

// joinGameLobby(pay,byte[])void
*abi_route_joinGameLobby:
	// NIZK_DLOG: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// depositTxn: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 1 (depositTxn) for joinGameLobby must be a pay transaction
	assert

	// execute joinGameLobby(pay,byte[])void
	callsub joinGameLobby
	intc 0 // 1
	return

// joinGameLobby(depositTxn: PayTxn, NIZK_DLOG: bytes): void
joinGameLobby:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x
	dupn 3

	// contracts/TownHall.algo.ts:243
	// assert(this.gameState.value === stateJoinGameLobby, 'Invalid method call: Game is not in Join Game Lobby state.')
	bytec 0 //  "gameState"
	app_global_get
	intc 0 // 1
	==

	// Invalid method call: Game is not in Join Game Lobby state.
	assert

	// contracts/TownHall.algo.ts:245
	// assert(
	//       this.playersJoined.value < 6,
	//       'Max players already joined! Error, game should have moved to the next stage already.'
	//     )
	bytec 23 //  "playersJoined"
	app_global_get
	intc 3 // 6
	<

	// Max players already joined! Error, game should have moved to the next stage already.
	assert

	// *if0_condition
	// contracts/TownHall.algo.ts:251
	// this.player1AlgoAddr.value === this.txn.sender ||
	//       this.player2AlgoAddr.value === this.txn.sender ||
	//       this.player3AlgoAddr.value === this.txn.sender ||
	//       this.player4AlgoAddr.value === this.txn.sender ||
	//       this.player5AlgoAddr.value === this.txn.sender ||
	//       this.player6AlgoAddr.value === this.txn.sender
	bytec 4 //  "player1AlgoAddr"
	app_global_get
	txn Sender
	==
	dup
	bnz *skip_or0
	bytec 5 //  "player2AlgoAddr"
	app_global_get
	txn Sender
	==
	||

*skip_or0:
	dup
	bnz *skip_or1
	bytec 6 //  "player3AlgoAddr"
	app_global_get
	txn Sender
	==
	||

*skip_or1:
	dup
	bnz *skip_or2
	bytec 7 //  "player4AlgoAddr"
	app_global_get
	txn Sender
	==
	||

*skip_or2:
	dup
	bnz *skip_or3
	bytec 8 //  "player5AlgoAddr"
	app_global_get
	txn Sender
	==
	||

*skip_or3:
	dup
	bnz *skip_or4
	bytec 9 //  "player6AlgoAddr"
	app_global_get
	txn Sender
	==
	||

*skip_or4:
	bz *if0_end

	// *if0_consequent
	// Error state: Player already joined the game!
	err

*if0_end:
	// contracts/TownHall.algo.ts:263
	// assert(depositTxn.amount >= LSIG_FUND_AMOUNT + SLASH_DEPOSIT_AMOUNT, 'Invalid FunderLSig amount!')
	frame_dig -1 // depositTxn: PayTxn
	gtxns Amount
	pushint 1150000
	>=

	// Invalid FunderLSig amount!
	assert

	// contracts/TownHall.algo.ts:265
	// g = extract3(NIZK_DLOG, 0, BLS12381G1_LENGTH)
	frame_dig -2 // NIZK_DLOG: bytes
	extract 0 96
	frame_bury 0 // g: byte[]

	// contracts/TownHall.algo.ts:266
	// RingPK = extract3(NIZK_DLOG, BLS12381G1_LENGTH, BLS12381G1_LENGTH)
	frame_dig -2 // NIZK_DLOG: bytes
	extract 96 96
	frame_bury 1 // RingPK: byte[]

	// contracts/TownHall.algo.ts:267
	// v = extract3(NIZK_DLOG, BLS12381G1_LENGTH * 2, BLS12381G1_LENGTH)
	frame_dig -2 // NIZK_DLOG: bytes
	extract 192 96
	frame_bury 2 // v: byte[]

	// contracts/TownHall.algo.ts:268
	// z = extract3(NIZK_DLOG, BLS12381G1_LENGTH * 3, 32)
	frame_dig -2 // NIZK_DLOG: bytes
	pushint 288
	intc 5 // 32
	extract3
	frame_bury 3 // z: byte[]

	// contracts/TownHall.algo.ts:273
	// assert(this.dlog(g, RingPK, v, z), 'DLOG NIZK Proof failed!')
	frame_dig 3 // z: byte[]
	frame_dig 2 // v: byte[]
	frame_dig 1 // RingPK: byte[]
	frame_dig 0 // g: byte[]
	callsub dlog

	// DLOG NIZK Proof failed!
	assert

	// *if1_condition
	// contracts/TownHall.algo.ts:275
	// !this.quickAccessPKBoxes(0).exists
	bytec 19 // 0x0000000000000000
	box_len
	swap
	pop
	!
	bz *if1_else

	// *if1_consequent
	// contracts/TownHall.algo.ts:276
	// this.quickAccessPKBoxes(0).create(BLS12381G1_LENGTH)
	bytec 19 // 0x0000000000000000
	intc 12 // 96
	box_create
	pop
	b *if1_end

*if1_else:
	// contracts/TownHall.algo.ts:278
	// this.quickAccessPKBoxes(0).resize(this.quickAccessPKBoxes(0).size + BLS12381G1_LENGTH)
	bytec 19 // 0x0000000000000000
	dup
	box_len

	// box value does not exist: this.quickAccessPKBoxes(0).size
	assert
	intc 12 // 96
	+
	box_resize

*if1_end:
	// contracts/TownHall.algo.ts:282
	// assert(this.quickAccessPKBoxes(0).exists, 'PK Box failed to be created.')
	bytec 19 // 0x0000000000000000
	box_len
	swap
	pop

	// PK Box failed to be created.
	assert

	// contracts/TownHall.algo.ts:284
	// this.quickAccessPKBoxes(0).replace(this.playersJoined.value * BLS12381G1_LENGTH, RingPK)
	bytec 19 // 0x0000000000000000
	bytec 23 //  "playersJoined"
	app_global_get
	intc 12 // 96
	*
	frame_dig 1 // RingPK: byte[]
	box_replace

	// contracts/TownHall.algo.ts:285
	// this.playersJoined.value += 1
	bytec 23 //  "playersJoined"
	app_global_get
	intc 0 // 1
	+
	bytec 23 //  "playersJoined"
	swap
	app_global_put

	// contracts/TownHall.algo.ts:287
	// assert(this.lsigFunderAddress.value !== globals.zeroAddress, 'Error state: LSig Funder Address not set!')
	bytec 21 //  "lsigFunderAddress"
	app_global_get
	global ZeroAddress
	!=

	// Error state: LSig Funder Address not set!
	assert

	// contracts/TownHall.algo.ts:290
	// sendPayment({
	//       amount: LSIG_FUND_AMOUNT,
	//       receiver: this.lsigFunderAddress.value,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts/TownHall.algo.ts:291
	// amount: LSIG_FUND_AMOUNT
	intc 13 // 150000
	itxn_field Amount

	// contracts/TownHall.algo.ts:292
	// receiver: this.lsigFunderAddress.value
	bytec 21 //  "lsigFunderAddress"
	app_global_get
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// *if2_condition
	// contracts/TownHall.algo.ts:295
	// this.player1AlgoAddr.value === globals.zeroAddress
	bytec 4 //  "player1AlgoAddr"
	app_global_get
	global ZeroAddress
	==
	bz *if2_end

	// *if2_consequent
	// contracts/TownHall.algo.ts:296
	// this.player1AlgoAddr.value = this.txn.sender
	bytec 4 //  "player1AlgoAddr"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:297
	// return;
	retsub

*if2_end:
	// *if3_condition
	// contracts/TownHall.algo.ts:299
	// this.player2AlgoAddr.value === globals.zeroAddress
	bytec 5 //  "player2AlgoAddr"
	app_global_get
	global ZeroAddress
	==
	bz *if3_end

	// *if3_consequent
	// contracts/TownHall.algo.ts:300
	// this.player2AlgoAddr.value = this.txn.sender
	bytec 5 //  "player2AlgoAddr"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:301
	// return;
	retsub

*if3_end:
	// *if4_condition
	// contracts/TownHall.algo.ts:303
	// this.player3AlgoAddr.value === globals.zeroAddress
	bytec 6 //  "player3AlgoAddr"
	app_global_get
	global ZeroAddress
	==
	bz *if4_end

	// *if4_consequent
	// contracts/TownHall.algo.ts:304
	// this.player3AlgoAddr.value = this.txn.sender
	bytec 6 //  "player3AlgoAddr"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:305
	// return;
	retsub

*if4_end:
	// *if5_condition
	// contracts/TownHall.algo.ts:307
	// this.player4AlgoAddr.value === globals.zeroAddress
	bytec 7 //  "player4AlgoAddr"
	app_global_get
	global ZeroAddress
	==
	bz *if5_end

	// *if5_consequent
	// contracts/TownHall.algo.ts:308
	// this.player4AlgoAddr.value = this.txn.sender
	bytec 7 //  "player4AlgoAddr"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:309
	// return;
	retsub

*if5_end:
	// *if6_condition
	// contracts/TownHall.algo.ts:311
	// this.player5AlgoAddr.value === globals.zeroAddress
	bytec 8 //  "player5AlgoAddr"
	app_global_get
	global ZeroAddress
	==
	bz *if6_end

	// *if6_consequent
	// contracts/TownHall.algo.ts:312
	// this.player5AlgoAddr.value = this.txn.sender
	bytec 8 //  "player5AlgoAddr"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:313
	// return;
	retsub

*if6_end:
	// *if7_condition
	// contracts/TownHall.algo.ts:315
	// this.player6AlgoAddr.value === globals.zeroAddress
	bytec 9 //  "player6AlgoAddr"
	app_global_get
	global ZeroAddress
	==
	bz *if7_end

	// *if7_consequent
	// contracts/TownHall.algo.ts:316
	// this.player6AlgoAddr.value = this.txn.sender
	bytec 9 //  "player6AlgoAddr"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:317
	// this.gameState.value = stateAssignRole
	bytec 0 //  "gameState"
	intc 2 // 2
	app_global_put

	// contracts/TownHall.algo.ts:318
	// return;
	retsub

*if7_end:
	// Invalid state! Error, game should have moved to the next stage already.
	err
	retsub

// assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void
*abi_route_assignRole:
	// ringLSigTxn5: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (ringLSigTxn5) for assignRole must be a pay transaction
	assert

	// ringLSigTxn4: pay
	txn GroupIndex
	intc 2 // 2
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 1 (ringLSigTxn4) for assignRole must be a pay transaction
	assert

	// ringLSigTxn3: pay
	txn GroupIndex
	intc 4 // 3
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 2 (ringLSigTxn3) for assignRole must be a pay transaction
	assert

	// ringLSigTxn2: pay
	txn GroupIndex
	intc 7 // 4
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 3 (ringLSigTxn2) for assignRole must be a pay transaction
	assert

	// ringLSigTxn1: pay
	txn GroupIndex
	intc 8 // 5
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 4 (ringLSigTxn1) for assignRole must be a pay transaction
	assert

	// ringLSigTxn0: pay
	txn GroupIndex
	intc 3 // 6
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 5 (ringLSigTxn0) for assignRole must be a pay transaction
	assert

	// funderLSigTxn: pay
	txn GroupIndex
	intc 9 // 7
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 6 (funderLSigTxn) for assignRole must be a pay transaction
	assert

	// challenges: byte[]
	txna ApplicationArgs 5
	extract 2 0

	// sig: byte[]
	txna ApplicationArgs 4
	extract 2 0

	// keyImage: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// pkAll: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// msg: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void
	callsub assignRole
	intc 0 // 1
	return

// assignRole(msg: bytes, pkAll: bytes, keyImage: bytes, sig: bytes, challenges: bytes, funderLSigTxn: PayTxn, ringLSigTxn0: PayTxn, ringLSigTxn1: PayTxn, ringLSigTxn2: PayTxn, ringLSigTxn3: PayTxn, ringLSigTxn4: PayTxn, ringLSigTxn5: PayTxn): void
assignRole:
	proto 12 0

	// contracts/TownHall.algo.ts:338
	// assert(this.gameState.value === stateAssignRole, 'Invalid method call: Game is not in Assign Role state.')
	bytec 0 //  "gameState"
	app_global_get
	intc 2 // 2
	==

	// Invalid method call: Game is not in Assign Role state.
	assert

	// contracts/TownHall.algo.ts:347
	// assert(
	//       !this.hashFilter(rawBytes(sha256(keyImage))).exists,
	//       'KeyImage already in store. Are you trying to double-dip with your ring signature?'
	//     )
	frame_dig -3 // keyImage: bytes
	sha256
	box_len
	swap
	pop
	!

	// KeyImage already in store. Are you trying to double-dip with your ring signature?
	assert

	// contracts/TownHall.algo.ts:351
	// this.hashFilter(rawBytes(sha256(keyImage))).create(0)
	frame_dig -3 // keyImage: bytes
	sha256
	intc 1 // 0
	box_create
	pop

	// contracts/TownHall.algo.ts:355
	// assert(msg === concat(rawBytes(this.txn.sender), rawBytes(this.app.address)))
	frame_dig -1 // msg: bytes
	txn Sender
	global CurrentApplicationAddress
	concat
	==
	assert

	// contracts/TownHall.algo.ts:358
	// assert(
	//       this.quickAccessPKBoxes(0).extract(0, 6 * BLS12381G1_LENGTH) === pkAll,
	//       'Invalid PKs! Are you trying to pass in a different ring of PKs?'
	//     )
	bytec 19 // 0x0000000000000000
	intc 1 // 0
	pushint 576
	box_extract
	frame_dig -2 // pkAll: bytes
	==

	// Invalid PKs! Are you trying to pass in a different ring of PKs?
	assert

	// contracts/TownHall.algo.ts:365
	// verifyTxn(ringLSigTxn0, { sender: Address.fromBytes(RingLinkLSig0.address()) })
	// verify sender
	frame_dig -7 // ringLSigTxn0: PayTxn
	gtxns Sender
	pushbytes 0xccb428bad86159a80e1e9ca424eba36612f491d090a229071c034ad4bfdebac7 // addr "ZS2CROWYMFM2QDQ6TSSCJ25DMYJPJEOQSCRCSBY4ANFNJP66XLDV65KPBQ"
	==

	// transaction verification failed: {"txn":"ringLSigTxn0","field":"sender","expected":"Address.fromBytes(RingLinkLSig0.address())"}
	assert

	// contracts/TownHall.algo.ts:366
	// verifyTxn(ringLSigTxn1, { sender: Address.fromBytes(RingLinkLSig1.address()) })
	// verify sender
	frame_dig -8 // ringLSigTxn1: PayTxn
	gtxns Sender
	pushbytes 0xe06e64bc00f7ba65ab52e654af1c44063bd680e054dc9e7920d51ba2233b5465 // addr "4BXGJPAA665GLK2S4ZKK6HCEAY55NAHAKTOJ46JA2UN2EIZ3KRSR7RMDAQ"
	==

	// transaction verification failed: {"txn":"ringLSigTxn1","field":"sender","expected":"Address.fromBytes(RingLinkLSig1.address())"}
	assert

	// contracts/TownHall.algo.ts:367
	// verifyTxn(ringLSigTxn2, { sender: Address.fromBytes(RingLinkLSig2.address()) })
	// verify sender
	frame_dig -9 // ringLSigTxn2: PayTxn
	gtxns Sender
	pushbytes 0x590773bc37bf89cdccf2d30d58a17fd7333a81769c35df31e01fb2adcf762984 // addr "LEDXHPBXX6E43THS2MGVRIL724ZTVALWTQ256MPAD6ZK3T3WFGCJNL2H2Q"
	==

	// transaction verification failed: {"txn":"ringLSigTxn2","field":"sender","expected":"Address.fromBytes(RingLinkLSig2.address())"}
	assert

	// contracts/TownHall.algo.ts:368
	// verifyTxn(ringLSigTxn3, { sender: Address.fromBytes(RingLinkLSig3.address()) })
	// verify sender
	frame_dig -10 // ringLSigTxn3: PayTxn
	gtxns Sender
	pushbytes 0x5d09f2e33de04285304bac6618d69ecf9a939f3d256c6eadc8bad676bba0f36b // addr "LUE7FYZ54BBIKMCLVRTBRVU6Z6NJHHZ5EVWG5LOIXLLHNO5A6NVVZMQAK4"
	==

	// transaction verification failed: {"txn":"ringLSigTxn3","field":"sender","expected":"Address.fromBytes(RingLinkLSig3.address())"}
	assert

	// contracts/TownHall.algo.ts:369
	// verifyTxn(ringLSigTxn4, { sender: Address.fromBytes(RingLinkLSig4.address()) })
	// verify sender
	frame_dig -11 // ringLSigTxn4: PayTxn
	gtxns Sender
	pushbytes 0x3fcf7f2f14867e8c84db19467e173f02b4aa7b63e670b6c6a71de7ce3cb4a1ae // addr "H7HX6LYUQZ7IZBG3DFDH4FZ7AK2KU63D4ZYLNRVHDXT44PFUUGXA2ANMGM"
	==

	// transaction verification failed: {"txn":"ringLSigTxn4","field":"sender","expected":"Address.fromBytes(RingLinkLSig4.address())"}
	assert

	// contracts/TownHall.algo.ts:370
	// verifyTxn(ringLSigTxn5, { sender: Address.fromBytes(RingLinkLSig5.address()) })
	// verify sender
	frame_dig -12 // ringLSigTxn5: PayTxn
	gtxns Sender
	pushbytes 0x01fc10a8cf3afa527bd713fc15d5c254c1b80ff82a6e0291b0e01fed145c454b // addr "AH6BBKGPHL5FE66XCP6BLVOCKTA3QD7YFJXAFENQ4AP62FC4IVFTFDHUP4"
	==

	// transaction verification failed: {"txn":"ringLSigTxn5","field":"sender","expected":"Address.fromBytes(RingLinkLSig5.address())"}
	assert

	// contracts/TownHall.algo.ts:373
	// verifyTxn(funderLSigTxn, {
	//       sender: Address.fromBytes(this.lsigFunderAddress.value),
	//       receiver: this.txn.sender,
	//       amount: LSIG_FUND_AMOUNT,
	//     })
	// verify sender
	frame_dig -6 // funderLSigTxn: PayTxn
	gtxns Sender
	bytec 21 //  "lsigFunderAddress"
	app_global_get
	==

	// transaction verification failed: {"txn":"funderLSigTxn","field":"sender","expected":"Address.fromBytes(this.lsigFunderAddress.value)"}
	assert

	// verify receiver
	frame_dig -6 // funderLSigTxn: PayTxn
	gtxns Receiver
	txn Sender
	==

	// transaction verification failed: {"txn":"funderLSigTxn","field":"receiver","expected":"this.txn.sender"}
	assert

	// verify amount
	frame_dig -6 // funderLSigTxn: PayTxn
	gtxns Amount
	intc 13 // 150000
	==

	// transaction verification failed: {"txn":"funderLSigTxn","field":"amount","expected":"LSIG_FUND_AMOUNT"}
	assert

	// *if8_condition
	// contracts/TownHall.algo.ts:384
	// this.mafia.value === globals.zeroAddress
	bytec 20 //  "mafia"
	app_global_get
	global ZeroAddress
	==
	bz *if8_end

	// *if8_consequent
	// contracts/TownHall.algo.ts:385
	// this.mafia.value = this.txn.sender
	bytec 20 //  "mafia"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:386
	// this.mafiaKeyImage.value = keyImage
	bytec 32 //  "mafiaKeyImage"
	frame_dig -3 // keyImage: bytes
	app_global_put

	// contracts/TownHall.algo.ts:387
	// return;
	retsub

*if8_end:
	// *if9_condition
	// contracts/TownHall.algo.ts:389
	// this.doctor.value === globals.zeroAddress
	bytec 11 //  "doctor"
	app_global_get
	global ZeroAddress
	==
	bz *if9_end

	// *if9_consequent
	// contracts/TownHall.algo.ts:390
	// this.doctor.value = this.txn.sender
	bytec 11 //  "doctor"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:391
	// this.doctorKeyImage.value = keyImage
	bytec 31 //  "doctorKeyImage"
	frame_dig -3 // keyImage: bytes
	app_global_put

	// contracts/TownHall.algo.ts:392
	// return;
	retsub

*if9_end:
	// *if10_condition
	// contracts/TownHall.algo.ts:394
	// this.farmer.value === globals.zeroAddress
	bytec 35 //  "farmer"
	app_global_get
	global ZeroAddress
	==
	bz *if10_end

	// *if10_consequent
	// contracts/TownHall.algo.ts:395
	// this.farmer.value = this.txn.sender
	bytec 35 //  "farmer"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:396
	// return;
	retsub

*if10_end:
	// *if11_condition
	// contracts/TownHall.algo.ts:398
	// this.butcher.value === globals.zeroAddress
	bytec 33 //  "butcher"
	app_global_get
	global ZeroAddress
	==
	bz *if11_end

	// *if11_consequent
	// contracts/TownHall.algo.ts:399
	// this.butcher.value = this.txn.sender
	bytec 33 //  "butcher"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:400
	// return;
	retsub

*if11_end:
	// *if12_condition
	// contracts/TownHall.algo.ts:402
	// this.innkeep.value === globals.zeroAddress
	bytec 34 //  "innkeep"
	app_global_get
	global ZeroAddress
	==
	bz *if12_end

	// *if12_consequent
	// contracts/TownHall.algo.ts:403
	// this.innkeep.value = this.txn.sender
	bytec 34 //  "innkeep"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:404
	// return;
	retsub

*if12_end:
	// *if13_condition
	// contracts/TownHall.algo.ts:406
	// this.grocer.value === globals.zeroAddress
	bytec 36 //  "grocer"
	app_global_get
	global ZeroAddress
	==
	bz *if13_end

	// *if13_consequent
	// contracts/TownHall.algo.ts:407
	// this.grocer.value = this.txn.sender
	bytec 36 //  "grocer"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:408
	// this.gameState.value = stateDayStageVote
	bytec 0 //  "gameState"
	intc 4 // 3
	app_global_put

	// contracts/TownHall.algo.ts:409
	// return;
	retsub

*if13_end:
	// Invalid state! Error, game should have moved to the next stage already.
	err
	retsub

// dayStageVote(uint64)void
*abi_route_dayStageVote:
	// vote: uint64
	txna ApplicationArgs 1
	btoi

	// execute dayStageVote(uint64)void
	callsub dayStageVote
	intc 0 // 1
	return

// dayStageVote(vote: uint64): void
dayStageVote:
	proto 1 0

	// contracts/TownHall.algo.ts:416
	// assert(this.gameState.value === stateDayStageVote, 'Invalid method call: Game is not in Day Stage Vote state.')
	bytec 0 //  "gameState"
	app_global_get
	intc 4 // 3
	==

	// Invalid method call: Game is not in Day Stage Vote state.
	assert

	// contracts/TownHall.algo.ts:418
	// assert(vote > 0 && vote < 7, 'Invalid vote: Vote must be int 1 <= n <= 6.')
	frame_dig -1 // vote: uint64
	intc 1 // 0
	>
	dup
	bz *skip_and0
	frame_dig -1 // vote: uint64
	intc 9 // 7
	<
	&&

*skip_and0:
	// Invalid vote: Vote must be int 1 <= n <= 6.
	assert

	// *if14_condition
	// contracts/TownHall.algo.ts:421
	// !(
	//         this.txn.sender === this.player1AlgoAddr.value ||
	//         this.txn.sender === this.player2AlgoAddr.value ||
	//         this.txn.sender === this.player3AlgoAddr.value ||
	//         this.txn.sender === this.player4AlgoAddr.value ||
	//         this.txn.sender === this.player5AlgoAddr.value ||
	//         this.txn.sender === this.player6AlgoAddr.value
	//       )
	txn Sender
	bytec 4 //  "player1AlgoAddr"
	app_global_get
	==
	dup
	bnz *skip_or5
	txn Sender
	bytec 5 //  "player2AlgoAddr"
	app_global_get
	==
	||

*skip_or5:
	dup
	bnz *skip_or6
	txn Sender
	bytec 6 //  "player3AlgoAddr"
	app_global_get
	==
	||

*skip_or6:
	dup
	bnz *skip_or7
	txn Sender
	bytec 7 //  "player4AlgoAddr"
	app_global_get
	==
	||

*skip_or7:
	dup
	bnz *skip_or8
	txn Sender
	bytec 8 //  "player5AlgoAddr"
	app_global_get
	==
	||

*skip_or8:
	dup
	bnz *skip_or9
	txn Sender
	bytec 9 //  "player6AlgoAddr"
	app_global_get
	==
	||

*skip_or9:
	!
	bz *if14_end

	// *if14_consequent
	// Illegal call: Address sender not allowed to vote.
	err

*if14_end:
	// *if15_condition
	// contracts/TownHall.algo.ts:433
	// vote === 1 && this.player1AlgoAddr.value !== globals.zeroAddress
	frame_dig -1 // vote: uint64
	intc 0 // 1
	==
	dup
	bz *skip_and1
	bytec 4 //  "player1AlgoAddr"
	app_global_get
	global ZeroAddress
	!=
	&&

*skip_and1:
	bz *if15_elseif1_condition

	// *if15_consequent
	// contracts/TownHall.algo.ts:434
	// this.player1ReceivedVotes.value += 1
	bytec 13 //  "player1ReceivedVotes"
	app_global_get
	intc 0 // 1
	+
	bytec 13 //  "player1ReceivedVotes"
	swap
	app_global_put
	b *if15_end

*if15_elseif1_condition:
	// contracts/TownHall.algo.ts:435
	// vote === 2 && this.player2AlgoAddr.value !== globals.zeroAddress
	frame_dig -1 // vote: uint64
	intc 2 // 2
	==
	dup
	bz *skip_and2
	bytec 5 //  "player2AlgoAddr"
	app_global_get
	global ZeroAddress
	!=
	&&

*skip_and2:
	bz *if15_elseif2_condition

	// *if15_elseif1_consequent
	// contracts/TownHall.algo.ts:436
	// this.player2ReceivedVotes.value += 1
	bytec 14 //  "player2ReceivedVotes"
	app_global_get
	intc 0 // 1
	+
	bytec 14 //  "player2ReceivedVotes"
	swap
	app_global_put
	b *if15_end

*if15_elseif2_condition:
	// contracts/TownHall.algo.ts:437
	// vote === 3 && this.player3AlgoAddr.value !== globals.zeroAddress
	frame_dig -1 // vote: uint64
	intc 4 // 3
	==
	dup
	bz *skip_and3
	bytec 6 //  "player3AlgoAddr"
	app_global_get
	global ZeroAddress
	!=
	&&

*skip_and3:
	bz *if15_elseif3_condition

	// *if15_elseif2_consequent
	// contracts/TownHall.algo.ts:438
	// this.player3ReceivedVotes.value += 1
	bytec 15 //  "player3ReceivedVotes"
	app_global_get
	intc 0 // 1
	+
	bytec 15 //  "player3ReceivedVotes"
	swap
	app_global_put
	b *if15_end

*if15_elseif3_condition:
	// contracts/TownHall.algo.ts:439
	// vote === 4 && this.player4AlgoAddr.value !== globals.zeroAddress
	frame_dig -1 // vote: uint64
	intc 7 // 4
	==
	dup
	bz *skip_and4
	bytec 7 //  "player4AlgoAddr"
	app_global_get
	global ZeroAddress
	!=
	&&

*skip_and4:
	bz *if15_elseif4_condition

	// *if15_elseif3_consequent
	// contracts/TownHall.algo.ts:440
	// this.player4ReceivedVotes.value += 1
	bytec 16 //  "player4ReceivedVotes"
	app_global_get
	intc 0 // 1
	+
	bytec 16 //  "player4ReceivedVotes"
	swap
	app_global_put
	b *if15_end

*if15_elseif4_condition:
	// contracts/TownHall.algo.ts:441
	// vote === 5 && this.player5AlgoAddr.value !== globals.zeroAddress
	frame_dig -1 // vote: uint64
	intc 8 // 5
	==
	dup
	bz *skip_and5
	bytec 8 //  "player5AlgoAddr"
	app_global_get
	global ZeroAddress
	!=
	&&

*skip_and5:
	bz *if15_elseif5_condition

	// *if15_elseif4_consequent
	// contracts/TownHall.algo.ts:442
	// this.player5ReceivedVotes.value += 1
	bytec 17 //  "player5ReceivedVotes"
	app_global_get
	intc 0 // 1
	+
	bytec 17 //  "player5ReceivedVotes"
	swap
	app_global_put
	b *if15_end

*if15_elseif5_condition:
	// contracts/TownHall.algo.ts:443
	// vote === 6 && this.player6AlgoAddr.value !== globals.zeroAddress
	frame_dig -1 // vote: uint64
	intc 3 // 6
	==
	dup
	bz *skip_and6
	bytec 9 //  "player6AlgoAddr"
	app_global_get
	global ZeroAddress
	!=
	&&

*skip_and6:
	bz *if15_else

	// *if15_elseif5_consequent
	// contracts/TownHall.algo.ts:444
	// this.player6ReceivedVotes.value += 1
	bytec 18 //  "player6ReceivedVotes"
	app_global_get
	intc 0 // 1
	+
	bytec 18 //  "player6ReceivedVotes"
	swap
	app_global_put
	b *if15_end

*if15_else:
	// Invalid vote: Is player still alive?
	err

*if15_end:
	// *if16_condition
	// contracts/TownHall.algo.ts:449
	// this.txn.sender === this.player1AlgoAddr.value && this.player1HasVoted.value === 0
	txn Sender
	bytec 4 //  "player1AlgoAddr"
	app_global_get
	==
	dup
	bz *skip_and7
	bytec 24 //  "player1HasVoted"
	app_global_get
	intc 1 // 0
	==
	&&

*skip_and7:
	bz *if16_elseif1_condition

	// *if16_consequent
	// contracts/TownHall.algo.ts:450
	// this.player1HasVoted.value = 1
	bytec 24 //  "player1HasVoted"
	intc 0 // 1
	app_global_put
	b *if16_end

*if16_elseif1_condition:
	// contracts/TownHall.algo.ts:451
	// this.txn.sender === this.player2AlgoAddr.value && this.player2HasVoted.value === 0
	txn Sender
	bytec 5 //  "player2AlgoAddr"
	app_global_get
	==
	dup
	bz *skip_and8
	bytec 25 //  "player2HasVoted"
	app_global_get
	intc 1 // 0
	==
	&&

*skip_and8:
	bz *if16_elseif2_condition

	// *if16_elseif1_consequent
	// contracts/TownHall.algo.ts:452
	// this.player2HasVoted.value = 1
	bytec 25 //  "player2HasVoted"
	intc 0 // 1
	app_global_put
	b *if16_end

*if16_elseif2_condition:
	// contracts/TownHall.algo.ts:453
	// this.txn.sender === this.player3AlgoAddr.value && this.player3HasVoted.value === 0
	txn Sender
	bytec 6 //  "player3AlgoAddr"
	app_global_get
	==
	dup
	bz *skip_and9
	bytec 26 //  "player3HasVoted"
	app_global_get
	intc 1 // 0
	==
	&&

*skip_and9:
	bz *if16_elseif3_condition

	// *if16_elseif2_consequent
	// contracts/TownHall.algo.ts:454
	// this.player3HasVoted.value = 1
	bytec 26 //  "player3HasVoted"
	intc 0 // 1
	app_global_put
	b *if16_end

*if16_elseif3_condition:
	// contracts/TownHall.algo.ts:455
	// this.txn.sender === this.player4AlgoAddr.value && this.player4HasVoted.value === 0
	txn Sender
	bytec 7 //  "player4AlgoAddr"
	app_global_get
	==
	dup
	bz *skip_and10
	bytec 27 //  "player4HasVoted"
	app_global_get
	intc 1 // 0
	==
	&&

*skip_and10:
	bz *if16_elseif4_condition

	// *if16_elseif3_consequent
	// contracts/TownHall.algo.ts:456
	// this.player4HasVoted.value = 1
	bytec 27 //  "player4HasVoted"
	intc 0 // 1
	app_global_put
	b *if16_end

*if16_elseif4_condition:
	// contracts/TownHall.algo.ts:457
	// this.txn.sender === this.player5AlgoAddr.value && this.player5HasVoted.value === 0
	txn Sender
	bytec 8 //  "player5AlgoAddr"
	app_global_get
	==
	dup
	bz *skip_and11
	bytec 28 //  "player5HasVoted"
	app_global_get
	intc 1 // 0
	==
	&&

*skip_and11:
	bz *if16_elseif5_condition

	// *if16_elseif4_consequent
	// contracts/TownHall.algo.ts:458
	// this.player5HasVoted.value = 1
	bytec 28 //  "player5HasVoted"
	intc 0 // 1
	app_global_put
	b *if16_end

*if16_elseif5_condition:
	// contracts/TownHall.algo.ts:459
	// this.txn.sender === this.player6AlgoAddr.value && this.player6HasVoted.value === 0
	txn Sender
	bytec 9 //  "player6AlgoAddr"
	app_global_get
	==
	dup
	bz *skip_and12
	bytec 29 //  "player6HasVoted"
	app_global_get
	intc 1 // 0
	==
	&&

*skip_and12:
	bz *if16_else

	// *if16_elseif5_consequent
	// contracts/TownHall.algo.ts:460
	// this.player6HasVoted.value = 1
	bytec 29 //  "player6HasVoted"
	intc 0 // 1
	app_global_put
	b *if16_end

*if16_else:
	// Address not allowed to vote.
	err

*if16_end:
	// contracts/TownHall.algo.ts:465
	// this.playersVoted.value += 1
	bytec 22 //  "playersVoted"
	app_global_get
	intc 0 // 1
	+
	bytec 22 //  "playersVoted"
	swap
	app_global_put

	// *if17_condition
	// contracts/TownHall.algo.ts:467
	// this.playersVoted.value === this.playersAlive.value
	bytec 22 //  "playersVoted"
	app_global_get
	bytec 12 //  "playersAlive"
	app_global_get
	==
	bz *if17_end

	// *if17_consequent
	// contracts/TownHall.algo.ts:469
	// this.gameState.value = stateDayStageEliminate
	bytec 0 //  "gameState"
	intc 7 // 4
	app_global_put

	// contracts/TownHall.algo.ts:472
	// this.playersVoted.value = 0
	bytec 22 //  "playersVoted"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:473
	// this.player1HasVoted.value = 0
	bytec 24 //  "player1HasVoted"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:474
	// this.player2HasVoted.value = 0
	bytec 25 //  "player2HasVoted"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:475
	// this.player3HasVoted.value = 0
	bytec 26 //  "player3HasVoted"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:476
	// this.player4HasVoted.value = 0
	bytec 27 //  "player4HasVoted"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:477
	// this.player5HasVoted.value = 0
	bytec 28 //  "player5HasVoted"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:478
	// this.player6HasVoted.value = 0
	bytec 29 //  "player6HasVoted"
	intc 1 // 0
	app_global_put

*if17_end:
	retsub

// dayStageEliminate()void
*abi_route_dayStageEliminate:
	// execute dayStageEliminate()void
	callsub dayStageEliminate
	intc 0 // 1
	return

// dayStageEliminate(): void
dayStageEliminate:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x
	dup

	// contracts/TownHall.algo.ts:485
	// assert(
	//       this.gameState.value === stateDayStageEliminate,
	//       'Invalid method call: Game is not in Day Stage Eliminate state.'
	//     )
	bytec 0 //  "gameState"
	app_global_get
	intc 7 // 4
	==

	// Invalid method call: Game is not in Day Stage Eliminate state.
	assert

	// contracts/TownHall.algo.ts:490
	// this.justEliminatedPlayer.value = globals.zeroAddress
	bytec 1 //  "justEliminatedPlayer"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:491
	// topVotes = 0
	intc 1 // 0
	frame_bury 0 // topVotes: uint64

	// contracts/TownHall.algo.ts:497
	// even = globals.round % 2 === 0
	global Round
	intc 2 // 2
	%
	intc 1 // 0
	==
	frame_bury 1 // even: bool

	// *if18_condition
	// contracts/TownHall.algo.ts:499
	// this.player1ReceivedVotes.value > topVotes || (this.player1ReceivedVotes.value === topVotes && even)
	bytec 13 //  "player1ReceivedVotes"
	app_global_get
	frame_dig 0 // topVotes: uint64
	>
	dup
	bnz *skip_or10
	bytec 13 //  "player1ReceivedVotes"
	app_global_get
	frame_dig 0 // topVotes: uint64
	==
	dup
	bz *skip_and13
	frame_dig 1 // even: bool
	&&

*skip_and13:
	||

*skip_or10:
	bz *if18_end

	// *if18_consequent
	// contracts/TownHall.algo.ts:500
	// this.justEliminatedPlayer.value = this.player1AlgoAddr.value
	bytec 1 //  "justEliminatedPlayer"
	bytec 4 //  "player1AlgoAddr"
	app_global_get
	app_global_put

	// contracts/TownHall.algo.ts:501
	// topVotes = this.player1ReceivedVotes.value
	bytec 13 //  "player1ReceivedVotes"
	app_global_get
	frame_bury 0 // topVotes: uint64

*if18_end:
	// *if19_condition
	// contracts/TownHall.algo.ts:504
	// this.player2ReceivedVotes.value > topVotes || (this.player2ReceivedVotes.value === topVotes && even)
	bytec 14 //  "player2ReceivedVotes"
	app_global_get
	frame_dig 0 // topVotes: uint64
	>
	dup
	bnz *skip_or11
	bytec 14 //  "player2ReceivedVotes"
	app_global_get
	frame_dig 0 // topVotes: uint64
	==
	dup
	bz *skip_and14
	frame_dig 1 // even: bool
	&&

*skip_and14:
	||

*skip_or11:
	bz *if19_end

	// *if19_consequent
	// contracts/TownHall.algo.ts:505
	// this.justEliminatedPlayer.value = this.player2AlgoAddr.value
	bytec 1 //  "justEliminatedPlayer"
	bytec 5 //  "player2AlgoAddr"
	app_global_get
	app_global_put

	// contracts/TownHall.algo.ts:506
	// topVotes = this.player2ReceivedVotes.value
	bytec 14 //  "player2ReceivedVotes"
	app_global_get
	frame_bury 0 // topVotes: uint64

*if19_end:
	// *if20_condition
	// contracts/TownHall.algo.ts:509
	// this.player3ReceivedVotes.value > topVotes || (this.player3ReceivedVotes.value === topVotes && even)
	bytec 15 //  "player3ReceivedVotes"
	app_global_get
	frame_dig 0 // topVotes: uint64
	>
	dup
	bnz *skip_or12
	bytec 15 //  "player3ReceivedVotes"
	app_global_get
	frame_dig 0 // topVotes: uint64
	==
	dup
	bz *skip_and15
	frame_dig 1 // even: bool
	&&

*skip_and15:
	||

*skip_or12:
	bz *if20_end

	// *if20_consequent
	// contracts/TownHall.algo.ts:510
	// this.justEliminatedPlayer.value = this.player3AlgoAddr.value
	bytec 1 //  "justEliminatedPlayer"
	bytec 6 //  "player3AlgoAddr"
	app_global_get
	app_global_put

	// contracts/TownHall.algo.ts:511
	// topVotes = this.player3ReceivedVotes.value
	bytec 15 //  "player3ReceivedVotes"
	app_global_get
	frame_bury 0 // topVotes: uint64

*if20_end:
	// *if21_condition
	// contracts/TownHall.algo.ts:514
	// this.player4ReceivedVotes.value > topVotes || (this.player4ReceivedVotes.value === topVotes && even)
	bytec 16 //  "player4ReceivedVotes"
	app_global_get
	frame_dig 0 // topVotes: uint64
	>
	dup
	bnz *skip_or13
	bytec 16 //  "player4ReceivedVotes"
	app_global_get
	frame_dig 0 // topVotes: uint64
	==
	dup
	bz *skip_and16
	frame_dig 1 // even: bool
	&&

*skip_and16:
	||

*skip_or13:
	bz *if21_end

	// *if21_consequent
	// contracts/TownHall.algo.ts:515
	// this.justEliminatedPlayer.value = this.player4AlgoAddr.value
	bytec 1 //  "justEliminatedPlayer"
	bytec 7 //  "player4AlgoAddr"
	app_global_get
	app_global_put

	// contracts/TownHall.algo.ts:516
	// topVotes = this.player4ReceivedVotes.value
	bytec 16 //  "player4ReceivedVotes"
	app_global_get
	frame_bury 0 // topVotes: uint64

*if21_end:
	// *if22_condition
	// contracts/TownHall.algo.ts:519
	// this.player5ReceivedVotes.value > topVotes || (this.player5ReceivedVotes.value === topVotes && even)
	bytec 17 //  "player5ReceivedVotes"
	app_global_get
	frame_dig 0 // topVotes: uint64
	>
	dup
	bnz *skip_or14
	bytec 17 //  "player5ReceivedVotes"
	app_global_get
	frame_dig 0 // topVotes: uint64
	==
	dup
	bz *skip_and17
	frame_dig 1 // even: bool
	&&

*skip_and17:
	||

*skip_or14:
	bz *if22_end

	// *if22_consequent
	// contracts/TownHall.algo.ts:520
	// this.justEliminatedPlayer.value = this.player5AlgoAddr.value
	bytec 1 //  "justEliminatedPlayer"
	bytec 8 //  "player5AlgoAddr"
	app_global_get
	app_global_put

	// contracts/TownHall.algo.ts:521
	// topVotes = this.player5ReceivedVotes.value
	bytec 17 //  "player5ReceivedVotes"
	app_global_get
	frame_bury 0 // topVotes: uint64

*if22_end:
	// *if23_condition
	// contracts/TownHall.algo.ts:524
	// this.player6ReceivedVotes.value > topVotes || (this.player6ReceivedVotes.value === topVotes && even)
	bytec 18 //  "player6ReceivedVotes"
	app_global_get
	frame_dig 0 // topVotes: uint64
	>
	dup
	bnz *skip_or15
	bytec 18 //  "player6ReceivedVotes"
	app_global_get
	frame_dig 0 // topVotes: uint64
	==
	dup
	bz *skip_and18
	frame_dig 1 // even: bool
	&&

*skip_and18:
	||

*skip_or15:
	bz *if23_end

	// *if23_consequent
	// contracts/TownHall.algo.ts:525
	// this.justEliminatedPlayer.value = this.player6AlgoAddr.value
	bytec 1 //  "justEliminatedPlayer"
	bytec 9 //  "player6AlgoAddr"
	app_global_get
	app_global_put

	// contracts/TownHall.algo.ts:526
	// topVotes = this.player6ReceivedVotes.value
	bytec 18 //  "player6ReceivedVotes"
	app_global_get
	frame_bury 0 // topVotes: uint64

*if23_end:
	// contracts/TownHall.algo.ts:529
	// assert(this.justEliminatedPlayer.value !== globals.zeroAddress, 'Error state: Zero Address won vote!')
	bytec 1 //  "justEliminatedPlayer"
	app_global_get
	global ZeroAddress
	!=

	// Error state: Zero Address won vote!
	assert

	// contracts/TownHall.algo.ts:530
	// assert(topVotes !== 0, 'Error state: No votes were cast!')
	frame_dig 0 // topVotes: uint64
	intc 1 // 0
	!=

	// Error state: No votes were cast!
	assert

	// *if24_condition
	// contracts/TownHall.algo.ts:535
	// this.justEliminatedPlayer.value === this.player1AlgoAddr.value
	bytec 1 //  "justEliminatedPlayer"
	app_global_get
	bytec 4 //  "player1AlgoAddr"
	app_global_get
	==
	bz *if24_end

	// *if24_consequent
	// contracts/TownHall.algo.ts:536
	// this.player1AlgoAddr.value = globals.zeroAddress
	bytec 4 //  "player1AlgoAddr"
	global ZeroAddress
	app_global_put

*if24_end:
	// *if25_condition
	// contracts/TownHall.algo.ts:539
	// this.justEliminatedPlayer.value === this.player2AlgoAddr.value
	bytec 1 //  "justEliminatedPlayer"
	app_global_get
	bytec 5 //  "player2AlgoAddr"
	app_global_get
	==
	bz *if25_end

	// *if25_consequent
	// contracts/TownHall.algo.ts:540
	// this.player2AlgoAddr.value = globals.zeroAddress
	bytec 5 //  "player2AlgoAddr"
	global ZeroAddress
	app_global_put

*if25_end:
	// *if26_condition
	// contracts/TownHall.algo.ts:543
	// this.justEliminatedPlayer.value === this.player3AlgoAddr.value
	bytec 1 //  "justEliminatedPlayer"
	app_global_get
	bytec 6 //  "player3AlgoAddr"
	app_global_get
	==
	bz *if26_end

	// *if26_consequent
	// contracts/TownHall.algo.ts:544
	// this.player3AlgoAddr.value = globals.zeroAddress
	bytec 6 //  "player3AlgoAddr"
	global ZeroAddress
	app_global_put

*if26_end:
	// *if27_condition
	// contracts/TownHall.algo.ts:547
	// this.justEliminatedPlayer.value === this.player4AlgoAddr.value
	bytec 1 //  "justEliminatedPlayer"
	app_global_get
	bytec 7 //  "player4AlgoAddr"
	app_global_get
	==
	bz *if27_end

	// *if27_consequent
	// contracts/TownHall.algo.ts:548
	// this.player4AlgoAddr.value = globals.zeroAddress
	bytec 7 //  "player4AlgoAddr"
	global ZeroAddress
	app_global_put

*if27_end:
	// *if28_condition
	// contracts/TownHall.algo.ts:551
	// this.justEliminatedPlayer.value === this.player5AlgoAddr.value
	bytec 1 //  "justEliminatedPlayer"
	app_global_get
	bytec 8 //  "player5AlgoAddr"
	app_global_get
	==
	bz *if28_end

	// *if28_consequent
	// contracts/TownHall.algo.ts:552
	// this.player5AlgoAddr.value = globals.zeroAddress
	bytec 8 //  "player5AlgoAddr"
	global ZeroAddress
	app_global_put

*if28_end:
	// *if29_condition
	// contracts/TownHall.algo.ts:555
	// this.justEliminatedPlayer.value === this.player6AlgoAddr.value
	bytec 1 //  "justEliminatedPlayer"
	app_global_get
	bytec 9 //  "player6AlgoAddr"
	app_global_get
	==
	bz *if29_end

	// *if29_consequent
	// contracts/TownHall.algo.ts:556
	// this.player6AlgoAddr.value = globals.zeroAddress
	bytec 9 //  "player6AlgoAddr"
	global ZeroAddress
	app_global_put

*if29_end:
	// contracts/TownHall.algo.ts:559
	// this.playersAlive.value -= 1
	bytec 12 //  "playersAlive"
	app_global_get
	intc 0 // 1
	-
	bytec 12 //  "playersAlive"
	swap
	app_global_put

	// contracts/TownHall.algo.ts:563
	// this.player1ReceivedVotes.value = 0
	bytec 13 //  "player1ReceivedVotes"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:564
	// this.player2ReceivedVotes.value = 0
	bytec 14 //  "player2ReceivedVotes"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:565
	// this.player3ReceivedVotes.value = 0
	bytec 15 //  "player3ReceivedVotes"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:566
	// this.player4ReceivedVotes.value = 0
	bytec 16 //  "player4ReceivedVotes"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:567
	// this.player5ReceivedVotes.value = 0
	bytec 17 //  "player5ReceivedVotes"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:568
	// this.player6ReceivedVotes.value = 0
	bytec 18 //  "player6ReceivedVotes"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:570
	// this.gameState.value = stateDayStageUnmasking
	bytec 0 //  "gameState"
	intc 8 // 5
	app_global_put
	retsub

// dayStageUnmasking(byte[])void
*abi_route_dayStageUnmasking:
	// blsSk: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute dayStageUnmasking(byte[])void
	callsub dayStageUnmasking
	intc 0 // 1
	return

// dayStageUnmasking(blsSk: bytes): void
dayStageUnmasking:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x
	dupn 2

	// contracts/TownHall.algo.ts:574
	// assert(
	//       this.gameState.value === stateDayStageUnmasking,
	//       'Invalid method call: Game is not in Day Stage Reveal state.'
	//     )
	bytec 0 //  "gameState"
	app_global_get
	intc 8 // 5
	==

	// Invalid method call: Game is not in Day Stage Reveal state.
	assert

	// contracts/TownHall.algo.ts:579
	// assert(this.justEliminatedPlayer.value === this.txn.sender, 'Error state: Other player called method.')
	bytec 1 //  "justEliminatedPlayer"
	app_global_get
	txn Sender
	==

	// Error state: Other player called method.
	assert

	// contracts/TownHall.algo.ts:582
	// BLS_PK = ecScalarMul('BLS12_381g1', hex(BLS12381G1_BASEPOINT_BYTES), blsSk)
	bytec 37 // 0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1
	frame_dig -1 // blsSk: bytes
	ec_scalar_mul BLS12_381g1
	frame_bury 0 // BLS_PK: byte[]

	// contracts/TownHall.algo.ts:583
	// hashToPoint = this.hashPointToPoint(BLS_PK)
	frame_dig 0 // BLS_PK: byte[]
	callsub hashPointToPoint
	frame_bury 1 // hashToPoint: byte[]

	// contracts/TownHall.algo.ts:584
	// genKeyImage = ecScalarMul('BLS12_381g1', hashToPoint, blsSk)
	frame_dig 1 // hashToPoint: byte[]
	frame_dig -1 // blsSk: bytes
	ec_scalar_mul BLS12_381g1
	frame_bury 2 // genKeyImage: byte[]

	// *if30_condition
	// contracts/TownHall.algo.ts:586
	// genKeyImage === this.mafiaKeyImage.value
	frame_dig 2 // genKeyImage: byte[]
	bytec 32 //  "mafiaKeyImage"
	app_global_get
	==
	bz *if30_end

	// *if30_consequent
	// contracts/TownHall.algo.ts:589
	// this.mafia.value = globals.zeroAddress
	bytec 20 //  "mafia"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:590
	// this.gameState.value = stateGameOver
	bytec 0 //  "gameState"
	intc 6 // 12
	app_global_put

	// contracts/TownHall.algo.ts:591
	// return;
	retsub

*if30_end:
	// *if31_condition
	// contracts/TownHall.algo.ts:594
	// genKeyImage === this.doctorKeyImage.value
	frame_dig 2 // genKeyImage: byte[]
	bytec 31 //  "doctorKeyImage"
	app_global_get
	==
	bz *if31_end

	// *if31_consequent
	// contracts/TownHall.algo.ts:596
	// this.doctor.value = globals.zeroAddress
	bytec 11 //  "doctor"
	global ZeroAddress
	app_global_put

*if31_end:
	// contracts/TownHall.algo.ts:599
	// this.justEliminatedPlayer.value = globals.zeroAddress
	bytec 1 //  "justEliminatedPlayer"
	global ZeroAddress
	app_global_put

	// *if32_condition
	// contracts/TownHall.algo.ts:601
	// this.playersAlive.value <= 2
	bytec 12 //  "playersAlive"
	app_global_get
	intc 2 // 2
	<=
	bz *if32_end

	// *if32_consequent
	// contracts/TownHall.algo.ts:604
	// this.gameState.value = stateGameOver
	bytec 0 //  "gameState"
	intc 6 // 12
	app_global_put

	// contracts/TownHall.algo.ts:605
	// return;
	retsub

*if32_end:
	// contracts/TownHall.algo.ts:608
	// this.gameState.value = stateNightStageMafiaCommit
	bytec 0 //  "gameState"
	intc 3 // 6
	app_global_put
	retsub

// nightStageMafiaCommit(byte[])void
*abi_route_nightStageMafiaCommit:
	// commitment: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute nightStageMafiaCommit(byte[])void
	callsub nightStageMafiaCommit
	intc 0 // 1
	return

// nightStageMafiaCommit(commitment: bytes): void
nightStageMafiaCommit:
	proto 1 0

	// contracts/TownHall.algo.ts:612
	// assert(
	//       this.gameState.value === stateNightStageMafiaCommit,
	//       'Invalid method call: Game is not in Night Stage Maffia Commit state.'
	//     )
	bytec 0 //  "gameState"
	app_global_get
	intc 3 // 6
	==

	// Invalid method call: Game is not in Night Stage Maffia Commit state.
	assert

	// contracts/TownHall.algo.ts:617
	// assert(this.txn.sender === this.mafia.value, 'Error state: Non-mafia player called method.')
	txn Sender
	bytec 20 //  "mafia"
	app_global_get
	==

	// Error state: Non-mafia player called method.
	assert

	// contracts/TownHall.algo.ts:619
	// this.mafiaCommitment.value = commitment
	bytec 39 //  "mafiaCommitment"
	frame_dig -1 // commitment: bytes
	app_global_put

	// *if33_condition
	// contracts/TownHall.algo.ts:621
	// this.doctor.value === globals.zeroAddress
	bytec 11 //  "doctor"
	app_global_get
	global ZeroAddress
	==
	bz *if33_else

	// *if33_consequent
	// contracts/TownHall.algo.ts:623
	// this.gameState.value = stateDawnStageMafiaReveal
	bytec 0 //  "gameState"
	intc 10 // 8
	app_global_put
	b *if33_end

*if33_else:
	// contracts/TownHall.algo.ts:625
	// this.gameState.value = stateNightStageDoctorCommit
	bytec 0 //  "gameState"
	intc 9 // 7
	app_global_put

*if33_end:
	retsub

// nightStageDoctorCommit(byte[])void
*abi_route_nightStageDoctorCommit:
	// commitment: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute nightStageDoctorCommit(byte[])void
	callsub nightStageDoctorCommit
	intc 0 // 1
	return

// nightStageDoctorCommit(commitment: bytes): void
nightStageDoctorCommit:
	proto 1 0

	// contracts/TownHall.algo.ts:630
	// assert(
	//       this.gameState.value === stateNightStageDoctorCommit,
	//       'Invalid method call: Game is not in Night Stage Doctor Commit state.'
	//     )
	bytec 0 //  "gameState"
	app_global_get
	intc 9 // 7
	==

	// Invalid method call: Game is not in Night Stage Doctor Commit state.
	assert

	// contracts/TownHall.algo.ts:635
	// assert(this.txn.sender === this.doctor.value, 'Error state: Non-doctor player called method.')
	txn Sender
	bytec 11 //  "doctor"
	app_global_get
	==

	// Error state: Non-doctor player called method.
	assert

	// contracts/TownHall.algo.ts:636
	// assert(
	//       this.doctor.value !== globals.zeroAddress,
	//       'Error state: Doctor is dead, should not have entered this state.'
	//     )
	bytec 11 //  "doctor"
	app_global_get
	global ZeroAddress
	!=

	// Error state: Doctor is dead, should not have entered this state.
	assert

	// contracts/TownHall.algo.ts:641
	// this.doctorCommitment.value = commitment
	bytec 38 //  "doctorCommitment"
	frame_dig -1 // commitment: bytes
	app_global_put

	// contracts/TownHall.algo.ts:643
	// this.gameState.value = stateDawnStageMafiaReveal
	bytec 0 //  "gameState"
	intc 10 // 8
	app_global_put
	retsub

// dawnStageMafiaReveal(address,byte[32])void
*abi_route_dawnStageMafiaReveal:
	// blinder: byte[32]
	txna ApplicationArgs 2
	dup
	len
	intc 5 // 32
	==

	// argument 0 (blinder) for dawnStageMafiaReveal must be a byte[32]
	assert

	// victimAim: address
	txna ApplicationArgs 1
	dup
	len
	intc 5 // 32
	==

	// argument 1 (victimAim) for dawnStageMafiaReveal must be a address
	assert

	// execute dawnStageMafiaReveal(address,byte[32])void
	callsub dawnStageMafiaReveal
	intc 0 // 1
	return

// dawnStageMafiaReveal(victimAim: Address, blinder: bytes32): void
dawnStageMafiaReveal:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x

	// contracts/TownHall.algo.ts:647
	// assert(
	//       this.gameState.value === stateDawnStageMafiaReveal,
	//       'Invalid method call: Game is not in Dawn Stage Maffia Reveal state.'
	//     )
	bytec 0 //  "gameState"
	app_global_get
	intc 10 // 8
	==

	// Invalid method call: Game is not in Dawn Stage Maffia Reveal state.
	assert

	// contracts/TownHall.algo.ts:652
	// assert(this.txn.sender === this.mafia.value, 'Error state: Non-mafia player called method.')
	txn Sender
	bytec 20 //  "mafia"
	app_global_get
	==

	// Error state: Non-mafia player called method.
	assert

	// contracts/TownHall.algo.ts:654
	// assert(victimAim !== globals.zeroAddress, 'Error state: Victim must be a valid address.')
	frame_dig -1 // victimAim: Address
	global ZeroAddress
	!=

	// Error state: Victim must be a valid address.
	assert

	// contracts/TownHall.algo.ts:658
	// reveal = sha256(concat(victimAim, blinder))
	frame_dig -1 // victimAim: Address
	frame_dig -2 // blinder: bytes32
	concat
	sha256
	frame_bury 0 // reveal: byte[32]

	// contracts/TownHall.algo.ts:660
	// assert(
	//       rawBytes(reveal) === this.mafiaCommitment.value,
	//       'Error state: Provided address + blinder does NOT match commitment.'
	//     )
	frame_dig 0 // reveal: byte[32]
	bytec 39 //  "mafiaCommitment"
	app_global_get
	==

	// Error state: Provided address + blinder does NOT match commitment.
	assert

	// *if34_condition
	// contracts/TownHall.algo.ts:665
	// victimAim === this.player1AlgoAddr.value
	frame_dig -1 // victimAim: Address
	bytec 4 //  "player1AlgoAddr"
	app_global_get
	==
	bz *if34_elseif1_condition

	// *if34_consequent
	// contracts/TownHall.algo.ts:666
	// this.mafiaVictim.value = this.player1AlgoAddr.value
	bytec 3 //  "mafiaVictim"
	bytec 4 //  "player1AlgoAddr"
	app_global_get
	app_global_put
	b *if34_end

*if34_elseif1_condition:
	// contracts/TownHall.algo.ts:667
	// victimAim === this.player2AlgoAddr.value
	frame_dig -1 // victimAim: Address
	bytec 5 //  "player2AlgoAddr"
	app_global_get
	==
	bz *if34_elseif2_condition

	// *if34_elseif1_consequent
	// contracts/TownHall.algo.ts:668
	// this.mafiaVictim.value = this.player2AlgoAddr.value
	bytec 3 //  "mafiaVictim"
	bytec 5 //  "player2AlgoAddr"
	app_global_get
	app_global_put
	b *if34_end

*if34_elseif2_condition:
	// contracts/TownHall.algo.ts:669
	// victimAim === this.player3AlgoAddr.value
	frame_dig -1 // victimAim: Address
	bytec 6 //  "player3AlgoAddr"
	app_global_get
	==
	bz *if34_elseif3_condition

	// *if34_elseif2_consequent
	// contracts/TownHall.algo.ts:670
	// this.mafiaVictim.value = this.player3AlgoAddr.value
	bytec 3 //  "mafiaVictim"
	bytec 6 //  "player3AlgoAddr"
	app_global_get
	app_global_put
	b *if34_end

*if34_elseif3_condition:
	// contracts/TownHall.algo.ts:671
	// victimAim === this.player4AlgoAddr.value
	frame_dig -1 // victimAim: Address
	bytec 7 //  "player4AlgoAddr"
	app_global_get
	==
	bz *if34_elseif4_condition

	// *if34_elseif3_consequent
	// contracts/TownHall.algo.ts:672
	// this.mafiaVictim.value = this.player4AlgoAddr.value
	bytec 3 //  "mafiaVictim"
	bytec 7 //  "player4AlgoAddr"
	app_global_get
	app_global_put
	b *if34_end

*if34_elseif4_condition:
	// contracts/TownHall.algo.ts:673
	// victimAim === this.player5AlgoAddr.value
	frame_dig -1 // victimAim: Address
	bytec 8 //  "player5AlgoAddr"
	app_global_get
	==
	bz *if34_elseif5_condition

	// *if34_elseif4_consequent
	// contracts/TownHall.algo.ts:674
	// this.mafiaVictim.value = this.player5AlgoAddr.value
	bytec 3 //  "mafiaVictim"
	bytec 8 //  "player5AlgoAddr"
	app_global_get
	app_global_put
	b *if34_end

*if34_elseif5_condition:
	// contracts/TownHall.algo.ts:675
	// victimAim === this.player6AlgoAddr.value
	frame_dig -1 // victimAim: Address
	bytec 9 //  "player6AlgoAddr"
	app_global_get
	==
	bz *if34_else

	// *if34_elseif5_consequent
	// contracts/TownHall.algo.ts:676
	// this.mafiaVictim.value = this.player6AlgoAddr.value
	bytec 3 //  "mafiaVictim"
	bytec 9 //  "player6AlgoAddr"
	app_global_get
	app_global_put
	b *if34_end

*if34_else:
	// contracts/TownHall.algo.ts:678
	// this.mafiaVictim.value = globals.zeroAddress
	bytec 3 //  "mafiaVictim"
	global ZeroAddress
	app_global_put

*if34_end:
	// *if35_condition
	// contracts/TownHall.algo.ts:684
	// this.doctor.value === globals.zeroAddress
	bytec 11 //  "doctor"
	app_global_get
	global ZeroAddress
	==
	bz *if35_else

	// *if35_consequent
	// contracts/TownHall.algo.ts:686
	// this.gameState.value = stateDawnStageDeadOrSaved
	bytec 0 //  "gameState"
	intc 11 // 10
	app_global_put
	b *if35_end

*if35_else:
	// contracts/TownHall.algo.ts:689
	// this.gameState.value = stateDawnStageDoctorReveal
	bytec 0 //  "gameState"
	intc 14 // 9
	app_global_put

*if35_end:
	retsub

// dawnStageDoctorReveal(address,byte[32])void
*abi_route_dawnStageDoctorReveal:
	// blinder: byte[32]
	txna ApplicationArgs 2
	dup
	len
	intc 5 // 32
	==

	// argument 0 (blinder) for dawnStageDoctorReveal must be a byte[32]
	assert

	// patientAim: address
	txna ApplicationArgs 1
	dup
	len
	intc 5 // 32
	==

	// argument 1 (patientAim) for dawnStageDoctorReveal must be a address
	assert

	// execute dawnStageDoctorReveal(address,byte[32])void
	callsub dawnStageDoctorReveal
	intc 0 // 1
	return

// dawnStageDoctorReveal(patientAim: Address, blinder: bytes32): void
dawnStageDoctorReveal:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x

	// contracts/TownHall.algo.ts:694
	// assert(
	//       this.gameState.value === stateDawnStageDoctorReveal,
	//       'Invalid method call: Game is not in Dawn Stage Doctor Reveal state.'
	//     )
	bytec 0 //  "gameState"
	app_global_get
	intc 14 // 9
	==

	// Invalid method call: Game is not in Dawn Stage Doctor Reveal state.
	assert

	// contracts/TownHall.algo.ts:699
	// assert(this.txn.sender === this.doctor.value, 'Error state: Non-doctor player called method.')
	txn Sender
	bytec 11 //  "doctor"
	app_global_get
	==

	// Error state: Non-doctor player called method.
	assert

	// contracts/TownHall.algo.ts:701
	// assert(this.doctorPatient.value === globals.zeroAddress, 'Error state: Doctor has already committed to a patient.')
	bytec 10 //  "doctorPatient"
	app_global_get
	global ZeroAddress
	==

	// Error state: Doctor has already committed to a patient.
	assert

	// contracts/TownHall.algo.ts:703
	// assert(patientAim !== globals.zeroAddress, 'Error state: Patient must be a valid address.')
	frame_dig -1 // patientAim: Address
	global ZeroAddress
	!=

	// Error state: Patient must be a valid address.
	assert

	// contracts/TownHall.algo.ts:707
	// reveal = sha256(concat(patientAim, blinder))
	frame_dig -1 // patientAim: Address
	frame_dig -2 // blinder: bytes32
	concat
	sha256
	frame_bury 0 // reveal: byte[32]

	// contracts/TownHall.algo.ts:709
	// assert(
	//       rawBytes(reveal) === this.doctorCommitment.value,
	//       'Error state: Provided address + blinder does NOT match commitment.'
	//     )
	frame_dig 0 // reveal: byte[32]
	bytec 38 //  "doctorCommitment"
	app_global_get
	==

	// Error state: Provided address + blinder does NOT match commitment.
	assert

	// *if36_condition
	// contracts/TownHall.algo.ts:714
	// patientAim === this.player1AlgoAddr.value
	frame_dig -1 // patientAim: Address
	bytec 4 //  "player1AlgoAddr"
	app_global_get
	==
	bz *if36_elseif1_condition

	// *if36_consequent
	// contracts/TownHall.algo.ts:715
	// this.doctorPatient.value = this.player1AlgoAddr.value
	bytec 10 //  "doctorPatient"
	bytec 4 //  "player1AlgoAddr"
	app_global_get
	app_global_put
	b *if36_end

*if36_elseif1_condition:
	// contracts/TownHall.algo.ts:716
	// patientAim === this.player2AlgoAddr.value
	frame_dig -1 // patientAim: Address
	bytec 5 //  "player2AlgoAddr"
	app_global_get
	==
	bz *if36_elseif2_condition

	// *if36_elseif1_consequent
	// contracts/TownHall.algo.ts:717
	// this.doctorPatient.value = this.player2AlgoAddr.value
	bytec 10 //  "doctorPatient"
	bytec 5 //  "player2AlgoAddr"
	app_global_get
	app_global_put
	b *if36_end

*if36_elseif2_condition:
	// contracts/TownHall.algo.ts:718
	// patientAim === this.player3AlgoAddr.value
	frame_dig -1 // patientAim: Address
	bytec 6 //  "player3AlgoAddr"
	app_global_get
	==
	bz *if36_elseif3_condition

	// *if36_elseif2_consequent
	// contracts/TownHall.algo.ts:719
	// this.doctorPatient.value = this.player3AlgoAddr.value
	bytec 10 //  "doctorPatient"
	bytec 6 //  "player3AlgoAddr"
	app_global_get
	app_global_put
	b *if36_end

*if36_elseif3_condition:
	// contracts/TownHall.algo.ts:720
	// patientAim === this.player4AlgoAddr.value
	frame_dig -1 // patientAim: Address
	bytec 7 //  "player4AlgoAddr"
	app_global_get
	==
	bz *if36_elseif4_condition

	// *if36_elseif3_consequent
	// contracts/TownHall.algo.ts:721
	// this.doctorPatient.value = this.player4AlgoAddr.value
	bytec 10 //  "doctorPatient"
	bytec 7 //  "player4AlgoAddr"
	app_global_get
	app_global_put
	b *if36_end

*if36_elseif4_condition:
	// contracts/TownHall.algo.ts:722
	// patientAim === this.player5AlgoAddr.value
	frame_dig -1 // patientAim: Address
	bytec 8 //  "player5AlgoAddr"
	app_global_get
	==
	bz *if36_elseif5_condition

	// *if36_elseif4_consequent
	// contracts/TownHall.algo.ts:723
	// this.doctorPatient.value = this.player5AlgoAddr.value
	bytec 10 //  "doctorPatient"
	bytec 8 //  "player5AlgoAddr"
	app_global_get
	app_global_put
	b *if36_end

*if36_elseif5_condition:
	// contracts/TownHall.algo.ts:724
	// patientAim === this.player6AlgoAddr.value
	frame_dig -1 // patientAim: Address
	bytec 9 //  "player6AlgoAddr"
	app_global_get
	==
	bz *if36_else

	// *if36_elseif5_consequent
	// contracts/TownHall.algo.ts:725
	// this.doctorPatient.value = this.player6AlgoAddr.value
	bytec 10 //  "doctorPatient"
	bytec 9 //  "player6AlgoAddr"
	app_global_get
	app_global_put
	b *if36_end

*if36_else:
	// contracts/TownHall.algo.ts:727
	// this.doctorPatient.value = globals.zeroAddress
	bytec 10 //  "doctorPatient"
	global ZeroAddress
	app_global_put

*if36_end:
	// contracts/TownHall.algo.ts:733
	// this.gameState.value = stateDawnStageDeadOrSaved
	bytec 0 //  "gameState"
	intc 11 // 10
	app_global_put
	retsub

// dawnStageDeadOrSaved()void
*abi_route_dawnStageDeadOrSaved:
	// execute dawnStageDeadOrSaved()void
	callsub dawnStageDeadOrSaved
	intc 0 // 1
	return

// dawnStageDeadOrSaved(): void
dawnStageDeadOrSaved:
	proto 0 0

	// contracts/TownHall.algo.ts:737
	// assert(
	//       this.gameState.value === stateDawnStageDeadOrSaved,
	//       'Invalid method call: Game is not in Dawn Stage DeadOrSaved? state.'
	//     )
	bytec 0 //  "gameState"
	app_global_get
	intc 11 // 10
	==

	// Invalid method call: Game is not in Dawn Stage DeadOrSaved? state.
	assert

	// *if37_condition
	// contracts/TownHall.algo.ts:742
	// this.mafiaVictim.value === globals.zeroAddress || this.mafiaVictim.value === this.doctorPatient.value
	bytec 3 //  "mafiaVictim"
	app_global_get
	global ZeroAddress
	==
	dup
	bnz *skip_or16
	bytec 3 //  "mafiaVictim"
	app_global_get
	bytec 10 //  "doctorPatient"
	app_global_get
	==
	||

*skip_or16:
	bz *if37_end

	// *if37_consequent
	// contracts/TownHall.algo.ts:747
	// this.mafiaVictim.value = globals.zeroAddress
	bytec 3 //  "mafiaVictim"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:748
	// this.doctorPatient.value = globals.zeroAddress
	bytec 10 //  "doctorPatient"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:749
	// this.gameState.value = stateDayStageVote
	bytec 0 //  "gameState"
	intc 4 // 3
	app_global_put

	// contracts/TownHall.algo.ts:750
	// return;
	retsub

*if37_end:
	// *if38_condition
	// contracts/TownHall.algo.ts:755
	// this.mafiaVictim.value === this.player1AlgoAddr.value
	bytec 3 //  "mafiaVictim"
	app_global_get
	bytec 4 //  "player1AlgoAddr"
	app_global_get
	==
	bz *if38_elseif1_condition

	// *if38_consequent
	// contracts/TownHall.algo.ts:756
	// this.justEliminatedPlayer.value = this.player1AlgoAddr.value
	bytec 1 //  "justEliminatedPlayer"
	bytec 4 //  "player1AlgoAddr"
	app_global_get
	app_global_put

	// contracts/TownHall.algo.ts:757
	// this.player1AlgoAddr.value = globals.zeroAddress
	bytec 4 //  "player1AlgoAddr"
	global ZeroAddress
	app_global_put
	b *if38_end

*if38_elseif1_condition:
	// contracts/TownHall.algo.ts:758
	// this.mafiaVictim.value === this.player2AlgoAddr.value
	bytec 3 //  "mafiaVictim"
	app_global_get
	bytec 5 //  "player2AlgoAddr"
	app_global_get
	==
	bz *if38_elseif2_condition

	// *if38_elseif1_consequent
	// contracts/TownHall.algo.ts:759
	// this.justEliminatedPlayer.value = this.player2AlgoAddr.value
	bytec 1 //  "justEliminatedPlayer"
	bytec 5 //  "player2AlgoAddr"
	app_global_get
	app_global_put

	// contracts/TownHall.algo.ts:760
	// this.player2AlgoAddr.value = globals.zeroAddress
	bytec 5 //  "player2AlgoAddr"
	global ZeroAddress
	app_global_put
	b *if38_end

*if38_elseif2_condition:
	// contracts/TownHall.algo.ts:761
	// this.mafiaVictim.value === this.player3AlgoAddr.value
	bytec 3 //  "mafiaVictim"
	app_global_get
	bytec 6 //  "player3AlgoAddr"
	app_global_get
	==
	bz *if38_elseif3_condition

	// *if38_elseif2_consequent
	// contracts/TownHall.algo.ts:762
	// this.justEliminatedPlayer.value = this.player3AlgoAddr.value
	bytec 1 //  "justEliminatedPlayer"
	bytec 6 //  "player3AlgoAddr"
	app_global_get
	app_global_put

	// contracts/TownHall.algo.ts:763
	// this.player3AlgoAddr.value = globals.zeroAddress
	bytec 6 //  "player3AlgoAddr"
	global ZeroAddress
	app_global_put
	b *if38_end

*if38_elseif3_condition:
	// contracts/TownHall.algo.ts:764
	// this.mafiaVictim.value === this.player4AlgoAddr.value
	bytec 3 //  "mafiaVictim"
	app_global_get
	bytec 7 //  "player4AlgoAddr"
	app_global_get
	==
	bz *if38_elseif4_condition

	// *if38_elseif3_consequent
	// contracts/TownHall.algo.ts:765
	// this.justEliminatedPlayer.value = this.player4AlgoAddr.value
	bytec 1 //  "justEliminatedPlayer"
	bytec 7 //  "player4AlgoAddr"
	app_global_get
	app_global_put

	// contracts/TownHall.algo.ts:766
	// this.player4AlgoAddr.value = globals.zeroAddress
	bytec 7 //  "player4AlgoAddr"
	global ZeroAddress
	app_global_put
	b *if38_end

*if38_elseif4_condition:
	// contracts/TownHall.algo.ts:767
	// this.mafiaVictim.value === this.player5AlgoAddr.value
	bytec 3 //  "mafiaVictim"
	app_global_get
	bytec 8 //  "player5AlgoAddr"
	app_global_get
	==
	bz *if38_elseif5_condition

	// *if38_elseif4_consequent
	// contracts/TownHall.algo.ts:768
	// this.justEliminatedPlayer.value = this.player5AlgoAddr.value
	bytec 1 //  "justEliminatedPlayer"
	bytec 8 //  "player5AlgoAddr"
	app_global_get
	app_global_put

	// contracts/TownHall.algo.ts:769
	// this.player5AlgoAddr.value = globals.zeroAddress
	bytec 8 //  "player5AlgoAddr"
	global ZeroAddress
	app_global_put
	b *if38_end

*if38_elseif5_condition:
	// contracts/TownHall.algo.ts:770
	// this.mafiaVictim.value === this.player6AlgoAddr.value
	bytec 3 //  "mafiaVictim"
	app_global_get
	bytec 9 //  "player6AlgoAddr"
	app_global_get
	==
	bz *if38_else

	// *if38_elseif5_consequent
	// contracts/TownHall.algo.ts:771
	// this.justEliminatedPlayer.value = this.player6AlgoAddr.value
	bytec 1 //  "justEliminatedPlayer"
	bytec 9 //  "player6AlgoAddr"
	app_global_get
	app_global_put

	// contracts/TownHall.algo.ts:772
	// this.player6AlgoAddr.value = globals.zeroAddress
	bytec 9 //  "player6AlgoAddr"
	global ZeroAddress
	app_global_put
	b *if38_end

*if38_else:
	// Error state: Victim must be a player! Should not have entered this state.
	err

*if38_end:
	// contracts/TownHall.algo.ts:777
	// this.playersAlive.value -= 1
	bytec 12 //  "playersAlive"
	app_global_get
	intc 0 // 1
	-
	bytec 12 //  "playersAlive"
	swap
	app_global_put

	// contracts/TownHall.algo.ts:779
	// this.mafiaVictim.value = globals.zeroAddress
	bytec 3 //  "mafiaVictim"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:780
	// this.doctorPatient.value = globals.zeroAddress
	bytec 10 //  "doctorPatient"
	global ZeroAddress
	app_global_put

	// *if39_condition
	// contracts/TownHall.algo.ts:782
	// this.playersAlive.value <= 2
	bytec 12 //  "playersAlive"
	app_global_get
	intc 2 // 2
	<=
	bz *if39_end

	// *if39_consequent
	// contracts/TownHall.algo.ts:785
	// this.gameState.value = stateGameOver
	bytec 0 //  "gameState"
	intc 6 // 12
	app_global_put

	// contracts/TownHall.algo.ts:786
	// return;
	retsub

*if39_end:
	// contracts/TownHall.algo.ts:789
	// this.gameState.value = stateDawnStageUnmasking
	bytec 0 //  "gameState"
	intc 15 // 11
	app_global_put
	retsub

// dawnStageUnmasking(byte[])void
*abi_route_dawnStageUnmasking:
	// blsSk: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute dawnStageUnmasking(byte[])void
	callsub dawnStageUnmasking
	intc 0 // 1
	return

// dawnStageUnmasking(blsSk: bytes): void
dawnStageUnmasking:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x
	dupn 2

	// contracts/TownHall.algo.ts:798
	// assert(
	//       this.gameState.value === stateDawnStageUnmasking,
	//       'Invalid method call: Game is not in Dawn Stage Unmasking state.'
	//     )
	bytec 0 //  "gameState"
	app_global_get
	intc 15 // 11
	==

	// Invalid method call: Game is not in Dawn Stage Unmasking state.
	assert

	// contracts/TownHall.algo.ts:803
	// assert(this.justEliminatedPlayer.value === this.txn.sender, 'Error state: Other player called method.')
	bytec 1 //  "justEliminatedPlayer"
	app_global_get
	txn Sender
	==

	// Error state: Other player called method.
	assert

	// contracts/TownHall.algo.ts:806
	// BLS_PK = ecScalarMul('BLS12_381g1', hex(BLS12381G1_BASEPOINT_BYTES), blsSk)
	bytec 37 // 0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1
	frame_dig -1 // blsSk: bytes
	ec_scalar_mul BLS12_381g1
	frame_bury 0 // BLS_PK: byte[]

	// contracts/TownHall.algo.ts:807
	// hashToPoint = this.hashPointToPoint(BLS_PK)
	frame_dig 0 // BLS_PK: byte[]
	callsub hashPointToPoint
	frame_bury 1 // hashToPoint: byte[]

	// contracts/TownHall.algo.ts:808
	// genKeyImage = ecScalarMul('BLS12_381g1', hashToPoint, blsSk)
	frame_dig 1 // hashToPoint: byte[]
	frame_dig -1 // blsSk: bytes
	ec_scalar_mul BLS12_381g1
	frame_bury 2 // genKeyImage: byte[]

	// *if40_condition
	// contracts/TownHall.algo.ts:810
	// genKeyImage === this.mafiaKeyImage.value
	frame_dig 2 // genKeyImage: byte[]
	bytec 32 //  "mafiaKeyImage"
	app_global_get
	==
	bz *if40_end

	// *if40_consequent
	// contracts/TownHall.algo.ts:814
	// this.gameState.value = stateGameOver
	bytec 0 //  "gameState"
	intc 6 // 12
	app_global_put

	// contracts/TownHall.algo.ts:815
	// this.mafia.value = globals.zeroAddress
	bytec 20 //  "mafia"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:816
	// return;
	retsub

*if40_end:
	// *if41_condition
	// contracts/TownHall.algo.ts:819
	// genKeyImage === this.doctorKeyImage.value
	frame_dig 2 // genKeyImage: byte[]
	bytec 31 //  "doctorKeyImage"
	app_global_get
	==
	bz *if41_end

	// *if41_consequent
	// contracts/TownHall.algo.ts:821
	// this.doctor.value = globals.zeroAddress
	bytec 11 //  "doctor"
	global ZeroAddress
	app_global_put

*if41_end:
	// contracts/TownHall.algo.ts:825
	// this.justEliminatedPlayer.value = globals.zeroAddress
	bytec 1 //  "justEliminatedPlayer"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:827
	// this.gameState.value = stateDayStageVote
	bytec 0 //  "gameState"
	intc 4 // 3
	app_global_put
	retsub

// gameOver()void
*abi_route_gameOver:
	// execute gameOver()void
	callsub gameOver
	intc 0 // 1
	return

// gameOver(): void
gameOver:
	proto 0 0

	// contracts/TownHall.algo.ts:831
	// assert(this.gameState.value === stateGameOver, 'Invalid method call: Game is not in Game Over state.')
	bytec 0 //  "gameState"
	app_global_get
	intc 6 // 12
	==

	// Invalid method call: Game is not in Game Over state.
	assert
	retsub

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x70ceea1b // method "dummyOpUp(uint64)uint64"
	pushbytes 0xa017bd8c // method "dlog(byte[],byte[],byte[],byte[])bool"
	pushbytes 0xd772cdbc // method "hashPointToPoint(byte[])byte[]"
	pushbytes 0xf540ba2c // method "getGameState()uint64"
	pushbytes 0xff630efd // method "setLSIGFunderAddress(address)void"
	pushbytes 0x54d92be3 // method "joinGameLobby(pay,byte[])void"
	pushbytes 0x9b07bf8f // method "assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void"
	pushbytes 0x4fb121bb // method "dayStageVote(uint64)void"
	pushbytes 0xc4236169 // method "dayStageEliminate()void"
	pushbytes 0xee9f361a // method "dayStageUnmasking(byte[])void"
	pushbytes 0x0b5e7585 // method "nightStageMafiaCommit(byte[])void"
	pushbytes 0xc8645875 // method "nightStageDoctorCommit(byte[])void"
	pushbytes 0xedc486bb // method "dawnStageMafiaReveal(address,byte[32])void"
	pushbytes 0x773762e5 // method "dawnStageDoctorReveal(address,byte[32])void"
	pushbytes 0x3995ed6a // method "dawnStageDeadOrSaved()void"
	pushbytes 0xef65a697 // method "dawnStageUnmasking(byte[])void"
	pushbytes 0x6adb4538 // method "gameOver()void"
	txna ApplicationArgs 0
	match *abi_route_dummyOpUp *abi_route_dlog *abi_route_hashPointToPoint *abi_route_getGameState *abi_route_setLSIGFunderAddress *abi_route_joinGameLobby *abi_route_assignRole *abi_route_dayStageVote *abi_route_dayStageEliminate *abi_route_dayStageUnmasking *abi_route_nightStageMafiaCommit *abi_route_nightStageDoctorCommit *abi_route_dawnStageMafiaReveal *abi_route_dawnStageDoctorReveal *abi_route_dawnStageDeadOrSaved *abi_route_dawnStageUnmasking *abi_route_gameOver

	// this contract does not implement the given ABI method for call NoOp
	err