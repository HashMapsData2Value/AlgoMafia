#pragma version 10
intcblock 1 0 2 6 3 12 32 4 5 7 8 10 96 150000 9 11
bytecblock 0x67616d655374617465 0x 0x6a757374456c696d696e61746564506c61796572 0x706c6179657231416c676f41646472 0x706c6179657232416c676f41646472 0x706c6179657233416c676f41646472 0x706c6179657234416c676f41646472 0x706c6179657235416c676f41646472 0x706c6179657236416c676f41646472 0x6d6166696156696374696d 0x0000000000000000 0x646f63746f7250617469656e74 0x0000000000000001 0x646f63746f72 0x706c6179657273416c697665 0x706c61796572315265636569766564566f746573 0x706c61796572325265636569766564566f746573 0x706c61796572335265636569766564566f746573 0x706c61796572345265636569766564566f746573 0x706c61796572355265636569766564566f746573 0x706c61796572365265636569766564566f746573 0x6d61666961 0x6c73696746756e64657241646472657373 0x706c6179657273566f746564 0x706c61796572734a6f696e6564 0x424c53313233383147315f584d443a5348412d3235365f535357555f524f5f1f 0x706c6179657231486173566f746564 0x706c6179657232486173566f746564 0x706c6179657233486173566f746564 0x706c6179657234486173566f746564 0x706c6179657235486173566f746564 0x706c6179657236486173566f746564 0x646f63746f724b6579496d616765 0x6d616669614b6579496d616765 0x151f7c75 0x63726561746f7241646472657373 0x62757463686572 0x696e6e6b656570 0x6661726d6572 0x67726f636572 0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1 0x646f63746f72436f6d6d69746d656e74 0x627574636865724b6579496d616765 0x696e6e6b6565704b6579496d616765 0x6d61666961436f6d6d69746d656e74 0x6661726d65724b6579496d616765 0x67726f6365724b6579496d616765 0x0030 0x00

// This TEAL was generated by TEALScript v0.107.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 3 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts/TownHall.algo.ts:135
	// this.creatorAddress.value = this.txn.sender
	bytec 35 //  "creatorAddress"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:137
	// this.lsigFunderAddress.value = globals.zeroAddress
	bytec 22 //  "lsigFunderAddress"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:139
	// this.player1AlgoAddr.value = { address: globals.zeroAddress, eliminated: 0 }
	bytec 3 //  "player1AlgoAddr"
	global ZeroAddress
	bytec 10 // 0x0000000000000000
	concat
	app_global_put

	// contracts/TownHall.algo.ts:140
	// this.player2AlgoAddr.value = { address: globals.zeroAddress, eliminated: 0 }
	bytec 4 //  "player2AlgoAddr"
	global ZeroAddress
	bytec 10 // 0x0000000000000000
	concat
	app_global_put

	// contracts/TownHall.algo.ts:141
	// this.player3AlgoAddr.value = { address: globals.zeroAddress, eliminated: 0 }
	bytec 5 //  "player3AlgoAddr"
	global ZeroAddress
	bytec 10 // 0x0000000000000000
	concat
	app_global_put

	// contracts/TownHall.algo.ts:142
	// this.player4AlgoAddr.value = { address: globals.zeroAddress, eliminated: 0 }
	bytec 6 //  "player4AlgoAddr"
	global ZeroAddress
	bytec 10 // 0x0000000000000000
	concat
	app_global_put

	// contracts/TownHall.algo.ts:143
	// this.player5AlgoAddr.value = { address: globals.zeroAddress, eliminated: 0 }
	bytec 7 //  "player5AlgoAddr"
	global ZeroAddress
	bytec 10 // 0x0000000000000000
	concat
	app_global_put

	// contracts/TownHall.algo.ts:144
	// this.player6AlgoAddr.value = { address: globals.zeroAddress, eliminated: 0 }
	bytec 8 //  "player6AlgoAddr"
	global ZeroAddress
	bytec 10 // 0x0000000000000000
	concat
	app_global_put

	// contracts/TownHall.algo.ts:146
	// this.mafia.value = globals.zeroAddress
	bytec 21 //  "mafia"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:147
	// this.doctor.value = globals.zeroAddress
	bytec 13 //  "doctor"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:148
	// this.farmer.value = globals.zeroAddress
	bytec 38 //  "farmer"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:149
	// this.butcher.value = globals.zeroAddress
	bytec 36 //  "butcher"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:150
	// this.innkeep.value = globals.zeroAddress
	bytec 37 //  "innkeep"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:151
	// this.grocer.value = globals.zeroAddress
	bytec 39 //  "grocer"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:153
	// this.player1HasVoted.value = 0
	bytec 26 //  "player1HasVoted"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:154
	// this.player2HasVoted.value = 0
	bytec 27 //  "player2HasVoted"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:155
	// this.player3HasVoted.value = 0
	bytec 28 //  "player3HasVoted"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:156
	// this.player4HasVoted.value = 0
	bytec 29 //  "player4HasVoted"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:157
	// this.player5HasVoted.value = 0
	bytec 30 //  "player5HasVoted"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:158
	// this.player6HasVoted.value = 0
	bytec 31 //  "player6HasVoted"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:159
	// this.playersVoted.value = 0
	bytec 23 //  "playersVoted"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:161
	// this.player1ReceivedVotes.value = 0
	bytec 15 //  "player1ReceivedVotes"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:162
	// this.player2ReceivedVotes.value = 0
	bytec 16 //  "player2ReceivedVotes"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:163
	// this.player3ReceivedVotes.value = 0
	bytec 17 //  "player3ReceivedVotes"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:164
	// this.player4ReceivedVotes.value = 0
	bytec 18 //  "player4ReceivedVotes"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:165
	// this.player5ReceivedVotes.value = 0
	bytec 19 //  "player5ReceivedVotes"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:166
	// this.player6ReceivedVotes.value = 0
	bytec 20 //  "player6ReceivedVotes"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:167
	// this.playersVoted.value = 0
	bytec 23 //  "playersVoted"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:169
	// this.playersJoined.value = 0
	bytec 24 //  "playersJoined"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:170
	// this.playersAlive.value = 6
	bytec 14 //  "playersAlive"
	intc 3 // 6
	app_global_put

	// contracts/TownHall.algo.ts:172
	// this.justEliminatedPlayer.value = globals.zeroAddress
	bytec 2 //  "justEliminatedPlayer"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:173
	// this.mafiaVictim.value = globals.zeroAddress
	bytec 9 //  "mafiaVictim"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:174
	// this.doctorPatient.value = globals.zeroAddress
	bytec 11 //  "doctorPatient"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:176
	// this.gameState.value = 0
	bytec 0 //  "gameState"
	intc 1 // 0
	app_global_put
	retsub

// dummyOpUp(uint64)uint64
*abi_route_dummyOpUp:
	// The ABI return prefix
	bytec 34 // 0x151f7c75

	// i: uint64
	txna ApplicationArgs 1
	btoi

	// execute dummyOpUp(uint64)uint64
	callsub dummyOpUp
	itob
	concat
	log
	intc 0 // 1
	return

// dummyOpUp(i: uint64): uint64
//
// Dummy Op Up
// Dummy operation to get more opcode budget
// @i - The number to return, necssary to deduplicate the name
// @returns the number (but we do nothing with it)
dummyOpUp:
	proto 1 1

	// contracts/TownHall.algo.ts:185
	// return i;
	frame_dig -1 // i: uint64
	retsub

// dlog(byte[],byte[],byte[],byte[])bool
*abi_route_dlog:
	// The ABI return prefix
	bytec 34 // 0x151f7c75

	// z: byte[]
	txna ApplicationArgs 4
	extract 2 0

	// v: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// x: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// g: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute dlog(byte[],byte[],byte[],byte[])bool
	callsub dlog
	bytec 48 // 0x00
	intc 1 // 0
	uncover 2
	setbit
	concat
	log
	intc 0 // 1
	return

// dlog(g: bytes, x: bytes, v: bytes, z: bytes): boolean
dlog:
	proto 4 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dup

	// contracts/TownHall.algo.ts:208
	// hash = sha256(concat(g, concat(x, v)))
	frame_dig -1 // g: bytes
	frame_dig -2 // x: bytes
	frame_dig -3 // v: bytes
	concat
	concat
	sha256
	frame_bury 0 // hash: byte[32]

	// contracts/TownHall.algo.ts:209
	// challenge = btobigint(hash) % btobigint(hex(BLS12381_CURVE_ORDER_HEX))
	frame_dig 0 // hash: byte[32]
	pushbytes 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
	b%
	frame_bury 1 // challenge: bigint

	// contracts/TownHall.algo.ts:211
	// return (
	//       v === ecAdd('BLS12_381g1', ecScalarMul('BLS12_381g1', g, z), ecScalarMul('BLS12_381g1', x, rawBytes(challenge)))
	//     );
	frame_dig -3 // v: bytes
	frame_dig -1 // g: bytes
	frame_dig -4 // z: bytes
	ec_scalar_mul BLS12_381g1
	frame_dig -2 // x: bytes
	frame_dig 1 // challenge: bigint
	ec_scalar_mul BLS12_381g1
	ec_add BLS12_381g1
	==

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// hashPointToPoint(byte[])byte[]
*abi_route_hashPointToPoint:
	// The ABI return prefix
	bytec 34 // 0x151f7c75

	// point: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute hashPointToPoint(byte[])byte[]
	callsub hashPointToPoint
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// hashPointToPoint(point: bytes): bytes
hashPointToPoint:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dupn 9

	// contracts/TownHall.algo.ts:218
	// zPad = hex(
	//       '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
	//     )
	pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	frame_bury 0 // zPad: byte[]

	// contracts/TownHall.algo.ts:221
	// lIbStr = hex('0030')
	bytec 47 // 0x0030
	frame_bury 1 // lIbStr: byte[]

	// contracts/TownHall.algo.ts:222
	// dstPrime = hex('424c53313233383147315f584d443a5348412d3235365f535357555f524f5f1f')
	bytec 25 // 0x424c53313233383147315f584d443a5348412d3235365f535357555f524f5f1f
	frame_bury 2 // dstPrime: byte[]

	// contracts/TownHall.algo.ts:223
	// msgPrime = concat(concat(concat(concat(zPad, point), lIbStr), hex('00')), dstPrime)
	frame_dig 0 // zPad: byte[]
	frame_dig -1 // point: bytes
	concat
	bytec 47 //  lIbStr: byte[]
	concat
	bytec 48 // 0x00
	concat
	bytec 25 //  dstPrime: byte[]
	concat
	frame_bury 3 // msgPrime: byte[]

	// contracts/TownHall.algo.ts:226
	// b0 = sha256(msgPrime)
	frame_dig 3 // msgPrime: byte[]
	sha256
	frame_bury 4 // b0: byte[32]

	// contracts/TownHall.algo.ts:228
	// b1 = sha256(concat(concat(b0, hex('01')), dstPrime))
	frame_dig 4 // b0: byte[32]
	pushbytes 0x01
	concat
	bytec 25 //  dstPrime: byte[]
	concat
	sha256
	frame_bury 5 // b1: byte[32]

	// contracts/TownHall.algo.ts:230
	// b2 = sha256(concat(concat(bitwiseXor(b0, b1), hex('02')), dstPrime))
	frame_dig 4 // b0: byte[32]
	frame_dig 5 // b1: byte[32]
	b^
	pushbytes 0x02
	concat
	bytec 25 //  dstPrime: byte[]
	concat
	sha256
	frame_bury 6 // b2: byte[32]

	// contracts/TownHall.algo.ts:233
	// uniformBytes = concat(extract3(b1, 0, 32), extract3(b2, 0, 16))
	frame_dig 5 // b1: byte[32]
	extract 0 32
	frame_dig 6 // b2: byte[32]
	extract 0 16
	concat
	frame_bury 7 // uniformBytes: byte[]

	// contracts/TownHall.algo.ts:236
	// fpElement = btobigint(uniformBytes) % btobigint(hex(BLS12381_FIELD_MODULUS_HEX))
	frame_dig 7 // uniformBytes: byte[]
	pushbytes 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab
	b%
	frame_bury 8 // fpElement: bigint

	// contracts/TownHall.algo.ts:237
	// result = ecMapTo('BLS12_381g1', rawBytes(fpElement))
	frame_dig 8 // fpElement: bigint
	ec_map_to BLS12_381g1
	frame_bury 9 // result: byte[]

	// contracts/TownHall.algo.ts:239
	// return result;
	frame_dig 9 // result: byte[]

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 9
	retsub

// getGameState()uint64
*abi_route_getGameState:
	// The ABI return prefix
	bytec 34 // 0x151f7c75

	// execute getGameState()uint64
	callsub getGameState
	itob
	concat
	log
	intc 0 // 1
	return

// getGameState(): uint64
getGameState:
	proto 0 1

	// contracts/TownHall.algo.ts:245
	// return this.gameState.value;
	bytec 0 //  "gameState"
	app_global_get
	retsub

// setLSIGFunderAddress(address)void
*abi_route_setLSIGFunderAddress:
	// funderLSigAddress: address
	txna ApplicationArgs 1
	dup
	len
	intc 6 // 32
	==

	// argument 0 (funderLSigAddress) for setLSIGFunderAddress must be a address
	assert

	// execute setLSIGFunderAddress(address)void
	callsub setLSIGFunderAddress
	intc 0 // 1
	return

// setLSIGFunderAddress(funderLSigAddress: Address): void
setLSIGFunderAddress:
	proto 1 0

	// contracts/TownHall.algo.ts:249
	// assert(
	//       this.gameState.value === stateSetLSIGFunderAddress,
	//       'Invalid method call: Contract is not in Set LSig Funder Address state.'
	//     )
	bytec 0 //  "gameState"
	app_global_get
	intc 1 // 0
	==

	// Invalid method call: Contract is not in Set LSig Funder Address state.
	assert

	// contracts/TownHall.algo.ts:254
	// assert(
	//       this.txn.sender === this.creatorAddress.value,
	//       'Error state: Only the creator can set the LSig Funder Address!'
	//     )
	txn Sender
	bytec 35 //  "creatorAddress"
	app_global_get
	==

	// Error state: Only the creator can set the LSig Funder Address!
	assert

	// contracts/TownHall.algo.ts:259
	// assert(this.lsigFunderAddress.value === globals.zeroAddress, 'Error state: LSig Funder Address already set!')
	bytec 22 //  "lsigFunderAddress"
	app_global_get
	global ZeroAddress
	==

	// Error state: LSig Funder Address already set!
	assert

	// contracts/TownHall.algo.ts:261
	// assert(funderLSigAddress !== globals.zeroAddress, 'Error state: LSig Funder Address cannot be the zero address.')
	frame_dig -1 // funderLSigAddress: Address
	global ZeroAddress
	!=

	// Error state: LSig Funder Address cannot be the zero address.
	assert

	// contracts/TownHall.algo.ts:264
	// this.lsigFunderAddress.value = funderLSigAddress
	bytec 22 //  "lsigFunderAddress"
	frame_dig -1 // funderLSigAddress: Address
	app_global_put

	// contracts/TownHall.algo.ts:266
	// this.gameState.value = stateJoinGameLobby
	bytec 0 //  "gameState"
	intc 0 // 1
	app_global_put
	retsub

// joinGameLobby(pay,byte[])void
*abi_route_joinGameLobby:
	// NIZK_DLOG: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// depositTxn: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 1 (depositTxn) for joinGameLobby must be a pay transaction
	assert

	// execute joinGameLobby(pay,byte[])void
	callsub joinGameLobby
	intc 0 // 1
	return

// joinGameLobby(depositTxn: PayTxn, NIZK_DLOG: bytes): void
joinGameLobby:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dupn 3

	// contracts/TownHall.algo.ts:270
	// assert(this.gameState.value === stateJoinGameLobby, 'Invalid method call: Game is not in Join Game Lobby state.')
	bytec 0 //  "gameState"
	app_global_get
	intc 0 // 1
	==

	// Invalid method call: Game is not in Join Game Lobby state.
	assert

	// contracts/TownHall.algo.ts:272
	// assert(
	//       this.playersJoined.value < 6,
	//       'Max players already joined! Error, game should have moved to the next stage already.'
	//     )
	bytec 24 //  "playersJoined"
	app_global_get
	intc 3 // 6
	<

	// Max players already joined! Error, game should have moved to the next stage already.
	assert

	// *if0_condition
	// contracts/TownHall.algo.ts:278
	// this.player1AlgoAddr.value.address === this.txn.sender ||
	//       this.player2AlgoAddr.value.address === this.txn.sender ||
	//       this.player3AlgoAddr.value.address === this.txn.sender ||
	//       this.player4AlgoAddr.value.address === this.txn.sender ||
	//       this.player5AlgoAddr.value.address === this.txn.sender ||
	//       this.player6AlgoAddr.value.address === this.txn.sender
	bytec 3 //  "player1AlgoAddr"
	app_global_get
	extract 0 32
	txn Sender
	==
	dup
	bnz *skip_or0
	bytec 4 //  "player2AlgoAddr"
	app_global_get
	extract 0 32
	txn Sender
	==
	||

*skip_or0:
	dup
	bnz *skip_or1
	bytec 5 //  "player3AlgoAddr"
	app_global_get
	extract 0 32
	txn Sender
	==
	||

*skip_or1:
	dup
	bnz *skip_or2
	bytec 6 //  "player4AlgoAddr"
	app_global_get
	extract 0 32
	txn Sender
	==
	||

*skip_or2:
	dup
	bnz *skip_or3
	bytec 7 //  "player5AlgoAddr"
	app_global_get
	extract 0 32
	txn Sender
	==
	||

*skip_or3:
	dup
	bnz *skip_or4
	bytec 8 //  "player6AlgoAddr"
	app_global_get
	extract 0 32
	txn Sender
	==
	||

*skip_or4:
	bz *if0_end

	// *if0_consequent
	// Error state: Player already joined the game!
	err

*if0_end:
	// contracts/TownHall.algo.ts:290
	// assert(depositTxn.amount >= LSIG_FUND_AMOUNT + SLASH_DEPOSIT_AMOUNT, 'Invalid FunderLSig amount!')
	frame_dig -1 // depositTxn: PayTxn
	gtxns Amount
	pushint 1150000
	>=

	// Invalid FunderLSig amount!
	assert

	// contracts/TownHall.algo.ts:292
	// g = extract3(NIZK_DLOG, 0, BLS12381G1_LENGTH)
	frame_dig -2 // NIZK_DLOG: bytes
	extract 0 96
	frame_bury 0 // g: byte[]

	// contracts/TownHall.algo.ts:293
	// RingPK = extract3(NIZK_DLOG, BLS12381G1_LENGTH, BLS12381G1_LENGTH)
	frame_dig -2 // NIZK_DLOG: bytes
	extract 96 96
	frame_bury 1 // RingPK: byte[]

	// contracts/TownHall.algo.ts:294
	// v = extract3(NIZK_DLOG, BLS12381G1_LENGTH * 2, BLS12381G1_LENGTH)
	frame_dig -2 // NIZK_DLOG: bytes
	extract 192 96
	frame_bury 2 // v: byte[]

	// contracts/TownHall.algo.ts:295
	// z = extract3(NIZK_DLOG, BLS12381G1_LENGTH * 3, 32)
	frame_dig -2 // NIZK_DLOG: bytes
	pushint 288
	intc 6 // 32
	extract3
	frame_bury 3 // z: byte[]

	// contracts/TownHall.algo.ts:300
	// assert(this.dlog(g, RingPK, v, z), 'DLOG NIZK Proof failed!')
	frame_dig 3 // z: byte[]
	frame_dig 2 // v: byte[]
	frame_dig 1 // RingPK: byte[]
	frame_dig 0 // g: byte[]
	callsub dlog

	// DLOG NIZK Proof failed!
	assert

	// *if1_condition
	// contracts/TownHall.algo.ts:302
	// !this.quickAccessPKBoxes(0).exists
	bytec 10 // 0x0000000000000000
	box_len
	swap
	pop
	!
	bz *if1_else

	// *if1_consequent
	// contracts/TownHall.algo.ts:303
	// this.quickAccessPKBoxes(0).create(BLS12381G1_LENGTH)
	bytec 10 // 0x0000000000000000
	intc 12 // 96
	box_create
	pop
	b *if1_end

*if1_else:
	// contracts/TownHall.algo.ts:305
	// this.quickAccessPKBoxes(0).resize(this.quickAccessPKBoxes(0).size + BLS12381G1_LENGTH)
	bytec 10 // 0x0000000000000000
	dup
	box_len

	// box value does not exist: this.quickAccessPKBoxes(0).size
	assert
	intc 12 // 96
	+
	box_resize

*if1_end:
	// contracts/TownHall.algo.ts:309
	// assert(this.quickAccessPKBoxes(0).exists, 'PK Box failed to be created.')
	bytec 10 // 0x0000000000000000
	box_len
	swap
	pop

	// PK Box failed to be created.
	assert

	// contracts/TownHall.algo.ts:311
	// this.quickAccessPKBoxes(0).replace(this.playersJoined.value * BLS12381G1_LENGTH, RingPK)
	bytec 10 // 0x0000000000000000
	bytec 24 //  "playersJoined"
	app_global_get
	intc 12 // 96
	*
	frame_dig 1 // RingPK: byte[]
	box_replace

	// contracts/TownHall.algo.ts:312
	// this.playersJoined.value += 1
	bytec 24 //  "playersJoined"
	app_global_get
	intc 0 // 1
	+
	bytec 24 //  "playersJoined"
	swap
	app_global_put

	// contracts/TownHall.algo.ts:314
	// assert(this.lsigFunderAddress.value !== globals.zeroAddress, 'Error state: LSig Funder Address not set!')
	bytec 22 //  "lsigFunderAddress"
	app_global_get
	global ZeroAddress
	!=

	// Error state: LSig Funder Address not set!
	assert

	// contracts/TownHall.algo.ts:317
	// sendPayment({
	//       amount: LSIG_FUND_AMOUNT,
	//       receiver: this.lsigFunderAddress.value,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts/TownHall.algo.ts:318
	// amount: LSIG_FUND_AMOUNT
	intc 13 // 150000
	itxn_field Amount

	// contracts/TownHall.algo.ts:319
	// receiver: this.lsigFunderAddress.value
	bytec 22 //  "lsigFunderAddress"
	app_global_get
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// *if2_condition
	// contracts/TownHall.algo.ts:322
	// this.player1AlgoAddr.value.address === globals.zeroAddress
	bytec 3 //  "player1AlgoAddr"
	app_global_get
	extract 0 32
	global ZeroAddress
	==
	bz *if2_end

	// *if2_consequent
	// contracts/TownHall.algo.ts:323
	// this.player1AlgoAddr.value.address = this.txn.sender
	bytec 3 //  "player1AlgoAddr"
	app_global_get
	intc 1 // 0
	txn Sender
	replace3
	bytec 3 //  "player1AlgoAddr"
	swap
	app_global_put

	// contracts/TownHall.algo.ts:324
	// return;
	retsub

*if2_end:
	// *if3_condition
	// contracts/TownHall.algo.ts:326
	// this.player2AlgoAddr.value.address === globals.zeroAddress
	bytec 4 //  "player2AlgoAddr"
	app_global_get
	extract 0 32
	global ZeroAddress
	==
	bz *if3_end

	// *if3_consequent
	// contracts/TownHall.algo.ts:327
	// this.player2AlgoAddr.value.address = this.txn.sender
	bytec 4 //  "player2AlgoAddr"
	app_global_get
	intc 1 // 0
	txn Sender
	replace3
	bytec 4 //  "player2AlgoAddr"
	swap
	app_global_put

	// contracts/TownHall.algo.ts:328
	// return;
	retsub

*if3_end:
	// *if4_condition
	// contracts/TownHall.algo.ts:330
	// this.player3AlgoAddr.value.address === globals.zeroAddress
	bytec 5 //  "player3AlgoAddr"
	app_global_get
	extract 0 32
	global ZeroAddress
	==
	bz *if4_end

	// *if4_consequent
	// contracts/TownHall.algo.ts:331
	// this.player3AlgoAddr.value.address = this.txn.sender
	bytec 5 //  "player3AlgoAddr"
	app_global_get
	intc 1 // 0
	txn Sender
	replace3
	bytec 5 //  "player3AlgoAddr"
	swap
	app_global_put

	// contracts/TownHall.algo.ts:332
	// return;
	retsub

*if4_end:
	// *if5_condition
	// contracts/TownHall.algo.ts:334
	// this.player4AlgoAddr.value.address === globals.zeroAddress
	bytec 6 //  "player4AlgoAddr"
	app_global_get
	extract 0 32
	global ZeroAddress
	==
	bz *if5_end

	// *if5_consequent
	// contracts/TownHall.algo.ts:335
	// this.player4AlgoAddr.value.address = this.txn.sender
	bytec 6 //  "player4AlgoAddr"
	app_global_get
	intc 1 // 0
	txn Sender
	replace3
	bytec 6 //  "player4AlgoAddr"
	swap
	app_global_put

	// contracts/TownHall.algo.ts:336
	// return;
	retsub

*if5_end:
	// *if6_condition
	// contracts/TownHall.algo.ts:338
	// this.player5AlgoAddr.value.address === globals.zeroAddress
	bytec 7 //  "player5AlgoAddr"
	app_global_get
	extract 0 32
	global ZeroAddress
	==
	bz *if6_end

	// *if6_consequent
	// contracts/TownHall.algo.ts:339
	// this.player5AlgoAddr.value.address = this.txn.sender
	bytec 7 //  "player5AlgoAddr"
	app_global_get
	intc 1 // 0
	txn Sender
	replace3
	bytec 7 //  "player5AlgoAddr"
	swap
	app_global_put

	// contracts/TownHall.algo.ts:340
	// return;
	retsub

*if6_end:
	// *if7_condition
	// contracts/TownHall.algo.ts:342
	// this.player6AlgoAddr.value.address === globals.zeroAddress
	bytec 8 //  "player6AlgoAddr"
	app_global_get
	extract 0 32
	global ZeroAddress
	==
	bz *if7_end

	// *if7_consequent
	// contracts/TownHall.algo.ts:343
	// this.player6AlgoAddr.value.address = this.txn.sender
	bytec 8 //  "player6AlgoAddr"
	app_global_get
	intc 1 // 0
	txn Sender
	replace3
	bytec 8 //  "player6AlgoAddr"
	swap
	app_global_put

	// contracts/TownHall.algo.ts:344
	// this.gameState.value = stateAssignRole
	bytec 0 //  "gameState"
	intc 2 // 2
	app_global_put

	// contracts/TownHall.algo.ts:345
	// return;
	retsub

*if7_end:
	// Invalid state! Error, game should have moved to the next stage already.
	err
	retsub

// assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void
*abi_route_assignRole:
	// ringLSigTxn5: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (ringLSigTxn5) for assignRole must be a pay transaction
	assert

	// ringLSigTxn4: pay
	txn GroupIndex
	intc 2 // 2
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 1 (ringLSigTxn4) for assignRole must be a pay transaction
	assert

	// ringLSigTxn3: pay
	txn GroupIndex
	intc 4 // 3
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 2 (ringLSigTxn3) for assignRole must be a pay transaction
	assert

	// ringLSigTxn2: pay
	txn GroupIndex
	intc 7 // 4
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 3 (ringLSigTxn2) for assignRole must be a pay transaction
	assert

	// ringLSigTxn1: pay
	txn GroupIndex
	intc 8 // 5
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 4 (ringLSigTxn1) for assignRole must be a pay transaction
	assert

	// ringLSigTxn0: pay
	txn GroupIndex
	intc 3 // 6
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 5 (ringLSigTxn0) for assignRole must be a pay transaction
	assert

	// funderLSigTxn: pay
	txn GroupIndex
	intc 9 // 7
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 6 (funderLSigTxn) for assignRole must be a pay transaction
	assert

	// challenges: byte[]
	txna ApplicationArgs 5
	extract 2 0

	// sig: byte[]
	txna ApplicationArgs 4
	extract 2 0

	// keyImage: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// pkAll: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// msg: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void
	callsub assignRole
	intc 0 // 1
	return

// assignRole(msg: bytes, pkAll: bytes, keyImage: bytes, sig: bytes, challenges: bytes, funderLSigTxn: PayTxn, ringLSigTxn0: PayTxn, ringLSigTxn1: PayTxn, ringLSigTxn2: PayTxn, ringLSigTxn3: PayTxn, ringLSigTxn4: PayTxn, ringLSigTxn5: PayTxn): void
assignRole:
	proto 12 0

	// contracts/TownHall.algo.ts:365
	// assert(this.gameState.value === stateAssignRole, 'Invalid method call: Game is not in Assign Role state.')
	bytec 0 //  "gameState"
	app_global_get
	intc 2 // 2
	==

	// Invalid method call: Game is not in Assign Role state.
	assert

	// contracts/TownHall.algo.ts:374
	// assert(
	//       !this.hashFilter(rawBytes(sha256(keyImage))).exists,
	//       'KeyImage already in store. Are you trying to double-dip with your ring signature?'
	//     )
	frame_dig -3 // keyImage: bytes
	sha256
	box_len
	swap
	pop
	!

	// KeyImage already in store. Are you trying to double-dip with your ring signature?
	assert

	// contracts/TownHall.algo.ts:378
	// this.hashFilter(rawBytes(sha256(keyImage))).create(0)
	frame_dig -3 // keyImage: bytes
	sha256
	intc 1 // 0
	box_create
	pop

	// contracts/TownHall.algo.ts:382
	// assert(msg === concat(rawBytes(this.txn.sender), rawBytes(this.app.address)))
	frame_dig -1 // msg: bytes
	txn Sender
	global CurrentApplicationAddress
	concat
	==
	assert

	// contracts/TownHall.algo.ts:385
	// assert(
	//       this.quickAccessPKBoxes(0).extract(0, 6 * BLS12381G1_LENGTH) === pkAll,
	//       'Invalid PKs! Are you trying to pass in a different ring of PKs?'
	//     )
	bytec 10 // 0x0000000000000000
	intc 1 // 0
	pushint 576
	box_extract
	frame_dig -2 // pkAll: bytes
	==

	// Invalid PKs! Are you trying to pass in a different ring of PKs?
	assert

	// contracts/TownHall.algo.ts:392
	// verifyTxn(ringLSigTxn0, { sender: Address.fromBytes(RingLinkLSig0.address()) })
	// verify sender
	frame_dig -7 // ringLSigTxn0: PayTxn
	gtxns Sender
	pushbytes 0xc6afbc71506ca117b93301aa32a0d7c53771e1de1849502f327b6835dad0b6c5 // addr "Y2X3Y4KQNSQRPOJTAGVDFIGXYU3XDYO6DBEVALZSPNUDLWWQW3CT2YD3CI"
	==

	// transaction verification failed: {"txn":"ringLSigTxn0","field":"sender","expected":"Address.fromBytes(RingLinkLSig0.address())"}
	assert

	// contracts/TownHall.algo.ts:393
	// verifyTxn(ringLSigTxn1, { sender: Address.fromBytes(RingLinkLSig1.address()) })
	// verify sender
	frame_dig -8 // ringLSigTxn1: PayTxn
	gtxns Sender
	pushbytes 0x692c072a2fea211c4d56becc3cb67b0049e9427974b41097e6852d1d37e69d3b // addr "NEWAOKRP5IQRYTKWX3GDZNT3ABE6SQTZOS2BBF7GQUWR2N7GTU5RRPYCJY"
	==

	// transaction verification failed: {"txn":"ringLSigTxn1","field":"sender","expected":"Address.fromBytes(RingLinkLSig1.address())"}
	assert

	// contracts/TownHall.algo.ts:394
	// verifyTxn(ringLSigTxn2, { sender: Address.fromBytes(RingLinkLSig2.address()) })
	// verify sender
	frame_dig -9 // ringLSigTxn2: PayTxn
	gtxns Sender
	pushbytes 0x1b7170535e1d4fdd70cbad11f977682226ea1f9eddd3c45f09df5373efc37b6a // addr "DNYXAU26DVH524GLVUI7S53IEITOUH463XJ4IXYJ35JXH36DPNVMLBRKJ4"
	==

	// transaction verification failed: {"txn":"ringLSigTxn2","field":"sender","expected":"Address.fromBytes(RingLinkLSig2.address())"}
	assert

	// contracts/TownHall.algo.ts:395
	// verifyTxn(ringLSigTxn3, { sender: Address.fromBytes(RingLinkLSig3.address()) })
	// verify sender
	frame_dig -10 // ringLSigTxn3: PayTxn
	gtxns Sender
	pushbytes 0x4903f3bd9858c37ae122d27cc759d63b27cf213e77671ebd16a7a31dcb583bb6 // addr "JEB7HPMYLDBXVYJC2J6MOWOWHMT46IJ6O5TR5PIWU6RR3S2YHO3OFAEZXE"
	==

	// transaction verification failed: {"txn":"ringLSigTxn3","field":"sender","expected":"Address.fromBytes(RingLinkLSig3.address())"}
	assert

	// contracts/TownHall.algo.ts:396
	// verifyTxn(ringLSigTxn4, { sender: Address.fromBytes(RingLinkLSig4.address()) })
	// verify sender
	frame_dig -11 // ringLSigTxn4: PayTxn
	gtxns Sender
	pushbytes 0xeddecce26ec5c436b68861d1ca29234efd4e274cb28fb760093e960055e4db39 // addr "5XPMZYTOYXCDNNUIMHI4UKJDJ36U4J2MWKH3OYAJH2LAAVPE3M4TRO2BZI"
	==

	// transaction verification failed: {"txn":"ringLSigTxn4","field":"sender","expected":"Address.fromBytes(RingLinkLSig4.address())"}
	assert

	// contracts/TownHall.algo.ts:397
	// verifyTxn(ringLSigTxn5, { sender: Address.fromBytes(RingLinkLSig5.address()) })
	// verify sender
	frame_dig -12 // ringLSigTxn5: PayTxn
	gtxns Sender
	pushbytes 0xaeff5e2a4dfecd9dcd69d5e617a7ebc0dc2ccb810f6a4db2c649633a6c1ba0d3 // addr "V37V4KSN73GZ3TLJ2XTBPJ7LYDOCZS4BB5VE3MWGJFRTU3A3UDJR46QV6I"
	==

	// transaction verification failed: {"txn":"ringLSigTxn5","field":"sender","expected":"Address.fromBytes(RingLinkLSig5.address())"}
	assert

	// contracts/TownHall.algo.ts:400
	// verifyTxn(funderLSigTxn, {
	//       sender: Address.fromBytes(this.lsigFunderAddress.value),
	//       receiver: this.txn.sender,
	//       amount: LSIG_FUND_AMOUNT,
	//     })
	// verify sender
	frame_dig -6 // funderLSigTxn: PayTxn
	gtxns Sender
	bytec 22 //  "lsigFunderAddress"
	app_global_get
	==

	// transaction verification failed: {"txn":"funderLSigTxn","field":"sender","expected":"Address.fromBytes(this.lsigFunderAddress.value)"}
	assert

	// verify receiver
	frame_dig -6 // funderLSigTxn: PayTxn
	gtxns Receiver
	txn Sender
	==

	// transaction verification failed: {"txn":"funderLSigTxn","field":"receiver","expected":"this.txn.sender"}
	assert

	// verify amount
	frame_dig -6 // funderLSigTxn: PayTxn
	gtxns Amount
	intc 13 // 150000
	==

	// transaction verification failed: {"txn":"funderLSigTxn","field":"amount","expected":"LSIG_FUND_AMOUNT"}
	assert

	// *if8_condition
	// contracts/TownHall.algo.ts:411
	// this.mafia.value === globals.zeroAddress
	bytec 21 //  "mafia"
	app_global_get
	global ZeroAddress
	==
	bz *if8_end

	// *if8_consequent
	// contracts/TownHall.algo.ts:412
	// this.mafia.value = this.txn.sender
	bytec 21 //  "mafia"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:413
	// this.mafiaKeyImage.value = keyImage
	bytec 33 //  "mafiaKeyImage"
	frame_dig -3 // keyImage: bytes
	app_global_put

	// contracts/TownHall.algo.ts:414
	// return;
	retsub

*if8_end:
	// *if9_condition
	// contracts/TownHall.algo.ts:416
	// this.doctor.value === globals.zeroAddress
	bytec 13 //  "doctor"
	app_global_get
	global ZeroAddress
	==
	bz *if9_end

	// *if9_consequent
	// contracts/TownHall.algo.ts:417
	// this.doctor.value = this.txn.sender
	bytec 13 //  "doctor"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:418
	// this.doctorKeyImage.value = keyImage
	bytec 32 //  "doctorKeyImage"
	frame_dig -3 // keyImage: bytes
	app_global_put

	// contracts/TownHall.algo.ts:419
	// return;
	retsub

*if9_end:
	// *if10_condition
	// contracts/TownHall.algo.ts:421
	// this.farmer.value === globals.zeroAddress
	bytec 38 //  "farmer"
	app_global_get
	global ZeroAddress
	==
	bz *if10_end

	// *if10_consequent
	// contracts/TownHall.algo.ts:422
	// this.farmer.value = this.txn.sender
	bytec 38 //  "farmer"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:423
	// this.farmerKeyImage.value = keyImage
	bytec 45 //  "farmerKeyImage"
	frame_dig -3 // keyImage: bytes
	app_global_put

	// contracts/TownHall.algo.ts:424
	// return;
	retsub

*if10_end:
	// *if11_condition
	// contracts/TownHall.algo.ts:426
	// this.butcher.value === globals.zeroAddress
	bytec 36 //  "butcher"
	app_global_get
	global ZeroAddress
	==
	bz *if11_end

	// *if11_consequent
	// contracts/TownHall.algo.ts:427
	// this.butcher.value = this.txn.sender
	bytec 36 //  "butcher"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:428
	// this.butcherKeyImage.value = keyImage
	bytec 42 //  "butcherKeyImage"
	frame_dig -3 // keyImage: bytes
	app_global_put

	// contracts/TownHall.algo.ts:429
	// return;
	retsub

*if11_end:
	// *if12_condition
	// contracts/TownHall.algo.ts:431
	// this.innkeep.value === globals.zeroAddress
	bytec 37 //  "innkeep"
	app_global_get
	global ZeroAddress
	==
	bz *if12_end

	// *if12_consequent
	// contracts/TownHall.algo.ts:432
	// this.innkeep.value = this.txn.sender
	bytec 37 //  "innkeep"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:433
	// this.innkeepKeyImage.value = keyImage
	bytec 43 //  "innkeepKeyImage"
	frame_dig -3 // keyImage: bytes
	app_global_put

	// contracts/TownHall.algo.ts:434
	// return;
	retsub

*if12_end:
	// *if13_condition
	// contracts/TownHall.algo.ts:436
	// this.grocer.value === globals.zeroAddress
	bytec 39 //  "grocer"
	app_global_get
	global ZeroAddress
	==
	bz *if13_end

	// *if13_consequent
	// contracts/TownHall.algo.ts:437
	// this.grocer.value = this.txn.sender
	bytec 39 //  "grocer"
	txn Sender
	app_global_put

	// contracts/TownHall.algo.ts:438
	// this.grocerKeyImage.value = keyImage
	bytec 46 //  "grocerKeyImage"
	frame_dig -3 // keyImage: bytes
	app_global_put

	// contracts/TownHall.algo.ts:439
	// this.gameState.value = stateDayStageVote
	bytec 0 //  "gameState"
	intc 4 // 3
	app_global_put

	// contracts/TownHall.algo.ts:440
	// return;
	retsub

*if13_end:
	// Invalid state! Error, game should have moved to the next stage already.
	err
	retsub

// dayStageVote(uint64)void
*abi_route_dayStageVote:
	// vote: uint64
	txna ApplicationArgs 1
	btoi

	// execute dayStageVote(uint64)void
	callsub dayStageVote
	intc 0 // 1
	return

// dayStageVote(vote: uint64): void
dayStageVote:
	proto 1 0

	// contracts/TownHall.algo.ts:447
	// assert(this.gameState.value === stateDayStageVote, 'Invalid method call: Game is not in Day Stage Vote state.')
	bytec 0 //  "gameState"
	app_global_get
	intc 4 // 3
	==

	// Invalid method call: Game is not in Day Stage Vote state.
	assert

	// contracts/TownHall.algo.ts:449
	// assert(vote > 0 && vote < 7, 'Invalid vote: Vote must be int 1 <= n <= 6.')
	frame_dig -1 // vote: uint64
	intc 1 // 0
	>
	dup
	bz *skip_and0
	frame_dig -1 // vote: uint64
	intc 9 // 7
	<
	&&

*skip_and0:
	// Invalid vote: Vote must be int 1 <= n <= 6.
	assert

	// *if14_condition
	// contracts/TownHall.algo.ts:452
	// !(
	//         this.txn.sender === this.player1AlgoAddr.value.address ||
	//         this.txn.sender === this.player2AlgoAddr.value.address ||
	//         this.txn.sender === this.player3AlgoAddr.value.address ||
	//         this.txn.sender === this.player4AlgoAddr.value.address ||
	//         this.txn.sender === this.player5AlgoAddr.value.address ||
	//         this.txn.sender === this.player6AlgoAddr.value.address
	//       )
	txn Sender
	bytec 3 //  "player1AlgoAddr"
	app_global_get
	extract 0 32
	==
	dup
	bnz *skip_or5
	txn Sender
	bytec 4 //  "player2AlgoAddr"
	app_global_get
	extract 0 32
	==
	||

*skip_or5:
	dup
	bnz *skip_or6
	txn Sender
	bytec 5 //  "player3AlgoAddr"
	app_global_get
	extract 0 32
	==
	||

*skip_or6:
	dup
	bnz *skip_or7
	txn Sender
	bytec 6 //  "player4AlgoAddr"
	app_global_get
	extract 0 32
	==
	||

*skip_or7:
	dup
	bnz *skip_or8
	txn Sender
	bytec 7 //  "player5AlgoAddr"
	app_global_get
	extract 0 32
	==
	||

*skip_or8:
	dup
	bnz *skip_or9
	txn Sender
	bytec 8 //  "player6AlgoAddr"
	app_global_get
	extract 0 32
	==
	||

*skip_or9:
	!
	bz *if14_end

	// *if14_consequent
	// Illegal call: Address sender not allowed to vote.
	err

*if14_end:
	// *if15_condition
	// contracts/TownHall.algo.ts:464
	// vote === 1 && this.player1AlgoAddr.value.address !== globals.zeroAddress
	frame_dig -1 // vote: uint64
	intc 0 // 1
	==
	dup
	bz *skip_and1
	bytec 3 //  "player1AlgoAddr"
	app_global_get
	extract 0 32
	global ZeroAddress
	!=
	&&

*skip_and1:
	bz *if15_elseif1_condition

	// *if15_consequent
	// contracts/TownHall.algo.ts:465
	// this.player1ReceivedVotes.value += 1
	bytec 15 //  "player1ReceivedVotes"
	app_global_get
	intc 0 // 1
	+
	bytec 15 //  "player1ReceivedVotes"
	swap
	app_global_put
	b *if15_end

*if15_elseif1_condition:
	// contracts/TownHall.algo.ts:466
	// vote === 2 && this.player2AlgoAddr.value.address !== globals.zeroAddress
	frame_dig -1 // vote: uint64
	intc 2 // 2
	==
	dup
	bz *skip_and2
	bytec 4 //  "player2AlgoAddr"
	app_global_get
	extract 0 32
	global ZeroAddress
	!=
	&&

*skip_and2:
	bz *if15_elseif2_condition

	// *if15_elseif1_consequent
	// contracts/TownHall.algo.ts:467
	// this.player2ReceivedVotes.value += 1
	bytec 16 //  "player2ReceivedVotes"
	app_global_get
	intc 0 // 1
	+
	bytec 16 //  "player2ReceivedVotes"
	swap
	app_global_put
	b *if15_end

*if15_elseif2_condition:
	// contracts/TownHall.algo.ts:468
	// vote === 3 && this.player3AlgoAddr.value.address !== globals.zeroAddress
	frame_dig -1 // vote: uint64
	intc 4 // 3
	==
	dup
	bz *skip_and3
	bytec 5 //  "player3AlgoAddr"
	app_global_get
	extract 0 32
	global ZeroAddress
	!=
	&&

*skip_and3:
	bz *if15_elseif3_condition

	// *if15_elseif2_consequent
	// contracts/TownHall.algo.ts:469
	// this.player3ReceivedVotes.value += 1
	bytec 17 //  "player3ReceivedVotes"
	app_global_get
	intc 0 // 1
	+
	bytec 17 //  "player3ReceivedVotes"
	swap
	app_global_put
	b *if15_end

*if15_elseif3_condition:
	// contracts/TownHall.algo.ts:470
	// vote === 4 && this.player4AlgoAddr.value.address !== globals.zeroAddress
	frame_dig -1 // vote: uint64
	intc 7 // 4
	==
	dup
	bz *skip_and4
	bytec 6 //  "player4AlgoAddr"
	app_global_get
	extract 0 32
	global ZeroAddress
	!=
	&&

*skip_and4:
	bz *if15_elseif4_condition

	// *if15_elseif3_consequent
	// contracts/TownHall.algo.ts:471
	// this.player4ReceivedVotes.value += 1
	bytec 18 //  "player4ReceivedVotes"
	app_global_get
	intc 0 // 1
	+
	bytec 18 //  "player4ReceivedVotes"
	swap
	app_global_put
	b *if15_end

*if15_elseif4_condition:
	// contracts/TownHall.algo.ts:472
	// vote === 5 && this.player5AlgoAddr.value.address !== globals.zeroAddress
	frame_dig -1 // vote: uint64
	intc 8 // 5
	==
	dup
	bz *skip_and5
	bytec 7 //  "player5AlgoAddr"
	app_global_get
	extract 0 32
	global ZeroAddress
	!=
	&&

*skip_and5:
	bz *if15_elseif5_condition

	// *if15_elseif4_consequent
	// contracts/TownHall.algo.ts:473
	// this.player5ReceivedVotes.value += 1
	bytec 19 //  "player5ReceivedVotes"
	app_global_get
	intc 0 // 1
	+
	bytec 19 //  "player5ReceivedVotes"
	swap
	app_global_put
	b *if15_end

*if15_elseif5_condition:
	// contracts/TownHall.algo.ts:474
	// vote === 6 && this.player6AlgoAddr.value.address !== globals.zeroAddress
	frame_dig -1 // vote: uint64
	intc 3 // 6
	==
	dup
	bz *skip_and6
	bytec 8 //  "player6AlgoAddr"
	app_global_get
	extract 0 32
	global ZeroAddress
	!=
	&&

*skip_and6:
	bz *if15_else

	// *if15_elseif5_consequent
	// contracts/TownHall.algo.ts:475
	// this.player6ReceivedVotes.value += 1
	bytec 20 //  "player6ReceivedVotes"
	app_global_get
	intc 0 // 1
	+
	bytec 20 //  "player6ReceivedVotes"
	swap
	app_global_put
	b *if15_end

*if15_else:
	// Invalid vote: Is player still alive?
	err

*if15_end:
	// *if16_condition
	// contracts/TownHall.algo.ts:480
	// this.txn.sender === this.player1AlgoAddr.value.address && this.player1HasVoted.value === 0
	txn Sender
	bytec 3 //  "player1AlgoAddr"
	app_global_get
	extract 0 32
	==
	dup
	bz *skip_and7
	bytec 26 //  "player1HasVoted"
	app_global_get
	intc 1 // 0
	==
	&&

*skip_and7:
	bz *if16_elseif1_condition

	// *if16_consequent
	// contracts/TownHall.algo.ts:481
	// this.player1HasVoted.value = 1
	bytec 26 //  "player1HasVoted"
	intc 0 // 1
	app_global_put
	b *if16_end

*if16_elseif1_condition:
	// contracts/TownHall.algo.ts:482
	// this.txn.sender === this.player2AlgoAddr.value.address && this.player2HasVoted.value === 0
	txn Sender
	bytec 4 //  "player2AlgoAddr"
	app_global_get
	extract 0 32
	==
	dup
	bz *skip_and8
	bytec 27 //  "player2HasVoted"
	app_global_get
	intc 1 // 0
	==
	&&

*skip_and8:
	bz *if16_elseif2_condition

	// *if16_elseif1_consequent
	// contracts/TownHall.algo.ts:483
	// this.player2HasVoted.value = 1
	bytec 27 //  "player2HasVoted"
	intc 0 // 1
	app_global_put
	b *if16_end

*if16_elseif2_condition:
	// contracts/TownHall.algo.ts:484
	// this.txn.sender === this.player3AlgoAddr.value.address && this.player3HasVoted.value === 0
	txn Sender
	bytec 5 //  "player3AlgoAddr"
	app_global_get
	extract 0 32
	==
	dup
	bz *skip_and9
	bytec 28 //  "player3HasVoted"
	app_global_get
	intc 1 // 0
	==
	&&

*skip_and9:
	bz *if16_elseif3_condition

	// *if16_elseif2_consequent
	// contracts/TownHall.algo.ts:485
	// this.player3HasVoted.value = 1
	bytec 28 //  "player3HasVoted"
	intc 0 // 1
	app_global_put
	b *if16_end

*if16_elseif3_condition:
	// contracts/TownHall.algo.ts:486
	// this.txn.sender === this.player4AlgoAddr.value.address && this.player4HasVoted.value === 0
	txn Sender
	bytec 6 //  "player4AlgoAddr"
	app_global_get
	extract 0 32
	==
	dup
	bz *skip_and10
	bytec 29 //  "player4HasVoted"
	app_global_get
	intc 1 // 0
	==
	&&

*skip_and10:
	bz *if16_elseif4_condition

	// *if16_elseif3_consequent
	// contracts/TownHall.algo.ts:487
	// this.player4HasVoted.value = 1
	bytec 29 //  "player4HasVoted"
	intc 0 // 1
	app_global_put
	b *if16_end

*if16_elseif4_condition:
	// contracts/TownHall.algo.ts:488
	// this.txn.sender === this.player5AlgoAddr.value.address && this.player5HasVoted.value === 0
	txn Sender
	bytec 7 //  "player5AlgoAddr"
	app_global_get
	extract 0 32
	==
	dup
	bz *skip_and11
	bytec 30 //  "player5HasVoted"
	app_global_get
	intc 1 // 0
	==
	&&

*skip_and11:
	bz *if16_elseif5_condition

	// *if16_elseif4_consequent
	// contracts/TownHall.algo.ts:489
	// this.player5HasVoted.value = 1
	bytec 30 //  "player5HasVoted"
	intc 0 // 1
	app_global_put
	b *if16_end

*if16_elseif5_condition:
	// contracts/TownHall.algo.ts:490
	// this.txn.sender === this.player6AlgoAddr.value.address && this.player6HasVoted.value === 0
	txn Sender
	bytec 8 //  "player6AlgoAddr"
	app_global_get
	extract 0 32
	==
	dup
	bz *skip_and12
	bytec 31 //  "player6HasVoted"
	app_global_get
	intc 1 // 0
	==
	&&

*skip_and12:
	bz *if16_else

	// *if16_elseif5_consequent
	// contracts/TownHall.algo.ts:491
	// this.player6HasVoted.value = 1
	bytec 31 //  "player6HasVoted"
	intc 0 // 1
	app_global_put
	b *if16_end

*if16_else:
	// Address not allowed to vote.
	err

*if16_end:
	// contracts/TownHall.algo.ts:496
	// this.playersVoted.value += 1
	bytec 23 //  "playersVoted"
	app_global_get
	intc 0 // 1
	+
	bytec 23 //  "playersVoted"
	swap
	app_global_put

	// *if17_condition
	// contracts/TownHall.algo.ts:498
	// this.playersVoted.value === this.playersAlive.value
	bytec 23 //  "playersVoted"
	app_global_get
	bytec 14 //  "playersAlive"
	app_global_get
	==
	bz *if17_end

	// *if17_consequent
	// contracts/TownHall.algo.ts:500
	// this.gameState.value = stateDayStageEliminate
	bytec 0 //  "gameState"
	intc 7 // 4
	app_global_put

	// contracts/TownHall.algo.ts:503
	// this.playersVoted.value = 0
	bytec 23 //  "playersVoted"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:504
	// this.player1HasVoted.value = 0
	bytec 26 //  "player1HasVoted"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:505
	// this.player2HasVoted.value = 0
	bytec 27 //  "player2HasVoted"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:506
	// this.player3HasVoted.value = 0
	bytec 28 //  "player3HasVoted"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:507
	// this.player4HasVoted.value = 0
	bytec 29 //  "player4HasVoted"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:508
	// this.player5HasVoted.value = 0
	bytec 30 //  "player5HasVoted"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:509
	// this.player6HasVoted.value = 0
	bytec 31 //  "player6HasVoted"
	intc 1 // 0
	app_global_put

*if17_end:
	retsub

// dayStageEliminate()void
*abi_route_dayStageEliminate:
	// execute dayStageEliminate()void
	callsub dayStageEliminate
	intc 0 // 1
	return

// dayStageEliminate(): void
dayStageEliminate:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dup

	// contracts/TownHall.algo.ts:516
	// assert(
	//       this.gameState.value === stateDayStageEliminate,
	//       'Invalid method call: Game is not in Day Stage Eliminate state.'
	//     )
	bytec 0 //  "gameState"
	app_global_get
	intc 7 // 4
	==

	// Invalid method call: Game is not in Day Stage Eliminate state.
	assert

	// contracts/TownHall.algo.ts:521
	// this.justEliminatedPlayer.value = globals.zeroAddress
	bytec 2 //  "justEliminatedPlayer"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:522
	// topVotes = 0
	intc 1 // 0
	frame_bury 0 // topVotes: uint64

	// contracts/TownHall.algo.ts:528
	// even = globals.round % 2 === 0
	global Round
	intc 2 // 2
	%
	intc 1 // 0
	==
	frame_bury 1 // even: bool

	// *if18_condition
	// contracts/TownHall.algo.ts:530
	// this.player1ReceivedVotes.value > topVotes || (this.player1ReceivedVotes.value === topVotes && even)
	bytec 15 //  "player1ReceivedVotes"
	app_global_get
	frame_dig 0 // topVotes: uint64
	>
	dup
	bnz *skip_or10
	bytec 15 //  "player1ReceivedVotes"
	app_global_get
	frame_dig 0 // topVotes: uint64
	==
	dup
	bz *skip_and13
	frame_dig 1 // even: bool
	&&

*skip_and13:
	||

*skip_or10:
	bz *if18_end

	// *if18_consequent
	// contracts/TownHall.algo.ts:531
	// this.justEliminatedPlayer.value = this.player1AlgoAddr.value.address
	bytec 2 //  "justEliminatedPlayer"
	bytec 3 //  "player1AlgoAddr"
	app_global_get
	extract 0 32
	app_global_put

	// contracts/TownHall.algo.ts:532
	// topVotes = this.player1ReceivedVotes.value
	bytec 15 //  "player1ReceivedVotes"
	app_global_get
	frame_bury 0 // topVotes: uint64

*if18_end:
	// *if19_condition
	// contracts/TownHall.algo.ts:535
	// this.player2ReceivedVotes.value > topVotes || (this.player2ReceivedVotes.value === topVotes && even)
	bytec 16 //  "player2ReceivedVotes"
	app_global_get
	frame_dig 0 // topVotes: uint64
	>
	dup
	bnz *skip_or11
	bytec 16 //  "player2ReceivedVotes"
	app_global_get
	frame_dig 0 // topVotes: uint64
	==
	dup
	bz *skip_and14
	frame_dig 1 // even: bool
	&&

*skip_and14:
	||

*skip_or11:
	bz *if19_end

	// *if19_consequent
	// contracts/TownHall.algo.ts:536
	// this.justEliminatedPlayer.value = this.player2AlgoAddr.value.address
	bytec 2 //  "justEliminatedPlayer"
	bytec 4 //  "player2AlgoAddr"
	app_global_get
	extract 0 32
	app_global_put

	// contracts/TownHall.algo.ts:537
	// topVotes = this.player2ReceivedVotes.value
	bytec 16 //  "player2ReceivedVotes"
	app_global_get
	frame_bury 0 // topVotes: uint64

*if19_end:
	// *if20_condition
	// contracts/TownHall.algo.ts:540
	// this.player3ReceivedVotes.value > topVotes || (this.player3ReceivedVotes.value === topVotes && even)
	bytec 17 //  "player3ReceivedVotes"
	app_global_get
	frame_dig 0 // topVotes: uint64
	>
	dup
	bnz *skip_or12
	bytec 17 //  "player3ReceivedVotes"
	app_global_get
	frame_dig 0 // topVotes: uint64
	==
	dup
	bz *skip_and15
	frame_dig 1 // even: bool
	&&

*skip_and15:
	||

*skip_or12:
	bz *if20_end

	// *if20_consequent
	// contracts/TownHall.algo.ts:541
	// this.justEliminatedPlayer.value = this.player3AlgoAddr.value.address
	bytec 2 //  "justEliminatedPlayer"
	bytec 5 //  "player3AlgoAddr"
	app_global_get
	extract 0 32
	app_global_put

	// contracts/TownHall.algo.ts:542
	// topVotes = this.player3ReceivedVotes.value
	bytec 17 //  "player3ReceivedVotes"
	app_global_get
	frame_bury 0 // topVotes: uint64

*if20_end:
	// *if21_condition
	// contracts/TownHall.algo.ts:545
	// this.player4ReceivedVotes.value > topVotes || (this.player4ReceivedVotes.value === topVotes && even)
	bytec 18 //  "player4ReceivedVotes"
	app_global_get
	frame_dig 0 // topVotes: uint64
	>
	dup
	bnz *skip_or13
	bytec 18 //  "player4ReceivedVotes"
	app_global_get
	frame_dig 0 // topVotes: uint64
	==
	dup
	bz *skip_and16
	frame_dig 1 // even: bool
	&&

*skip_and16:
	||

*skip_or13:
	bz *if21_end

	// *if21_consequent
	// contracts/TownHall.algo.ts:546
	// this.justEliminatedPlayer.value = this.player4AlgoAddr.value.address
	bytec 2 //  "justEliminatedPlayer"
	bytec 6 //  "player4AlgoAddr"
	app_global_get
	extract 0 32
	app_global_put

	// contracts/TownHall.algo.ts:547
	// topVotes = this.player4ReceivedVotes.value
	bytec 18 //  "player4ReceivedVotes"
	app_global_get
	frame_bury 0 // topVotes: uint64

*if21_end:
	// *if22_condition
	// contracts/TownHall.algo.ts:550
	// this.player5ReceivedVotes.value > topVotes || (this.player5ReceivedVotes.value === topVotes && even)
	bytec 19 //  "player5ReceivedVotes"
	app_global_get
	frame_dig 0 // topVotes: uint64
	>
	dup
	bnz *skip_or14
	bytec 19 //  "player5ReceivedVotes"
	app_global_get
	frame_dig 0 // topVotes: uint64
	==
	dup
	bz *skip_and17
	frame_dig 1 // even: bool
	&&

*skip_and17:
	||

*skip_or14:
	bz *if22_end

	// *if22_consequent
	// contracts/TownHall.algo.ts:551
	// this.justEliminatedPlayer.value = this.player5AlgoAddr.value.address
	bytec 2 //  "justEliminatedPlayer"
	bytec 7 //  "player5AlgoAddr"
	app_global_get
	extract 0 32
	app_global_put

	// contracts/TownHall.algo.ts:552
	// topVotes = this.player5ReceivedVotes.value
	bytec 19 //  "player5ReceivedVotes"
	app_global_get
	frame_bury 0 // topVotes: uint64

*if22_end:
	// *if23_condition
	// contracts/TownHall.algo.ts:555
	// this.player6ReceivedVotes.value > topVotes || (this.player6ReceivedVotes.value === topVotes && even)
	bytec 20 //  "player6ReceivedVotes"
	app_global_get
	frame_dig 0 // topVotes: uint64
	>
	dup
	bnz *skip_or15
	bytec 20 //  "player6ReceivedVotes"
	app_global_get
	frame_dig 0 // topVotes: uint64
	==
	dup
	bz *skip_and18
	frame_dig 1 // even: bool
	&&

*skip_and18:
	||

*skip_or15:
	bz *if23_end

	// *if23_consequent
	// contracts/TownHall.algo.ts:556
	// this.justEliminatedPlayer.value = this.player6AlgoAddr.value.address
	bytec 2 //  "justEliminatedPlayer"
	bytec 8 //  "player6AlgoAddr"
	app_global_get
	extract 0 32
	app_global_put

	// contracts/TownHall.algo.ts:557
	// topVotes = this.player6ReceivedVotes.value
	bytec 20 //  "player6ReceivedVotes"
	app_global_get
	frame_bury 0 // topVotes: uint64

*if23_end:
	// contracts/TownHall.algo.ts:560
	// assert(this.justEliminatedPlayer.value !== globals.zeroAddress, 'Error state: Zero Address won vote!')
	bytec 2 //  "justEliminatedPlayer"
	app_global_get
	global ZeroAddress
	!=

	// Error state: Zero Address won vote!
	assert

	// contracts/TownHall.algo.ts:561
	// assert(topVotes !== 0, 'Error state: No votes were cast!')
	frame_dig 0 // topVotes: uint64
	intc 1 // 0
	!=

	// Error state: No votes were cast!
	assert

	// *if24_condition
	// contracts/TownHall.algo.ts:566
	// this.justEliminatedPlayer.value === this.player1AlgoAddr.value.address
	bytec 2 //  "justEliminatedPlayer"
	app_global_get
	bytec 3 //  "player1AlgoAddr"
	app_global_get
	extract 0 32
	==
	bz *if24_end

	// *if24_consequent
	// contracts/TownHall.algo.ts:567
	// this.player1AlgoAddr.value.eliminated = 1
	bytec 3 //  "player1AlgoAddr"
	app_global_get
	bytec 12 // 0x0000000000000001
	replace2 32
	bytec 3 //  "player1AlgoAddr"
	swap
	app_global_put

*if24_end:
	// *if25_condition
	// contracts/TownHall.algo.ts:570
	// this.justEliminatedPlayer.value === this.player2AlgoAddr.value.address
	bytec 2 //  "justEliminatedPlayer"
	app_global_get
	bytec 4 //  "player2AlgoAddr"
	app_global_get
	extract 0 32
	==
	bz *if25_end

	// *if25_consequent
	// contracts/TownHall.algo.ts:571
	// this.player2AlgoAddr.value.eliminated = 1
	bytec 4 //  "player2AlgoAddr"
	app_global_get
	bytec 12 // 0x0000000000000001
	replace2 32
	bytec 4 //  "player2AlgoAddr"
	swap
	app_global_put

*if25_end:
	// *if26_condition
	// contracts/TownHall.algo.ts:574
	// this.justEliminatedPlayer.value === this.player3AlgoAddr.value.address
	bytec 2 //  "justEliminatedPlayer"
	app_global_get
	bytec 5 //  "player3AlgoAddr"
	app_global_get
	extract 0 32
	==
	bz *if26_end

	// *if26_consequent
	// contracts/TownHall.algo.ts:575
	// this.player3AlgoAddr.value.eliminated = 1
	bytec 5 //  "player3AlgoAddr"
	app_global_get
	bytec 12 // 0x0000000000000001
	replace2 32
	bytec 5 //  "player3AlgoAddr"
	swap
	app_global_put

*if26_end:
	// *if27_condition
	// contracts/TownHall.algo.ts:578
	// this.justEliminatedPlayer.value === this.player4AlgoAddr.value.address
	bytec 2 //  "justEliminatedPlayer"
	app_global_get
	bytec 6 //  "player4AlgoAddr"
	app_global_get
	extract 0 32
	==
	bz *if27_end

	// *if27_consequent
	// contracts/TownHall.algo.ts:579
	// this.player4AlgoAddr.value.eliminated = 1
	bytec 6 //  "player4AlgoAddr"
	app_global_get
	bytec 12 // 0x0000000000000001
	replace2 32
	bytec 6 //  "player4AlgoAddr"
	swap
	app_global_put

*if27_end:
	// *if28_condition
	// contracts/TownHall.algo.ts:582
	// this.justEliminatedPlayer.value === this.player5AlgoAddr.value.address
	bytec 2 //  "justEliminatedPlayer"
	app_global_get
	bytec 7 //  "player5AlgoAddr"
	app_global_get
	extract 0 32
	==
	bz *if28_end

	// *if28_consequent
	// contracts/TownHall.algo.ts:583
	// this.player5AlgoAddr.value.eliminated = 1
	bytec 7 //  "player5AlgoAddr"
	app_global_get
	bytec 12 // 0x0000000000000001
	replace2 32
	bytec 7 //  "player5AlgoAddr"
	swap
	app_global_put

*if28_end:
	// *if29_condition
	// contracts/TownHall.algo.ts:586
	// this.justEliminatedPlayer.value === this.player6AlgoAddr.value.address
	bytec 2 //  "justEliminatedPlayer"
	app_global_get
	bytec 8 //  "player6AlgoAddr"
	app_global_get
	extract 0 32
	==
	bz *if29_end

	// *if29_consequent
	// contracts/TownHall.algo.ts:587
	// this.player6AlgoAddr.value.eliminated = 1
	bytec 8 //  "player6AlgoAddr"
	app_global_get
	bytec 12 // 0x0000000000000001
	replace2 32
	bytec 8 //  "player6AlgoAddr"
	swap
	app_global_put

*if29_end:
	// contracts/TownHall.algo.ts:590
	// this.playersAlive.value -= 1
	bytec 14 //  "playersAlive"
	app_global_get
	intc 0 // 1
	-
	bytec 14 //  "playersAlive"
	swap
	app_global_put

	// contracts/TownHall.algo.ts:594
	// this.player1ReceivedVotes.value = 0
	bytec 15 //  "player1ReceivedVotes"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:595
	// this.player2ReceivedVotes.value = 0
	bytec 16 //  "player2ReceivedVotes"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:596
	// this.player3ReceivedVotes.value = 0
	bytec 17 //  "player3ReceivedVotes"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:597
	// this.player4ReceivedVotes.value = 0
	bytec 18 //  "player4ReceivedVotes"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:598
	// this.player5ReceivedVotes.value = 0
	bytec 19 //  "player5ReceivedVotes"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:599
	// this.player6ReceivedVotes.value = 0
	bytec 20 //  "player6ReceivedVotes"
	intc 1 // 0
	app_global_put

	// contracts/TownHall.algo.ts:601
	// this.gameState.value = stateDayStageUnmasking
	bytec 0 //  "gameState"
	intc 8 // 5
	app_global_put
	retsub

// dayStageUnmasking(byte[])void
*abi_route_dayStageUnmasking:
	// blsSk: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute dayStageUnmasking(byte[])void
	callsub dayStageUnmasking
	intc 0 // 1
	return

// dayStageUnmasking(blsSk: bytes): void
dayStageUnmasking:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dupn 2

	// contracts/TownHall.algo.ts:605
	// assert(
	//       this.gameState.value === stateDayStageUnmasking,
	//       'Invalid method call: Game is not in Day Stage Reveal state.'
	//     )
	bytec 0 //  "gameState"
	app_global_get
	intc 8 // 5
	==

	// Invalid method call: Game is not in Day Stage Reveal state.
	assert

	// contracts/TownHall.algo.ts:610
	// assert(this.justEliminatedPlayer.value === this.txn.sender, 'Error state: Other player called method.')
	bytec 2 //  "justEliminatedPlayer"
	app_global_get
	txn Sender
	==

	// Error state: Other player called method.
	assert

	// contracts/TownHall.algo.ts:613
	// BLS_PK = ecScalarMul('BLS12_381g1', hex(BLS12381G1_BASEPOINT_BYTES), blsSk)
	bytec 40 // 0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1
	frame_dig -1 // blsSk: bytes
	ec_scalar_mul BLS12_381g1
	frame_bury 0 // BLS_PK: byte[]

	// contracts/TownHall.algo.ts:614
	// hashToPoint = this.hashPointToPoint(BLS_PK)
	frame_dig 0 // BLS_PK: byte[]
	callsub hashPointToPoint
	frame_bury 1 // hashToPoint: byte[]

	// contracts/TownHall.algo.ts:615
	// genKeyImage = ecScalarMul('BLS12_381g1', hashToPoint, blsSk)
	frame_dig 1 // hashToPoint: byte[]
	frame_dig -1 // blsSk: bytes
	ec_scalar_mul BLS12_381g1
	frame_bury 2 // genKeyImage: byte[]

	// *if30_condition
	// contracts/TownHall.algo.ts:617
	// genKeyImage === this.mafiaKeyImage.value
	frame_dig 2 // genKeyImage: byte[]
	bytec 33 //  "mafiaKeyImage"
	app_global_get
	==
	bz *if30_end

	// *if30_consequent
	// contracts/TownHall.algo.ts:620
	// this.mafia.value = globals.zeroAddress
	bytec 21 //  "mafia"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:621
	// this.gameState.value = stateGameOver
	bytec 0 //  "gameState"
	intc 5 // 12
	app_global_put

	// contracts/TownHall.algo.ts:622
	// return;
	retsub

*if30_end:
	// *if31_condition
	// contracts/TownHall.algo.ts:625
	// genKeyImage === this.doctorKeyImage.value
	frame_dig 2 // genKeyImage: byte[]
	bytec 32 //  "doctorKeyImage"
	app_global_get
	==
	bz *if31_end

	// *if31_consequent
	// contracts/TownHall.algo.ts:627
	// this.doctor.value = globals.zeroAddress
	bytec 13 //  "doctor"
	global ZeroAddress
	app_global_put

*if31_end:
	// contracts/TownHall.algo.ts:630
	// this.justEliminatedPlayer.value = globals.zeroAddress
	bytec 2 //  "justEliminatedPlayer"
	global ZeroAddress
	app_global_put

	// *if32_condition
	// contracts/TownHall.algo.ts:632
	// this.playersAlive.value <= 2
	bytec 14 //  "playersAlive"
	app_global_get
	intc 2 // 2
	<=
	bz *if32_end

	// *if32_consequent
	// contracts/TownHall.algo.ts:635
	// this.gameState.value = stateGameOver
	bytec 0 //  "gameState"
	intc 5 // 12
	app_global_put

	// contracts/TownHall.algo.ts:636
	// return;
	retsub

*if32_end:
	// contracts/TownHall.algo.ts:639
	// this.gameState.value = stateNightStageMafiaCommit
	bytec 0 //  "gameState"
	intc 3 // 6
	app_global_put
	retsub

// nightStageMafiaCommit(byte[])void
*abi_route_nightStageMafiaCommit:
	// commitment: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute nightStageMafiaCommit(byte[])void
	callsub nightStageMafiaCommit
	intc 0 // 1
	return

// nightStageMafiaCommit(commitment: bytes): void
nightStageMafiaCommit:
	proto 1 0

	// contracts/TownHall.algo.ts:643
	// assert(
	//       this.gameState.value === stateNightStageMafiaCommit,
	//       'Invalid method call: Game is not in Night Stage Maffia Commit state.'
	//     )
	bytec 0 //  "gameState"
	app_global_get
	intc 3 // 6
	==

	// Invalid method call: Game is not in Night Stage Maffia Commit state.
	assert

	// contracts/TownHall.algo.ts:648
	// assert(this.txn.sender === this.mafia.value, 'Error state: Non-mafia player called method.')
	txn Sender
	bytec 21 //  "mafia"
	app_global_get
	==

	// Error state: Non-mafia player called method.
	assert

	// contracts/TownHall.algo.ts:650
	// this.mafiaCommitment.value = commitment
	bytec 44 //  "mafiaCommitment"
	frame_dig -1 // commitment: bytes
	app_global_put

	// *if33_condition
	// contracts/TownHall.algo.ts:652
	// this.doctor.value === globals.zeroAddress
	bytec 13 //  "doctor"
	app_global_get
	global ZeroAddress
	==
	bz *if33_else

	// *if33_consequent
	// contracts/TownHall.algo.ts:654
	// this.gameState.value = stateDawnStageMafiaReveal
	bytec 0 //  "gameState"
	intc 10 // 8
	app_global_put
	b *if33_end

*if33_else:
	// contracts/TownHall.algo.ts:656
	// this.gameState.value = stateNightStageDoctorCommit
	bytec 0 //  "gameState"
	intc 9 // 7
	app_global_put

*if33_end:
	retsub

// nightStageDoctorCommit(byte[])void
*abi_route_nightStageDoctorCommit:
	// commitment: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute nightStageDoctorCommit(byte[])void
	callsub nightStageDoctorCommit
	intc 0 // 1
	return

// nightStageDoctorCommit(commitment: bytes): void
nightStageDoctorCommit:
	proto 1 0

	// contracts/TownHall.algo.ts:661
	// assert(
	//       this.gameState.value === stateNightStageDoctorCommit,
	//       'Invalid method call: Game is not in Night Stage Doctor Commit state.'
	//     )
	bytec 0 //  "gameState"
	app_global_get
	intc 9 // 7
	==

	// Invalid method call: Game is not in Night Stage Doctor Commit state.
	assert

	// contracts/TownHall.algo.ts:666
	// assert(this.txn.sender === this.doctor.value, 'Error state: Non-doctor player called method.')
	txn Sender
	bytec 13 //  "doctor"
	app_global_get
	==

	// Error state: Non-doctor player called method.
	assert

	// contracts/TownHall.algo.ts:667
	// assert(
	//       this.doctor.value !== globals.zeroAddress,
	//       'Error state: Doctor is dead, should not have entered this state.'
	//     )
	bytec 13 //  "doctor"
	app_global_get
	global ZeroAddress
	!=

	// Error state: Doctor is dead, should not have entered this state.
	assert

	// contracts/TownHall.algo.ts:672
	// this.doctorCommitment.value = commitment
	bytec 41 //  "doctorCommitment"
	frame_dig -1 // commitment: bytes
	app_global_put

	// contracts/TownHall.algo.ts:674
	// this.gameState.value = stateDawnStageMafiaReveal
	bytec 0 //  "gameState"
	intc 10 // 8
	app_global_put
	retsub

// dawnStageMafiaReveal(address,byte[32])void
*abi_route_dawnStageMafiaReveal:
	// blinder: byte[32]
	txna ApplicationArgs 2
	dup
	len
	intc 6 // 32
	==

	// argument 0 (blinder) for dawnStageMafiaReveal must be a byte[32]
	assert

	// victimAim: address
	txna ApplicationArgs 1
	dup
	len
	intc 6 // 32
	==

	// argument 1 (victimAim) for dawnStageMafiaReveal must be a address
	assert

	// execute dawnStageMafiaReveal(address,byte[32])void
	callsub dawnStageMafiaReveal
	intc 0 // 1
	return

// dawnStageMafiaReveal(victimAim: Address, blinder: bytes32): void
dawnStageMafiaReveal:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x

	// contracts/TownHall.algo.ts:678
	// assert(
	//       this.gameState.value === stateDawnStageMafiaReveal,
	//       'Invalid method call: Game is not in Dawn Stage Maffia Reveal state.'
	//     )
	bytec 0 //  "gameState"
	app_global_get
	intc 10 // 8
	==

	// Invalid method call: Game is not in Dawn Stage Maffia Reveal state.
	assert

	// contracts/TownHall.algo.ts:683
	// assert(this.txn.sender === this.mafia.value, 'Error state: Non-mafia player called method.')
	txn Sender
	bytec 21 //  "mafia"
	app_global_get
	==

	// Error state: Non-mafia player called method.
	assert

	// contracts/TownHall.algo.ts:685
	// assert(victimAim !== globals.zeroAddress, 'Error state: Victim must be a valid address.')
	frame_dig -1 // victimAim: Address
	global ZeroAddress
	!=

	// Error state: Victim must be a valid address.
	assert

	// contracts/TownHall.algo.ts:689
	// reveal = sha256(concat(victimAim, blinder))
	frame_dig -1 // victimAim: Address
	frame_dig -2 // blinder: bytes32
	concat
	sha256
	frame_bury 0 // reveal: byte[32]

	// contracts/TownHall.algo.ts:691
	// assert(
	//       rawBytes(reveal) === this.mafiaCommitment.value,
	//       'Error state: Provided address + blinder does NOT match commitment.'
	//     )
	frame_dig 0 // reveal: byte[32]
	bytec 44 //  "mafiaCommitment"
	app_global_get
	==

	// Error state: Provided address + blinder does NOT match commitment.
	assert

	// *if34_condition
	// contracts/TownHall.algo.ts:696
	// victimAim === this.player1AlgoAddr.value.address
	frame_dig -1 // victimAim: Address
	bytec 3 //  "player1AlgoAddr"
	app_global_get
	extract 0 32
	==
	bz *if34_elseif1_condition

	// *if34_consequent
	// contracts/TownHall.algo.ts:697
	// this.mafiaVictim.value = this.player1AlgoAddr.value.address
	bytec 9 //  "mafiaVictim"
	bytec 3 //  "player1AlgoAddr"
	app_global_get
	extract 0 32
	app_global_put
	b *if34_end

*if34_elseif1_condition:
	// contracts/TownHall.algo.ts:698
	// victimAim === this.player2AlgoAddr.value.address
	frame_dig -1 // victimAim: Address
	bytec 4 //  "player2AlgoAddr"
	app_global_get
	extract 0 32
	==
	bz *if34_elseif2_condition

	// *if34_elseif1_consequent
	// contracts/TownHall.algo.ts:699
	// this.mafiaVictim.value = this.player2AlgoAddr.value.address
	bytec 9 //  "mafiaVictim"
	bytec 4 //  "player2AlgoAddr"
	app_global_get
	extract 0 32
	app_global_put
	b *if34_end

*if34_elseif2_condition:
	// contracts/TownHall.algo.ts:700
	// victimAim === this.player3AlgoAddr.value.address
	frame_dig -1 // victimAim: Address
	bytec 5 //  "player3AlgoAddr"
	app_global_get
	extract 0 32
	==
	bz *if34_elseif3_condition

	// *if34_elseif2_consequent
	// contracts/TownHall.algo.ts:701
	// this.mafiaVictim.value = this.player3AlgoAddr.value.address
	bytec 9 //  "mafiaVictim"
	bytec 5 //  "player3AlgoAddr"
	app_global_get
	extract 0 32
	app_global_put
	b *if34_end

*if34_elseif3_condition:
	// contracts/TownHall.algo.ts:702
	// victimAim === this.player4AlgoAddr.value.address
	frame_dig -1 // victimAim: Address
	bytec 6 //  "player4AlgoAddr"
	app_global_get
	extract 0 32
	==
	bz *if34_elseif4_condition

	// *if34_elseif3_consequent
	// contracts/TownHall.algo.ts:703
	// this.mafiaVictim.value = this.player4AlgoAddr.value.address
	bytec 9 //  "mafiaVictim"
	bytec 6 //  "player4AlgoAddr"
	app_global_get
	extract 0 32
	app_global_put
	b *if34_end

*if34_elseif4_condition:
	// contracts/TownHall.algo.ts:704
	// victimAim === this.player5AlgoAddr.value.address
	frame_dig -1 // victimAim: Address
	bytec 7 //  "player5AlgoAddr"
	app_global_get
	extract 0 32
	==
	bz *if34_elseif5_condition

	// *if34_elseif4_consequent
	// contracts/TownHall.algo.ts:705
	// this.mafiaVictim.value = this.player5AlgoAddr.value.address
	bytec 9 //  "mafiaVictim"
	bytec 7 //  "player5AlgoAddr"
	app_global_get
	extract 0 32
	app_global_put
	b *if34_end

*if34_elseif5_condition:
	// contracts/TownHall.algo.ts:706
	// victimAim === this.player6AlgoAddr.value.address
	frame_dig -1 // victimAim: Address
	bytec 8 //  "player6AlgoAddr"
	app_global_get
	extract 0 32
	==
	bz *if34_else

	// *if34_elseif5_consequent
	// contracts/TownHall.algo.ts:707
	// this.mafiaVictim.value = this.player6AlgoAddr.value.address
	bytec 9 //  "mafiaVictim"
	bytec 8 //  "player6AlgoAddr"
	app_global_get
	extract 0 32
	app_global_put
	b *if34_end

*if34_else:
	// contracts/TownHall.algo.ts:709
	// this.mafiaVictim.value = globals.zeroAddress
	bytec 9 //  "mafiaVictim"
	global ZeroAddress
	app_global_put

*if34_end:
	// *if35_condition
	// contracts/TownHall.algo.ts:715
	// this.doctor.value === globals.zeroAddress
	bytec 13 //  "doctor"
	app_global_get
	global ZeroAddress
	==
	bz *if35_else

	// *if35_consequent
	// contracts/TownHall.algo.ts:717
	// this.gameState.value = stateDawnStageDeadOrSaved
	bytec 0 //  "gameState"
	intc 11 // 10
	app_global_put
	b *if35_end

*if35_else:
	// contracts/TownHall.algo.ts:720
	// this.gameState.value = stateDawnStageDoctorReveal
	bytec 0 //  "gameState"
	intc 14 // 9
	app_global_put

*if35_end:
	retsub

// dawnStageDoctorReveal(address,byte[32])void
*abi_route_dawnStageDoctorReveal:
	// blinder: byte[32]
	txna ApplicationArgs 2
	dup
	len
	intc 6 // 32
	==

	// argument 0 (blinder) for dawnStageDoctorReveal must be a byte[32]
	assert

	// patientAim: address
	txna ApplicationArgs 1
	dup
	len
	intc 6 // 32
	==

	// argument 1 (patientAim) for dawnStageDoctorReveal must be a address
	assert

	// execute dawnStageDoctorReveal(address,byte[32])void
	callsub dawnStageDoctorReveal
	intc 0 // 1
	return

// dawnStageDoctorReveal(patientAim: Address, blinder: bytes32): void
dawnStageDoctorReveal:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x

	// contracts/TownHall.algo.ts:725
	// assert(
	//       this.gameState.value === stateDawnStageDoctorReveal,
	//       'Invalid method call: Game is not in Dawn Stage Doctor Reveal state.'
	//     )
	bytec 0 //  "gameState"
	app_global_get
	intc 14 // 9
	==

	// Invalid method call: Game is not in Dawn Stage Doctor Reveal state.
	assert

	// contracts/TownHall.algo.ts:730
	// assert(this.txn.sender === this.doctor.value, 'Error state: Non-doctor player called method.')
	txn Sender
	bytec 13 //  "doctor"
	app_global_get
	==

	// Error state: Non-doctor player called method.
	assert

	// contracts/TownHall.algo.ts:732
	// assert(this.doctorPatient.value === globals.zeroAddress, 'Error state: Doctor has already committed to a patient.')
	bytec 11 //  "doctorPatient"
	app_global_get
	global ZeroAddress
	==

	// Error state: Doctor has already committed to a patient.
	assert

	// contracts/TownHall.algo.ts:734
	// assert(patientAim !== globals.zeroAddress, 'Error state: Patient must be a valid address.')
	frame_dig -1 // patientAim: Address
	global ZeroAddress
	!=

	// Error state: Patient must be a valid address.
	assert

	// contracts/TownHall.algo.ts:738
	// reveal = sha256(concat(patientAim, blinder))
	frame_dig -1 // patientAim: Address
	frame_dig -2 // blinder: bytes32
	concat
	sha256
	frame_bury 0 // reveal: byte[32]

	// contracts/TownHall.algo.ts:740
	// assert(
	//       rawBytes(reveal) === this.doctorCommitment.value,
	//       'Error state: Provided address + blinder does NOT match commitment.'
	//     )
	frame_dig 0 // reveal: byte[32]
	bytec 41 //  "doctorCommitment"
	app_global_get
	==

	// Error state: Provided address + blinder does NOT match commitment.
	assert

	// *if36_condition
	// contracts/TownHall.algo.ts:745
	// patientAim === this.player1AlgoAddr.value.address
	frame_dig -1 // patientAim: Address
	bytec 3 //  "player1AlgoAddr"
	app_global_get
	extract 0 32
	==
	bz *if36_elseif1_condition

	// *if36_consequent
	// contracts/TownHall.algo.ts:746
	// this.doctorPatient.value = this.player1AlgoAddr.value.address
	bytec 11 //  "doctorPatient"
	bytec 3 //  "player1AlgoAddr"
	app_global_get
	extract 0 32
	app_global_put
	b *if36_end

*if36_elseif1_condition:
	// contracts/TownHall.algo.ts:747
	// patientAim === this.player2AlgoAddr.value.address
	frame_dig -1 // patientAim: Address
	bytec 4 //  "player2AlgoAddr"
	app_global_get
	extract 0 32
	==
	bz *if36_elseif2_condition

	// *if36_elseif1_consequent
	// contracts/TownHall.algo.ts:748
	// this.doctorPatient.value = this.player2AlgoAddr.value.address
	bytec 11 //  "doctorPatient"
	bytec 4 //  "player2AlgoAddr"
	app_global_get
	extract 0 32
	app_global_put
	b *if36_end

*if36_elseif2_condition:
	// contracts/TownHall.algo.ts:749
	// patientAim === this.player3AlgoAddr.value.address
	frame_dig -1 // patientAim: Address
	bytec 5 //  "player3AlgoAddr"
	app_global_get
	extract 0 32
	==
	bz *if36_elseif3_condition

	// *if36_elseif2_consequent
	// contracts/TownHall.algo.ts:750
	// this.doctorPatient.value = this.player3AlgoAddr.value.address
	bytec 11 //  "doctorPatient"
	bytec 5 //  "player3AlgoAddr"
	app_global_get
	extract 0 32
	app_global_put
	b *if36_end

*if36_elseif3_condition:
	// contracts/TownHall.algo.ts:751
	// patientAim === this.player4AlgoAddr.value.address
	frame_dig -1 // patientAim: Address
	bytec 6 //  "player4AlgoAddr"
	app_global_get
	extract 0 32
	==
	bz *if36_elseif4_condition

	// *if36_elseif3_consequent
	// contracts/TownHall.algo.ts:752
	// this.doctorPatient.value = this.player4AlgoAddr.value.address
	bytec 11 //  "doctorPatient"
	bytec 6 //  "player4AlgoAddr"
	app_global_get
	extract 0 32
	app_global_put
	b *if36_end

*if36_elseif4_condition:
	// contracts/TownHall.algo.ts:753
	// patientAim === this.player5AlgoAddr.value.address
	frame_dig -1 // patientAim: Address
	bytec 7 //  "player5AlgoAddr"
	app_global_get
	extract 0 32
	==
	bz *if36_elseif5_condition

	// *if36_elseif4_consequent
	// contracts/TownHall.algo.ts:754
	// this.doctorPatient.value = this.player5AlgoAddr.value.address
	bytec 11 //  "doctorPatient"
	bytec 7 //  "player5AlgoAddr"
	app_global_get
	extract 0 32
	app_global_put
	b *if36_end

*if36_elseif5_condition:
	// contracts/TownHall.algo.ts:755
	// patientAim === this.player6AlgoAddr.value.address
	frame_dig -1 // patientAim: Address
	bytec 8 //  "player6AlgoAddr"
	app_global_get
	extract 0 32
	==
	bz *if36_else

	// *if36_elseif5_consequent
	// contracts/TownHall.algo.ts:756
	// this.doctorPatient.value = this.player6AlgoAddr.value.address
	bytec 11 //  "doctorPatient"
	bytec 8 //  "player6AlgoAddr"
	app_global_get
	extract 0 32
	app_global_put
	b *if36_end

*if36_else:
	// contracts/TownHall.algo.ts:758
	// this.doctorPatient.value = globals.zeroAddress
	bytec 11 //  "doctorPatient"
	global ZeroAddress
	app_global_put

*if36_end:
	// contracts/TownHall.algo.ts:764
	// this.gameState.value = stateDawnStageDeadOrSaved
	bytec 0 //  "gameState"
	intc 11 // 10
	app_global_put
	retsub

// dawnStageDeadOrSaved()void
*abi_route_dawnStageDeadOrSaved:
	// execute dawnStageDeadOrSaved()void
	callsub dawnStageDeadOrSaved
	intc 0 // 1
	return

// dawnStageDeadOrSaved(): void
dawnStageDeadOrSaved:
	proto 0 0

	// contracts/TownHall.algo.ts:768
	// assert(
	//       this.gameState.value === stateDawnStageDeadOrSaved,
	//       'Invalid method call: Game is not in Dawn Stage DeadOrSaved? state.'
	//     )
	bytec 0 //  "gameState"
	app_global_get
	intc 11 // 10
	==

	// Invalid method call: Game is not in Dawn Stage DeadOrSaved? state.
	assert

	// *if37_condition
	// contracts/TownHall.algo.ts:773
	// this.mafiaVictim.value === globals.zeroAddress || this.mafiaVictim.value === this.doctorPatient.value
	bytec 9 //  "mafiaVictim"
	app_global_get
	global ZeroAddress
	==
	dup
	bnz *skip_or16
	bytec 9 //  "mafiaVictim"
	app_global_get
	bytec 11 //  "doctorPatient"
	app_global_get
	==
	||

*skip_or16:
	bz *if37_end

	// *if37_consequent
	// contracts/TownHall.algo.ts:778
	// this.mafiaVictim.value = globals.zeroAddress
	bytec 9 //  "mafiaVictim"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:779
	// this.doctorPatient.value = globals.zeroAddress
	bytec 11 //  "doctorPatient"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:780
	// this.gameState.value = stateDayStageVote
	bytec 0 //  "gameState"
	intc 4 // 3
	app_global_put

	// contracts/TownHall.algo.ts:781
	// return;
	retsub

*if37_end:
	// *if38_condition
	// contracts/TownHall.algo.ts:786
	// this.mafiaVictim.value === this.player1AlgoAddr.value.address
	bytec 9 //  "mafiaVictim"
	app_global_get
	bytec 3 //  "player1AlgoAddr"
	app_global_get
	extract 0 32
	==
	bz *if38_elseif1_condition

	// *if38_consequent
	// contracts/TownHall.algo.ts:787
	// this.justEliminatedPlayer.value = this.player1AlgoAddr.value.address
	bytec 2 //  "justEliminatedPlayer"
	bytec 3 //  "player1AlgoAddr"
	app_global_get
	extract 0 32
	app_global_put

	// contracts/TownHall.algo.ts:788
	// this.player1AlgoAddr.value.eliminated = 1
	bytec 3 //  "player1AlgoAddr"
	app_global_get
	bytec 12 // 0x0000000000000001
	replace2 32
	bytec 3 //  "player1AlgoAddr"
	swap
	app_global_put
	b *if38_end

*if38_elseif1_condition:
	// contracts/TownHall.algo.ts:789
	// this.mafiaVictim.value === this.player2AlgoAddr.value.address
	bytec 9 //  "mafiaVictim"
	app_global_get
	bytec 4 //  "player2AlgoAddr"
	app_global_get
	extract 0 32
	==
	bz *if38_elseif2_condition

	// *if38_elseif1_consequent
	// contracts/TownHall.algo.ts:790
	// this.justEliminatedPlayer.value = this.player2AlgoAddr.value.address
	bytec 2 //  "justEliminatedPlayer"
	bytec 4 //  "player2AlgoAddr"
	app_global_get
	extract 0 32
	app_global_put

	// contracts/TownHall.algo.ts:791
	// this.player2AlgoAddr.value.eliminated = 1
	bytec 4 //  "player2AlgoAddr"
	app_global_get
	bytec 12 // 0x0000000000000001
	replace2 32
	bytec 4 //  "player2AlgoAddr"
	swap
	app_global_put
	b *if38_end

*if38_elseif2_condition:
	// contracts/TownHall.algo.ts:792
	// this.mafiaVictim.value === this.player3AlgoAddr.value.address
	bytec 9 //  "mafiaVictim"
	app_global_get
	bytec 5 //  "player3AlgoAddr"
	app_global_get
	extract 0 32
	==
	bz *if38_elseif3_condition

	// *if38_elseif2_consequent
	// contracts/TownHall.algo.ts:793
	// this.justEliminatedPlayer.value = this.player3AlgoAddr.value.address
	bytec 2 //  "justEliminatedPlayer"
	bytec 5 //  "player3AlgoAddr"
	app_global_get
	extract 0 32
	app_global_put

	// contracts/TownHall.algo.ts:794
	// this.player3AlgoAddr.value.eliminated = 1
	bytec 5 //  "player3AlgoAddr"
	app_global_get
	bytec 12 // 0x0000000000000001
	replace2 32
	bytec 5 //  "player3AlgoAddr"
	swap
	app_global_put
	b *if38_end

*if38_elseif3_condition:
	// contracts/TownHall.algo.ts:795
	// this.mafiaVictim.value === this.player4AlgoAddr.value.address
	bytec 9 //  "mafiaVictim"
	app_global_get
	bytec 6 //  "player4AlgoAddr"
	app_global_get
	extract 0 32
	==
	bz *if38_elseif4_condition

	// *if38_elseif3_consequent
	// contracts/TownHall.algo.ts:796
	// this.justEliminatedPlayer.value = this.player4AlgoAddr.value.address
	bytec 2 //  "justEliminatedPlayer"
	bytec 6 //  "player4AlgoAddr"
	app_global_get
	extract 0 32
	app_global_put

	// contracts/TownHall.algo.ts:797
	// this.player4AlgoAddr.value.eliminated = 1
	bytec 6 //  "player4AlgoAddr"
	app_global_get
	bytec 12 // 0x0000000000000001
	replace2 32
	bytec 6 //  "player4AlgoAddr"
	swap
	app_global_put
	b *if38_end

*if38_elseif4_condition:
	// contracts/TownHall.algo.ts:798
	// this.mafiaVictim.value === this.player5AlgoAddr.value.address
	bytec 9 //  "mafiaVictim"
	app_global_get
	bytec 7 //  "player5AlgoAddr"
	app_global_get
	extract 0 32
	==
	bz *if38_elseif5_condition

	// *if38_elseif4_consequent
	// contracts/TownHall.algo.ts:799
	// this.justEliminatedPlayer.value = this.player5AlgoAddr.value.address
	bytec 2 //  "justEliminatedPlayer"
	bytec 7 //  "player5AlgoAddr"
	app_global_get
	extract 0 32
	app_global_put

	// contracts/TownHall.algo.ts:800
	// this.player5AlgoAddr.value.eliminated = 1
	bytec 7 //  "player5AlgoAddr"
	app_global_get
	bytec 12 // 0x0000000000000001
	replace2 32
	bytec 7 //  "player5AlgoAddr"
	swap
	app_global_put
	b *if38_end

*if38_elseif5_condition:
	// contracts/TownHall.algo.ts:801
	// this.mafiaVictim.value === this.player6AlgoAddr.value.address
	bytec 9 //  "mafiaVictim"
	app_global_get
	bytec 8 //  "player6AlgoAddr"
	app_global_get
	extract 0 32
	==
	bz *if38_else

	// *if38_elseif5_consequent
	// contracts/TownHall.algo.ts:802
	// this.justEliminatedPlayer.value = this.player6AlgoAddr.value.address
	bytec 2 //  "justEliminatedPlayer"
	bytec 8 //  "player6AlgoAddr"
	app_global_get
	extract 0 32
	app_global_put

	// contracts/TownHall.algo.ts:803
	// this.player6AlgoAddr.value.eliminated = 1
	bytec 8 //  "player6AlgoAddr"
	app_global_get
	bytec 12 // 0x0000000000000001
	replace2 32
	bytec 8 //  "player6AlgoAddr"
	swap
	app_global_put
	b *if38_end

*if38_else:
	// Error state: Victim must be a player! Should not have entered this state.
	err

*if38_end:
	// contracts/TownHall.algo.ts:808
	// this.playersAlive.value -= 1
	bytec 14 //  "playersAlive"
	app_global_get
	intc 0 // 1
	-
	bytec 14 //  "playersAlive"
	swap
	app_global_put

	// contracts/TownHall.algo.ts:810
	// this.mafiaVictim.value = globals.zeroAddress
	bytec 9 //  "mafiaVictim"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:811
	// this.doctorPatient.value = globals.zeroAddress
	bytec 11 //  "doctorPatient"
	global ZeroAddress
	app_global_put

	// *if39_condition
	// contracts/TownHall.algo.ts:813
	// this.playersAlive.value <= 2
	bytec 14 //  "playersAlive"
	app_global_get
	intc 2 // 2
	<=
	bz *if39_end

	// *if39_consequent
	// contracts/TownHall.algo.ts:816
	// this.gameState.value = stateGameOver
	bytec 0 //  "gameState"
	intc 5 // 12
	app_global_put

	// contracts/TownHall.algo.ts:817
	// return;
	retsub

*if39_end:
	// contracts/TownHall.algo.ts:820
	// this.gameState.value = stateDawnStageUnmasking
	bytec 0 //  "gameState"
	intc 15 // 11
	app_global_put
	retsub

// dawnStageUnmasking(byte[])void
*abi_route_dawnStageUnmasking:
	// blsSk: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute dawnStageUnmasking(byte[])void
	callsub dawnStageUnmasking
	intc 0 // 1
	return

// dawnStageUnmasking(blsSk: bytes): void
dawnStageUnmasking:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dupn 2

	// contracts/TownHall.algo.ts:829
	// assert(
	//       this.gameState.value === stateDawnStageUnmasking,
	//       'Invalid method call: Game is not in Dawn Stage Unmasking state.'
	//     )
	bytec 0 //  "gameState"
	app_global_get
	intc 15 // 11
	==

	// Invalid method call: Game is not in Dawn Stage Unmasking state.
	assert

	// contracts/TownHall.algo.ts:834
	// assert(this.justEliminatedPlayer.value === this.txn.sender, 'Error state: Other player called method.')
	bytec 2 //  "justEliminatedPlayer"
	app_global_get
	txn Sender
	==

	// Error state: Other player called method.
	assert

	// contracts/TownHall.algo.ts:837
	// BLS_PK = ecScalarMul('BLS12_381g1', hex(BLS12381G1_BASEPOINT_BYTES), blsSk)
	bytec 40 // 0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1
	frame_dig -1 // blsSk: bytes
	ec_scalar_mul BLS12_381g1
	frame_bury 0 // BLS_PK: byte[]

	// contracts/TownHall.algo.ts:838
	// hashToPoint = this.hashPointToPoint(BLS_PK)
	frame_dig 0 // BLS_PK: byte[]
	callsub hashPointToPoint
	frame_bury 1 // hashToPoint: byte[]

	// contracts/TownHall.algo.ts:839
	// genKeyImage = ecScalarMul('BLS12_381g1', hashToPoint, blsSk)
	frame_dig 1 // hashToPoint: byte[]
	frame_dig -1 // blsSk: bytes
	ec_scalar_mul BLS12_381g1
	frame_bury 2 // genKeyImage: byte[]

	// *if40_condition
	// contracts/TownHall.algo.ts:841
	// genKeyImage === this.mafiaKeyImage.value
	frame_dig 2 // genKeyImage: byte[]
	bytec 33 //  "mafiaKeyImage"
	app_global_get
	==
	bz *if40_end

	// *if40_consequent
	// contracts/TownHall.algo.ts:845
	// this.gameState.value = stateGameOver
	bytec 0 //  "gameState"
	intc 5 // 12
	app_global_put

	// contracts/TownHall.algo.ts:846
	// this.mafia.value = globals.zeroAddress
	bytec 21 //  "mafia"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:847
	// return;
	retsub

*if40_end:
	// *if41_condition
	// contracts/TownHall.algo.ts:850
	// genKeyImage === this.doctorKeyImage.value
	frame_dig 2 // genKeyImage: byte[]
	bytec 32 //  "doctorKeyImage"
	app_global_get
	==
	bz *if41_end

	// *if41_consequent
	// contracts/TownHall.algo.ts:852
	// this.doctor.value = globals.zeroAddress
	bytec 13 //  "doctor"
	global ZeroAddress
	app_global_put

*if41_end:
	// contracts/TownHall.algo.ts:856
	// this.justEliminatedPlayer.value = globals.zeroAddress
	bytec 2 //  "justEliminatedPlayer"
	global ZeroAddress
	app_global_put

	// contracts/TownHall.algo.ts:858
	// this.gameState.value = stateDayStageVote
	bytec 0 //  "gameState"
	intc 4 // 3
	app_global_put
	retsub

// gameOver()void
*abi_route_gameOver:
	// execute gameOver()void
	callsub gameOver
	intc 0 // 1
	return

// gameOver(): void
gameOver:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x

	// contracts/TownHall.algo.ts:863
	// assert(this.gameState.value === stateGameOver, 'Invalid method call: Game is not in Game Over state.')
	bytec 0 //  "gameState"
	app_global_get
	intc 5 // 12
	==

	// Invalid method call: Game is not in Game Over state.
	assert

	// contracts/TownHall.algo.ts:864
	// this.quickAccessPKBoxes(0).delete()
	bytec 10 // 0x0000000000000000
	box_del

	// contracts/TownHall.algo.ts:865
	// this.hashFilter(rawBytes(sha256(this.mafiaKeyImage.value))).delete()
	bytec 33 //  "mafiaKeyImage"
	app_global_get
	sha256
	box_del

	// contracts/TownHall.algo.ts:866
	// this.hashFilter(rawBytes(sha256(this.doctorKeyImage.value))).delete()
	bytec 32 //  "doctorKeyImage"
	app_global_get
	sha256
	box_del

	// contracts/TownHall.algo.ts:867
	// this.hashFilter(rawBytes(sha256(this.farmerKeyImage.value))).delete()
	bytec 45 //  "farmerKeyImage"
	app_global_get
	sha256
	box_del

	// contracts/TownHall.algo.ts:868
	// this.hashFilter(rawBytes(sha256(this.butcherKeyImage.value))).delete()
	bytec 42 //  "butcherKeyImage"
	app_global_get
	sha256
	box_del

	// contracts/TownHall.algo.ts:869
	// this.hashFilter(rawBytes(sha256(this.innkeepKeyImage.value))).delete()
	bytec 43 //  "innkeepKeyImage"
	app_global_get
	sha256
	box_del

	// contracts/TownHall.algo.ts:870
	// this.hashFilter(rawBytes(sha256(this.grocerKeyImage.value))).delete()
	bytec 46 //  "grocerKeyImage"
	app_global_get
	sha256
	box_del

	// contracts/TownHall.algo.ts:872
	// returnAmount = SLASH_DEPOSIT_AMOUNT - globals.minTxnFee
	pushint 1000000
	global MinTxnFee
	-
	frame_bury 0 // returnAmount: uint64

	// contracts/TownHall.algo.ts:874
	// sendPayment({
	//       amount: returnAmount,
	//       receiver: this.player1AlgoAddr.value.address,
	//       fee: globals.minTxnFee,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts/TownHall.algo.ts:875
	// amount: returnAmount
	frame_dig 0 // returnAmount: uint64
	itxn_field Amount

	// contracts/TownHall.algo.ts:876
	// receiver: this.player1AlgoAddr.value.address
	bytec 3 //  "player1AlgoAddr"
	app_global_get
	extract 0 32
	itxn_field Receiver

	// contracts/TownHall.algo.ts:877
	// fee: globals.minTxnFee
	global MinTxnFee
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/TownHall.algo.ts:880
	// sendPayment({
	//       amount: returnAmount,
	//       receiver: this.player2AlgoAddr.value.address,
	//       fee: globals.minTxnFee,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts/TownHall.algo.ts:881
	// amount: returnAmount
	frame_dig 0 // returnAmount: uint64
	itxn_field Amount

	// contracts/TownHall.algo.ts:882
	// receiver: this.player2AlgoAddr.value.address
	bytec 4 //  "player2AlgoAddr"
	app_global_get
	extract 0 32
	itxn_field Receiver

	// contracts/TownHall.algo.ts:883
	// fee: globals.minTxnFee
	global MinTxnFee
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/TownHall.algo.ts:885
	// sendPayment({
	//       amount: returnAmount,
	//       receiver: this.player3AlgoAddr.value.address,
	//       fee: globals.minTxnFee,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts/TownHall.algo.ts:886
	// amount: returnAmount
	frame_dig 0 // returnAmount: uint64
	itxn_field Amount

	// contracts/TownHall.algo.ts:887
	// receiver: this.player3AlgoAddr.value.address
	bytec 5 //  "player3AlgoAddr"
	app_global_get
	extract 0 32
	itxn_field Receiver

	// contracts/TownHall.algo.ts:888
	// fee: globals.minTxnFee
	global MinTxnFee
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/TownHall.algo.ts:891
	// sendPayment({
	//       amount: returnAmount,
	//       receiver: this.player4AlgoAddr.value.address,
	//       fee: globals.minTxnFee,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts/TownHall.algo.ts:892
	// amount: returnAmount
	frame_dig 0 // returnAmount: uint64
	itxn_field Amount

	// contracts/TownHall.algo.ts:893
	// receiver: this.player4AlgoAddr.value.address
	bytec 6 //  "player4AlgoAddr"
	app_global_get
	extract 0 32
	itxn_field Receiver

	// contracts/TownHall.algo.ts:894
	// fee: globals.minTxnFee
	global MinTxnFee
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/TownHall.algo.ts:897
	// sendPayment({
	//       amount: returnAmount,
	//       receiver: this.player5AlgoAddr.value.address,
	//       fee: globals.minTxnFee,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts/TownHall.algo.ts:898
	// amount: returnAmount
	frame_dig 0 // returnAmount: uint64
	itxn_field Amount

	// contracts/TownHall.algo.ts:899
	// receiver: this.player5AlgoAddr.value.address
	bytec 7 //  "player5AlgoAddr"
	app_global_get
	extract 0 32
	itxn_field Receiver

	// contracts/TownHall.algo.ts:900
	// fee: globals.minTxnFee
	global MinTxnFee
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/TownHall.algo.ts:903
	// sendPayment({
	//       amount: returnAmount,
	//       receiver: this.player6AlgoAddr.value.address,
	//       fee: globals.minTxnFee,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts/TownHall.algo.ts:904
	// amount: returnAmount
	frame_dig 0 // returnAmount: uint64
	itxn_field Amount

	// contracts/TownHall.algo.ts:905
	// receiver: this.player6AlgoAddr.value.address
	bytec 8 //  "player6AlgoAddr"
	app_global_get
	extract 0 32
	itxn_field Receiver

	// contracts/TownHall.algo.ts:906
	// fee: globals.minTxnFee
	global MinTxnFee
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	intc 0 // 1
	return

// deleteApplication(): void
deleteApplication:
	proto 0 0

	// contracts/TownHall.algo.ts:911
	// assert(this.gameState.value === stateGameOver, 'Invalid method call: Game is not in Game Over state.')
	bytec 0 //  "gameState"
	app_global_get
	intc 5 // 12
	==

	// Invalid method call: Game is not in Game Over state.
	assert

	// contracts/TownHall.algo.ts:912
	// sendPayment({ closeRemainderTo: this.creatorAddress.value })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts/TownHall.algo.ts:912
	// closeRemainderTo: this.creatorAddress.value
	bytec 35 //  "creatorAddress"
	app_global_get
	itxn_field CloseRemainderTo

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x70ceea1b // method "dummyOpUp(uint64)uint64"
	pushbytes 0xa017bd8c // method "dlog(byte[],byte[],byte[],byte[])bool"
	pushbytes 0xd772cdbc // method "hashPointToPoint(byte[])byte[]"
	pushbytes 0xf540ba2c // method "getGameState()uint64"
	pushbytes 0xff630efd // method "setLSIGFunderAddress(address)void"
	pushbytes 0x54d92be3 // method "joinGameLobby(pay,byte[])void"
	pushbytes 0x9b07bf8f // method "assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void"
	pushbytes 0x4fb121bb // method "dayStageVote(uint64)void"
	pushbytes 0xc4236169 // method "dayStageEliminate()void"
	pushbytes 0xee9f361a // method "dayStageUnmasking(byte[])void"
	pushbytes 0x0b5e7585 // method "nightStageMafiaCommit(byte[])void"
	pushbytes 0xc8645875 // method "nightStageDoctorCommit(byte[])void"
	pushbytes 0xedc486bb // method "dawnStageMafiaReveal(address,byte[32])void"
	pushbytes 0x773762e5 // method "dawnStageDoctorReveal(address,byte[32])void"
	pushbytes 0x3995ed6a // method "dawnStageDeadOrSaved()void"
	pushbytes 0xef65a697 // method "dawnStageUnmasking(byte[])void"
	pushbytes 0x6adb4538 // method "gameOver()void"
	txna ApplicationArgs 0
	match *abi_route_dummyOpUp *abi_route_dlog *abi_route_hashPointToPoint *abi_route_getGameState *abi_route_setLSIGFunderAddress *abi_route_joinGameLobby *abi_route_assignRole *abi_route_dayStageVote *abi_route_dayStageEliminate *abi_route_dayStageUnmasking *abi_route_nightStageMafiaCommit *abi_route_nightStageDoctorCommit *abi_route_dawnStageMafiaReveal *abi_route_dawnStageDoctorReveal *abi_route_dawnStageDeadOrSaved *abi_route_dawnStageUnmasking *abi_route_gameOver

	// this contract does not implement the given ABI method for call NoOp
	err

*call_DeleteApplication:
	pushbytes 0x2487c32c // method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err