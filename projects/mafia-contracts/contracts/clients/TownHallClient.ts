/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"TownHall","desc":"","methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"dummyOpUp","desc":"Dummy Op Up\nDummy operation to get more opcode budget\n - The number to return, necssary to deduplicate the name","args":[{"name":"i","type":"uint64"}],"returns":{"type":"uint64","desc":"the number (but we do nothing with it)"},"actions":{"create":[],"call":["NoOp"]}},{"name":"dlog","args":[{"name":"g","type":"byte[]"},{"name":"x","type":"byte[]"},{"name":"v","type":"byte[]"},{"name":"z","type":"byte[]"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]}},{"name":"hashPointToPoint","args":[{"name":"point","type":"byte[]"}],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getGameState","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"setLSIGFunderAddress","args":[{"name":"funderLSigAddress","type":"address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"joinGameLobby","args":[{"name":"depositTxn","type":"pay"},{"name":"NIZK_DLOG","type":"byte[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"assignRole","args":[{"name":"msg","type":"byte[]"},{"name":"pkAll","type":"byte[]"},{"name":"keyImage","type":"byte[]"},{"name":"sig","type":"byte[]"},{"name":"challenges","type":"byte[]"},{"name":"funderLSigTxn","type":"pay"},{"name":"ringLSigTxn0","type":"pay"},{"name":"ringLSigTxn1","type":"pay"},{"name":"ringLSigTxn2","type":"pay"},{"name":"ringLSigTxn3","type":"pay"},{"name":"ringLSigTxn4","type":"pay"},{"name":"ringLSigTxn5","type":"pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"dayStageVote","args":[{"name":"vote","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"dayStageEliminate","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"dayStageUnmasking","args":[{"name":"blsSk","type":"byte[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"nightStageMafiaCommit","args":[{"name":"commitment","type":"byte[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"nightStageDoctorCommit","args":[{"name":"commitment","type":"byte[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"dawnStageMafiaReveal","args":[{"name":"victimAim","type":"address"},{"name":"blinder","type":"byte[32]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"dawnStageDoctorReveal","args":[{"name":"patientAim","type":"address"},{"name":"blinder","type":"byte[32]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"dawnStageDeadOrSaved","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"dawnStageUnmasking","args":[{"name":"blsSk","type":"byte[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"gameOver","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":20,"ints":16},"local":{"bytes":0,"ints":0}},"keys":{"global":{"player1AlgoAddr":{"key":"cGxheWVyMUFsZ29BZGRy","keyType":"AVMBytes","valueType":"address"},"player2AlgoAddr":{"key":"cGxheWVyMkFsZ29BZGRy","keyType":"AVMBytes","valueType":"address"},"player3AlgoAddr":{"key":"cGxheWVyM0FsZ29BZGRy","keyType":"AVMBytes","valueType":"address"},"player4AlgoAddr":{"key":"cGxheWVyNEFsZ29BZGRy","keyType":"AVMBytes","valueType":"address"},"player5AlgoAddr":{"key":"cGxheWVyNUFsZ29BZGRy","keyType":"AVMBytes","valueType":"address"},"player6AlgoAddr":{"key":"cGxheWVyNkFsZ29BZGRy","keyType":"AVMBytes","valueType":"address"},"mafia":{"key":"bWFmaWE=","keyType":"AVMBytes","valueType":"address"},"mafiaKeyImage":{"key":"bWFmaWFLZXlJbWFnZQ==","keyType":"AVMBytes","valueType":"AVMBytes"},"doctor":{"key":"ZG9jdG9y","keyType":"AVMBytes","valueType":"address"},"doctorKeyImage":{"key":"ZG9jdG9yS2V5SW1hZ2U=","keyType":"AVMBytes","valueType":"AVMBytes"},"farmer":{"key":"ZmFybWVy","keyType":"AVMBytes","valueType":"address"},"butcher":{"key":"YnV0Y2hlcg==","keyType":"AVMBytes","valueType":"address"},"innkeep":{"key":"aW5ua2VlcA==","keyType":"AVMBytes","valueType":"address"},"grocer":{"key":"Z3JvY2Vy","keyType":"AVMBytes","valueType":"address"},"lsigFunderAddress":{"key":"bHNpZ0Z1bmRlckFkZHJlc3M=","keyType":"AVMBytes","valueType":"address"},"player1HasVoted":{"key":"cGxheWVyMUhhc1ZvdGVk","keyType":"AVMBytes","valueType":"uint64"},"player1ReceivedVotes":{"key":"cGxheWVyMVJlY2VpdmVkVm90ZXM=","keyType":"AVMBytes","valueType":"uint64"},"player2HasVoted":{"key":"cGxheWVyMkhhc1ZvdGVk","keyType":"AVMBytes","valueType":"uint64"},"player2ReceivedVotes":{"key":"cGxheWVyMlJlY2VpdmVkVm90ZXM=","keyType":"AVMBytes","valueType":"uint64"},"player3HasVoted":{"key":"cGxheWVyM0hhc1ZvdGVk","keyType":"AVMBytes","valueType":"uint64"},"player3ReceivedVotes":{"key":"cGxheWVyM1JlY2VpdmVkVm90ZXM=","keyType":"AVMBytes","valueType":"uint64"},"player4HasVoted":{"key":"cGxheWVyNEhhc1ZvdGVk","keyType":"AVMBytes","valueType":"uint64"},"player4ReceivedVotes":{"key":"cGxheWVyNFJlY2VpdmVkVm90ZXM=","keyType":"AVMBytes","valueType":"uint64"},"player5HasVoted":{"key":"cGxheWVyNUhhc1ZvdGVk","keyType":"AVMBytes","valueType":"uint64"},"player5ReceivedVotes":{"key":"cGxheWVyNVJlY2VpdmVkVm90ZXM=","keyType":"AVMBytes","valueType":"uint64"},"player6HasVoted":{"key":"cGxheWVyNkhhc1ZvdGVk","keyType":"AVMBytes","valueType":"uint64"},"player6ReceivedVotes":{"key":"cGxheWVyNlJlY2VpdmVkVm90ZXM=","keyType":"AVMBytes","valueType":"uint64"},"playersVoted":{"key":"cGxheWVyc1ZvdGVk","keyType":"AVMBytes","valueType":"uint64"},"playersAlive":{"key":"cGxheWVyc0FsaXZl","keyType":"AVMBytes","valueType":"uint64"},"justEliminatedPlayer":{"key":"anVzdEVsaW1pbmF0ZWRQbGF5ZXI=","keyType":"AVMBytes","valueType":"address"},"mafiaCommitment":{"key":"bWFmaWFDb21taXRtZW50","keyType":"AVMBytes","valueType":"AVMBytes"},"doctorCommitment":{"key":"ZG9jdG9yQ29tbWl0bWVudA==","keyType":"AVMBytes","valueType":"AVMBytes"},"mafiaVictim":{"key":"bWFmaWFWaWN0aW0=","keyType":"AVMBytes","valueType":"address"},"doctorPatient":{"key":"ZG9jdG9yUGF0aWVudA==","keyType":"AVMBytes","valueType":"address"},"playersJoined":{"key":"cGxheWVyc0pvaW5lZA==","keyType":"AVMBytes","valueType":"uint64"},"gameState":{"key":"Z2FtZVN0YXRl","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"quickAccessPKBoxes":{"keyType":"uint64","valueType":"AVMBytes"},"hashFilter":{"keyType":"AVMBytes","valueType":"AVMBytes"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/TownHall.algo.ts:32","pc":[0]},{"teal":2,"source":"contracts/TownHall.algo.ts:32","pc":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]},{"teal":3,"source":"contracts/TownHall.algo.ts:32","pc":[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672]},{"teal":15,"source":"contracts/TownHall.algo.ts:32","pc":[673,674]},{"teal":16,"source":"contracts/TownHall.algo.ts:32","pc":[675]},{"teal":17,"source":"contracts/TownHall.algo.ts:32","pc":[676]},{"teal":18,"source":"contracts/TownHall.algo.ts:32","pc":[677]},{"teal":19,"source":"contracts/TownHall.algo.ts:32","pc":[678,679]},{"teal":20,"source":"contracts/TownHall.algo.ts:32","pc":[680]},{"teal":21,"source":"contracts/TownHall.algo.ts:32","pc":[681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706]},{"teal":25,"source":"contracts/TownHall.algo.ts:32","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[707]},{"teal":30,"source":"contracts/TownHall.algo.ts:123","pc":[708,709,710]},{"teal":31,"source":"contracts/TownHall.algo.ts:123","pc":[711]},{"teal":32,"source":"contracts/TownHall.algo.ts:123","pc":[712]},{"teal":36,"source":"contracts/TownHall.algo.ts:123","pc":[713,714,715]},{"teal":40,"source":"contracts/TownHall.algo.ts:124","pc":[716,717]},{"teal":41,"source":"contracts/TownHall.algo.ts:124","pc":[718,719]},{"teal":42,"source":"contracts/TownHall.algo.ts:124","pc":[720]},{"teal":46,"source":"contracts/TownHall.algo.ts:126","pc":[721,722]},{"teal":47,"source":"contracts/TownHall.algo.ts:126","pc":[723,724]},{"teal":48,"source":"contracts/TownHall.algo.ts:126","pc":[725]},{"teal":52,"source":"contracts/TownHall.algo.ts:127","pc":[726,727]},{"teal":53,"source":"contracts/TownHall.algo.ts:127","pc":[728,729]},{"teal":54,"source":"contracts/TownHall.algo.ts:127","pc":[730]},{"teal":58,"source":"contracts/TownHall.algo.ts:128","pc":[731,732]},{"teal":59,"source":"contracts/TownHall.algo.ts:128","pc":[733,734]},{"teal":60,"source":"contracts/TownHall.algo.ts:128","pc":[735]},{"teal":64,"source":"contracts/TownHall.algo.ts:129","pc":[736,737]},{"teal":65,"source":"contracts/TownHall.algo.ts:129","pc":[738,739]},{"teal":66,"source":"contracts/TownHall.algo.ts:129","pc":[740]},{"teal":70,"source":"contracts/TownHall.algo.ts:130","pc":[741,742]},{"teal":71,"source":"contracts/TownHall.algo.ts:130","pc":[743,744]},{"teal":72,"source":"contracts/TownHall.algo.ts:130","pc":[745]},{"teal":76,"source":"contracts/TownHall.algo.ts:131","pc":[746,747]},{"teal":77,"source":"contracts/TownHall.algo.ts:131","pc":[748,749]},{"teal":78,"source":"contracts/TownHall.algo.ts:131","pc":[750]},{"teal":82,"source":"contracts/TownHall.algo.ts:133","pc":[751,752]},{"teal":83,"source":"contracts/TownHall.algo.ts:133","pc":[753,754]},{"teal":84,"source":"contracts/TownHall.algo.ts:133","pc":[755]},{"teal":88,"source":"contracts/TownHall.algo.ts:134","pc":[756,757]},{"teal":89,"source":"contracts/TownHall.algo.ts:134","pc":[758,759]},{"teal":90,"source":"contracts/TownHall.algo.ts:134","pc":[760]},{"teal":94,"source":"contracts/TownHall.algo.ts:135","pc":[761,762]},{"teal":95,"source":"contracts/TownHall.algo.ts:135","pc":[763,764]},{"teal":96,"source":"contracts/TownHall.algo.ts:135","pc":[765]},{"teal":100,"source":"contracts/TownHall.algo.ts:136","pc":[766,767]},{"teal":101,"source":"contracts/TownHall.algo.ts:136","pc":[768,769]},{"teal":102,"source":"contracts/TownHall.algo.ts:136","pc":[770]},{"teal":106,"source":"contracts/TownHall.algo.ts:137","pc":[771,772]},{"teal":107,"source":"contracts/TownHall.algo.ts:137","pc":[773,774]},{"teal":108,"source":"contracts/TownHall.algo.ts:137","pc":[775]},{"teal":112,"source":"contracts/TownHall.algo.ts:138","pc":[776,777]},{"teal":113,"source":"contracts/TownHall.algo.ts:138","pc":[778,779]},{"teal":114,"source":"contracts/TownHall.algo.ts:138","pc":[780]},{"teal":118,"source":"contracts/TownHall.algo.ts:140","pc":[781,782]},{"teal":119,"source":"contracts/TownHall.algo.ts:140","pc":[783]},{"teal":120,"source":"contracts/TownHall.algo.ts:140","pc":[784]},{"teal":124,"source":"contracts/TownHall.algo.ts:141","pc":[785,786]},{"teal":125,"source":"contracts/TownHall.algo.ts:141","pc":[787]},{"teal":126,"source":"contracts/TownHall.algo.ts:141","pc":[788]},{"teal":130,"source":"contracts/TownHall.algo.ts:142","pc":[789,790]},{"teal":131,"source":"contracts/TownHall.algo.ts:142","pc":[791]},{"teal":132,"source":"contracts/TownHall.algo.ts:142","pc":[792]},{"teal":136,"source":"contracts/TownHall.algo.ts:143","pc":[793,794]},{"teal":137,"source":"contracts/TownHall.algo.ts:143","pc":[795]},{"teal":138,"source":"contracts/TownHall.algo.ts:143","pc":[796]},{"teal":142,"source":"contracts/TownHall.algo.ts:144","pc":[797,798]},{"teal":143,"source":"contracts/TownHall.algo.ts:144","pc":[799]},{"teal":144,"source":"contracts/TownHall.algo.ts:144","pc":[800]},{"teal":148,"source":"contracts/TownHall.algo.ts:145","pc":[801,802]},{"teal":149,"source":"contracts/TownHall.algo.ts:145","pc":[803]},{"teal":150,"source":"contracts/TownHall.algo.ts:145","pc":[804]},{"teal":154,"source":"contracts/TownHall.algo.ts:146","pc":[805,806]},{"teal":155,"source":"contracts/TownHall.algo.ts:146","pc":[807]},{"teal":156,"source":"contracts/TownHall.algo.ts:146","pc":[808]},{"teal":160,"source":"contracts/TownHall.algo.ts:148","pc":[809,810]},{"teal":161,"source":"contracts/TownHall.algo.ts:148","pc":[811]},{"teal":162,"source":"contracts/TownHall.algo.ts:148","pc":[812]},{"teal":166,"source":"contracts/TownHall.algo.ts:149","pc":[813,814]},{"teal":167,"source":"contracts/TownHall.algo.ts:149","pc":[815]},{"teal":168,"source":"contracts/TownHall.algo.ts:149","pc":[816]},{"teal":172,"source":"contracts/TownHall.algo.ts:150","pc":[817,818]},{"teal":173,"source":"contracts/TownHall.algo.ts:150","pc":[819]},{"teal":174,"source":"contracts/TownHall.algo.ts:150","pc":[820]},{"teal":178,"source":"contracts/TownHall.algo.ts:151","pc":[821,822]},{"teal":179,"source":"contracts/TownHall.algo.ts:151","pc":[823]},{"teal":180,"source":"contracts/TownHall.algo.ts:151","pc":[824]},{"teal":184,"source":"contracts/TownHall.algo.ts:152","pc":[825,826]},{"teal":185,"source":"contracts/TownHall.algo.ts:152","pc":[827]},{"teal":186,"source":"contracts/TownHall.algo.ts:152","pc":[828]},{"teal":190,"source":"contracts/TownHall.algo.ts:153","pc":[829,830]},{"teal":191,"source":"contracts/TownHall.algo.ts:153","pc":[831]},{"teal":192,"source":"contracts/TownHall.algo.ts:153","pc":[832]},{"teal":196,"source":"contracts/TownHall.algo.ts:154","pc":[833,834]},{"teal":197,"source":"contracts/TownHall.algo.ts:154","pc":[835]},{"teal":198,"source":"contracts/TownHall.algo.ts:154","pc":[836]},{"teal":202,"source":"contracts/TownHall.algo.ts:156","pc":[837,838]},{"teal":203,"source":"contracts/TownHall.algo.ts:156","pc":[839]},{"teal":204,"source":"contracts/TownHall.algo.ts:156","pc":[840]},{"teal":208,"source":"contracts/TownHall.algo.ts:157","pc":[841,842]},{"teal":209,"source":"contracts/TownHall.algo.ts:157","pc":[843]},{"teal":210,"source":"contracts/TownHall.algo.ts:157","pc":[844]},{"teal":214,"source":"contracts/TownHall.algo.ts:159","pc":[845]},{"teal":215,"source":"contracts/TownHall.algo.ts:159","pc":[846,847]},{"teal":216,"source":"contracts/TownHall.algo.ts:159","pc":[848]},{"teal":220,"source":"contracts/TownHall.algo.ts:160","pc":[849]},{"teal":221,"source":"contracts/TownHall.algo.ts:160","pc":[850,851]},{"teal":222,"source":"contracts/TownHall.algo.ts:160","pc":[852]},{"teal":226,"source":"contracts/TownHall.algo.ts:161","pc":[853,854]},{"teal":227,"source":"contracts/TownHall.algo.ts:161","pc":[855,856]},{"teal":228,"source":"contracts/TownHall.algo.ts:161","pc":[857]},{"teal":232,"source":"contracts/TownHall.algo.ts:163","pc":[858]},{"teal":233,"source":"contracts/TownHall.algo.ts:163","pc":[859]},{"teal":234,"source":"contracts/TownHall.algo.ts:163","pc":[860]},{"teal":235,"source":"contracts/TownHall.algo.ts:123","pc":[861]},{"teal":240,"source":"contracts/TownHall.algo.ts:171","pc":[862,863]},{"teal":243,"source":"contracts/TownHall.algo.ts:171","pc":[864,865,866]},{"teal":244,"source":"contracts/TownHall.algo.ts:171","pc":[867]},{"teal":247,"source":"contracts/TownHall.algo.ts:171","pc":[868,869,870]},{"teal":248,"source":"contracts/TownHall.algo.ts:171","pc":[871]},{"teal":249,"source":"contracts/TownHall.algo.ts:171","pc":[872]},{"teal":250,"source":"contracts/TownHall.algo.ts:171","pc":[873]},{"teal":251,"source":"contracts/TownHall.algo.ts:171","pc":[874]},{"teal":252,"source":"contracts/TownHall.algo.ts:171","pc":[875]},{"teal":261,"source":"contracts/TownHall.algo.ts:171","pc":[876,877,878]},{"teal":265,"source":"contracts/TownHall.algo.ts:172","pc":[879,880]},{"teal":266,"source":"contracts/TownHall.algo.ts:171","pc":[881]},{"teal":271,"source":"contracts/TownHall.algo.ts:193","pc":[882,883]},{"teal":274,"source":"contracts/TownHall.algo.ts:193","pc":[884,885,886]},{"teal":275,"source":"contracts/TownHall.algo.ts:193","pc":[887,888,889]},{"teal":278,"source":"contracts/TownHall.algo.ts:193","pc":[890,891,892]},{"teal":279,"source":"contracts/TownHall.algo.ts:193","pc":[893,894,895]},{"teal":282,"source":"contracts/TownHall.algo.ts:193","pc":[896,897,898]},{"teal":283,"source":"contracts/TownHall.algo.ts:193","pc":[899,900,901]},{"teal":286,"source":"contracts/TownHall.algo.ts:193","pc":[902,903,904]},{"teal":287,"source":"contracts/TownHall.algo.ts:193","pc":[905,906,907]},{"teal":290,"source":"contracts/TownHall.algo.ts:193","pc":[908,909,910]},{"teal":291,"source":"contracts/TownHall.algo.ts:193","pc":[911,912,913]},{"teal":292,"source":"contracts/TownHall.algo.ts:193","pc":[914]},{"teal":293,"source":"contracts/TownHall.algo.ts:193","pc":[915,916]},{"teal":294,"source":"contracts/TownHall.algo.ts:193","pc":[917]},{"teal":295,"source":"contracts/TownHall.algo.ts:193","pc":[918]},{"teal":296,"source":"contracts/TownHall.algo.ts:193","pc":[919]},{"teal":297,"source":"contracts/TownHall.algo.ts:193","pc":[920]},{"teal":298,"source":"contracts/TownHall.algo.ts:193","pc":[921]},{"teal":302,"source":"contracts/TownHall.algo.ts:193","pc":[922,923,924]},{"teal":305,"source":"contracts/TownHall.algo.ts:193","pc":[925]},{"teal":306,"source":"contracts/TownHall.algo.ts:193","pc":[926]},{"teal":310,"source":"contracts/TownHall.algo.ts:195","pc":[927,928]},{"teal":311,"source":"contracts/TownHall.algo.ts:195","pc":[929,930]},{"teal":312,"source":"contracts/TownHall.algo.ts:195","pc":[931,932]},{"teal":313,"source":"contracts/TownHall.algo.ts:195","pc":[933]},{"teal":314,"source":"contracts/TownHall.algo.ts:195","pc":[934]},{"teal":315,"source":"contracts/TownHall.algo.ts:195","pc":[935]},{"teal":316,"source":"contracts/TownHall.algo.ts:195","pc":[936,937]},{"teal":320,"source":"contracts/TownHall.algo.ts:196","pc":[938,939]},{"teal":321,"source":"contracts/TownHall.algo.ts:196","pc":[940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973]},{"teal":322,"source":"contracts/TownHall.algo.ts:196","pc":[974]},{"teal":323,"source":"contracts/TownHall.algo.ts:196","pc":[975,976]},{"teal":329,"source":"contracts/TownHall.algo.ts:199","pc":[977,978]},{"teal":330,"source":"contracts/TownHall.algo.ts:199","pc":[979,980]},{"teal":331,"source":"contracts/TownHall.algo.ts:199","pc":[981,982]},{"teal":332,"source":"contracts/TownHall.algo.ts:199","pc":[983,984]},{"teal":333,"source":"contracts/TownHall.algo.ts:199","pc":[985,986]},{"teal":334,"source":"contracts/TownHall.algo.ts:199","pc":[987,988]},{"teal":335,"source":"contracts/TownHall.algo.ts:199","pc":[989,990]},{"teal":336,"source":"contracts/TownHall.algo.ts:199","pc":[991,992]},{"teal":337,"source":"contracts/TownHall.algo.ts:199","pc":[993]},{"teal":340,"source":"contracts/TownHall.algo.ts:193","pc":[994,995]},{"teal":343,"source":"contracts/TownHall.algo.ts:193","pc":[996,997]},{"teal":344,"source":"contracts/TownHall.algo.ts:193","pc":[998]},{"teal":349,"source":"contracts/TownHall.algo.ts:203","pc":[999,1000]},{"teal":352,"source":"contracts/TownHall.algo.ts:203","pc":[1001,1002,1003]},{"teal":353,"source":"contracts/TownHall.algo.ts:203","pc":[1004,1005,1006]},{"teal":356,"source":"contracts/TownHall.algo.ts:203","pc":[1007,1008,1009]},{"teal":357,"source":"contracts/TownHall.algo.ts:203","pc":[1010]},{"teal":358,"source":"contracts/TownHall.algo.ts:203","pc":[1011]},{"teal":359,"source":"contracts/TownHall.algo.ts:203","pc":[1012]},{"teal":360,"source":"contracts/TownHall.algo.ts:203","pc":[1013,1014,1015]},{"teal":361,"source":"contracts/TownHall.algo.ts:203","pc":[1016]},{"teal":362,"source":"contracts/TownHall.algo.ts:203","pc":[1017]},{"teal":363,"source":"contracts/TownHall.algo.ts:203","pc":[1018]},{"teal":364,"source":"contracts/TownHall.algo.ts:203","pc":[1019]},{"teal":365,"source":"contracts/TownHall.algo.ts:203","pc":[1020]},{"teal":366,"source":"contracts/TownHall.algo.ts:203","pc":[1021]},{"teal":370,"source":"contracts/TownHall.algo.ts:203","pc":[1022,1023,1024]},{"teal":373,"source":"contracts/TownHall.algo.ts:203","pc":[1025]},{"teal":374,"source":"contracts/TownHall.algo.ts:203","pc":[1026,1027]},{"teal":378,"source":"contracts/TownHall.algo.ts:204","pc":[1028,1029]},{"teal":379,"source":"contracts/TownHall.algo.ts:204","pc":[1030]},{"teal":380,"source":"contracts/TownHall.algo.ts:204","pc":[1031,1032]},{"teal":384,"source":"contracts/TownHall.algo.ts:205","pc":[1033,1034]},{"teal":385,"source":"contracts/TownHall.algo.ts:205","pc":[1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084]},{"teal":386,"source":"contracts/TownHall.algo.ts:205","pc":[1085]},{"teal":387,"source":"contracts/TownHall.algo.ts:205","pc":[1086,1087]},{"teal":391,"source":"contracts/TownHall.algo.ts:208","pc":[1088,1089]},{"teal":392,"source":"contracts/TownHall.algo.ts:208","pc":[1090,1091]},{"teal":393,"source":"contracts/TownHall.algo.ts:208","pc":[1092,1093]},{"teal":397,"source":"contracts/TownHall.algo.ts:209","pc":[1094,1095]},{"teal":400,"source":"contracts/TownHall.algo.ts:203","pc":[1096,1097]},{"teal":403,"source":"contracts/TownHall.algo.ts:203","pc":[1098,1099]},{"teal":404,"source":"contracts/TownHall.algo.ts:203","pc":[1100]},{"teal":409,"source":"contracts/TownHall.algo.ts:214","pc":[1101,1102]},{"teal":412,"source":"contracts/TownHall.algo.ts:214","pc":[1103,1104,1105]},{"teal":413,"source":"contracts/TownHall.algo.ts:214","pc":[1106]},{"teal":414,"source":"contracts/TownHall.algo.ts:214","pc":[1107]},{"teal":415,"source":"contracts/TownHall.algo.ts:214","pc":[1108]},{"teal":416,"source":"contracts/TownHall.algo.ts:214","pc":[1109]},{"teal":417,"source":"contracts/TownHall.algo.ts:214","pc":[1110]},{"teal":421,"source":"contracts/TownHall.algo.ts:214","pc":[1111,1112,1113]},{"teal":425,"source":"contracts/TownHall.algo.ts:215","pc":[1114]},{"teal":426,"source":"contracts/TownHall.algo.ts:215","pc":[1115]},{"teal":427,"source":"contracts/TownHall.algo.ts:214","pc":[1116]},{"teal":432,"source":"contracts/TownHall.algo.ts:218","pc":[1117,1118,1119]},{"teal":433,"source":"contracts/TownHall.algo.ts:218","pc":[1120]},{"teal":434,"source":"contracts/TownHall.algo.ts:218","pc":[1121]},{"teal":435,"source":"contracts/TownHall.algo.ts:218","pc":[1122,1123]},{"teal":436,"source":"contracts/TownHall.algo.ts:218","pc":[1124]},{"teal":439,"source":"contracts/TownHall.algo.ts:218","errorMessage":"argument 0 (funderLSigAddress) for setLSIGFunderAddress must be a address","pc":[1125]},{"teal":442,"source":"contracts/TownHall.algo.ts:218","pc":[1126,1127,1128]},{"teal":443,"source":"contracts/TownHall.algo.ts:218","pc":[1129]},{"teal":444,"source":"contracts/TownHall.algo.ts:218","pc":[1130]},{"teal":448,"source":"contracts/TownHall.algo.ts:218","pc":[1131,1132,1133]},{"teal":455,"source":"contracts/TownHall.algo.ts:220","pc":[1134]},{"teal":456,"source":"contracts/TownHall.algo.ts:220","pc":[1135]},{"teal":457,"source":"contracts/TownHall.algo.ts:220","pc":[1136]},{"teal":458,"source":"contracts/TownHall.algo.ts:220","pc":[1137]},{"teal":461,"source":"contracts/TownHall.algo.ts:219","errorMessage":"Invalid method call: Contract is not in Set LSig Funder Address state.","pc":[1138]},{"teal":465,"source":"contracts/TownHall.algo.ts:224","pc":[1139,1140]},{"teal":466,"source":"contracts/TownHall.algo.ts:224","pc":[1141]},{"teal":467,"source":"contracts/TownHall.algo.ts:224","pc":[1142,1143]},{"teal":468,"source":"contracts/TownHall.algo.ts:224","pc":[1144]},{"teal":471,"source":"contracts/TownHall.algo.ts:224","errorMessage":"Error state: LSig Funder Address already set!","pc":[1145]},{"teal":475,"source":"contracts/TownHall.algo.ts:226","pc":[1146,1147]},{"teal":476,"source":"contracts/TownHall.algo.ts:226","pc":[1148,1149]},{"teal":477,"source":"contracts/TownHall.algo.ts:226","pc":[1150]},{"teal":480,"source":"contracts/TownHall.algo.ts:226","errorMessage":"Error state: LSig Funder Address cannot be the zero address.","pc":[1151]},{"teal":484,"source":"contracts/TownHall.algo.ts:229","pc":[1152,1153]},{"teal":485,"source":"contracts/TownHall.algo.ts:229","pc":[1154,1155]},{"teal":486,"source":"contracts/TownHall.algo.ts:229","pc":[1156]},{"teal":490,"source":"contracts/TownHall.algo.ts:231","pc":[1157]},{"teal":491,"source":"contracts/Constants.ts:17","pc":[1158]},{"teal":492,"source":"contracts/TownHall.algo.ts:231","pc":[1159]},{"teal":493,"source":"contracts/TownHall.algo.ts:218","pc":[1160]},{"teal":498,"source":"contracts/TownHall.algo.ts:234","pc":[1161,1162,1163]},{"teal":499,"source":"contracts/TownHall.algo.ts:234","pc":[1164,1165,1166]},{"teal":502,"source":"contracts/TownHall.algo.ts:234","pc":[1167,1168]},{"teal":503,"source":"contracts/TownHall.algo.ts:234","pc":[1169]},{"teal":504,"source":"contracts/TownHall.algo.ts:234","pc":[1170]},{"teal":505,"source":"contracts/TownHall.algo.ts:234","pc":[1171]},{"teal":506,"source":"contracts/TownHall.algo.ts:234","pc":[1172,1173]},{"teal":507,"source":"contracts/TownHall.algo.ts:234","pc":[1174]},{"teal":508,"source":"contracts/TownHall.algo.ts:234","pc":[1175]},{"teal":511,"source":"contracts/TownHall.algo.ts:234","errorMessage":"argument 1 (depositTxn) for joinGameLobby must be a pay transaction","pc":[1176]},{"teal":514,"source":"contracts/TownHall.algo.ts:234","pc":[1177,1178,1179]},{"teal":515,"source":"contracts/TownHall.algo.ts:234","pc":[1180]},{"teal":516,"source":"contracts/TownHall.algo.ts:234","pc":[1181]},{"teal":520,"source":"contracts/TownHall.algo.ts:234","pc":[1182,1183,1184]},{"teal":523,"source":"contracts/TownHall.algo.ts:234","pc":[1185]},{"teal":524,"source":"contracts/TownHall.algo.ts:234","pc":[1186,1187]},{"teal":528,"source":"contracts/TownHall.algo.ts:235","pc":[1188]},{"teal":529,"source":"contracts/TownHall.algo.ts:235","pc":[1189]},{"teal":530,"source":"contracts/Constants.ts:17","pc":[1190]},{"teal":531,"source":"contracts/TownHall.algo.ts:235","pc":[1191]},{"teal":534,"source":"contracts/TownHall.algo.ts:235","errorMessage":"Invalid method call: Game is not in Join Game Lobby state.","pc":[1192]},{"teal":541,"source":"contracts/TownHall.algo.ts:238","pc":[1193,1194]},{"teal":542,"source":"contracts/TownHall.algo.ts:238","pc":[1195]},{"teal":543,"source":"contracts/TownHall.algo.ts:238","pc":[1196]},{"teal":544,"source":"contracts/TownHall.algo.ts:238","pc":[1197]},{"teal":547,"source":"contracts/TownHall.algo.ts:237","errorMessage":"Max players already joined! Error, game should have moved to the next stage already.","pc":[1198]},{"teal":557,"source":"contracts/TownHall.algo.ts:243","pc":[1199,1200]},{"teal":558,"source":"contracts/TownHall.algo.ts:243","pc":[1201]},{"teal":559,"source":"contracts/TownHall.algo.ts:243","pc":[1202,1203]},{"teal":560,"source":"contracts/TownHall.algo.ts:243","pc":[1204]},{"teal":561,"source":"contracts/TownHall.algo.ts:243","pc":[1205]},{"teal":562,"source":"contracts/TownHall.algo.ts:243","pc":[1206,1207,1208]},{"teal":563,"source":"contracts/TownHall.algo.ts:244","pc":[1209,1210]},{"teal":564,"source":"contracts/TownHall.algo.ts:244","pc":[1211]},{"teal":565,"source":"contracts/TownHall.algo.ts:244","pc":[1212,1213]},{"teal":566,"source":"contracts/TownHall.algo.ts:244","pc":[1214]},{"teal":567,"source":"contracts/TownHall.algo.ts:243","pc":[1215]},{"teal":570,"source":"contracts/TownHall.algo.ts:244","pc":[1216]},{"teal":571,"source":"contracts/TownHall.algo.ts:244","pc":[1217,1218,1219]},{"teal":572,"source":"contracts/TownHall.algo.ts:245","pc":[1220,1221]},{"teal":573,"source":"contracts/TownHall.algo.ts:245","pc":[1222]},{"teal":574,"source":"contracts/TownHall.algo.ts:245","pc":[1223,1224]},{"teal":575,"source":"contracts/TownHall.algo.ts:245","pc":[1225]},{"teal":576,"source":"contracts/TownHall.algo.ts:244","pc":[1226]},{"teal":579,"source":"contracts/TownHall.algo.ts:245","pc":[1227]},{"teal":580,"source":"contracts/TownHall.algo.ts:245","pc":[1228,1229,1230]},{"teal":581,"source":"contracts/TownHall.algo.ts:246","pc":[1231,1232]},{"teal":582,"source":"contracts/TownHall.algo.ts:246","pc":[1233]},{"teal":583,"source":"contracts/TownHall.algo.ts:246","pc":[1234,1235]},{"teal":584,"source":"contracts/TownHall.algo.ts:246","pc":[1236]},{"teal":585,"source":"contracts/TownHall.algo.ts:245","pc":[1237]},{"teal":588,"source":"contracts/TownHall.algo.ts:246","pc":[1238]},{"teal":589,"source":"contracts/TownHall.algo.ts:246","pc":[1239,1240,1241]},{"teal":590,"source":"contracts/TownHall.algo.ts:247","pc":[1242,1243]},{"teal":591,"source":"contracts/TownHall.algo.ts:247","pc":[1244]},{"teal":592,"source":"contracts/TownHall.algo.ts:247","pc":[1245,1246]},{"teal":593,"source":"contracts/TownHall.algo.ts:247","pc":[1247]},{"teal":594,"source":"contracts/TownHall.algo.ts:246","pc":[1248]},{"teal":597,"source":"contracts/TownHall.algo.ts:247","pc":[1249]},{"teal":598,"source":"contracts/TownHall.algo.ts:247","pc":[1250,1251,1252]},{"teal":599,"source":"contracts/TownHall.algo.ts:248","pc":[1253,1254]},{"teal":600,"source":"contracts/TownHall.algo.ts:248","pc":[1255]},{"teal":601,"source":"contracts/TownHall.algo.ts:248","pc":[1256,1257]},{"teal":602,"source":"contracts/TownHall.algo.ts:248","pc":[1258]},{"teal":603,"source":"contracts/TownHall.algo.ts:247","pc":[1259]},{"teal":606,"source":"contracts/TownHall.algo.ts:242","pc":[1260,1261,1262]},{"teal":610,"source":"contracts/TownHall.algo.ts:250","errorMessage":"Error state: Player already joined the game!","pc":[1263]},{"teal":615,"source":"contracts/TownHall.algo.ts:255","pc":[1264,1265]},{"teal":616,"source":"contracts/TownHall.algo.ts:255","pc":[1266,1267]},{"teal":617,"source":"contracts/TownHall.algo.ts:255","pc":[1268,1269,1270,1271]},{"teal":618,"source":"contracts/TownHall.algo.ts:255","pc":[1272]},{"teal":621,"source":"contracts/TownHall.algo.ts:255","errorMessage":"Invalid FunderLSig amount!","pc":[1273]},{"teal":625,"source":"contracts/TownHall.algo.ts:257","pc":[1274,1275]},{"teal":626,"source":"contracts/TownHall.algo.ts:257","pc":[1276,1277,1278]},{"teal":627,"source":"contracts/TownHall.algo.ts:257","pc":[1279,1280]},{"teal":631,"source":"contracts/TownHall.algo.ts:258","pc":[1281,1282]},{"teal":632,"source":"contracts/TownHall.algo.ts:258","pc":[1283,1284,1285]},{"teal":633,"source":"contracts/TownHall.algo.ts:258","pc":[1286,1287]},{"teal":637,"source":"contracts/TownHall.algo.ts:259","pc":[1288,1289]},{"teal":638,"source":"contracts/TownHall.algo.ts:259","pc":[1290,1291,1292]},{"teal":639,"source":"contracts/TownHall.algo.ts:259","pc":[1293,1294]},{"teal":643,"source":"contracts/TownHall.algo.ts:260","pc":[1295,1296]},{"teal":644,"source":"contracts/TownHall.algo.ts:260","pc":[1297,1298,1299]},{"teal":645,"source":"contracts/TownHall.algo.ts:260","pc":[1300,1301]},{"teal":646,"source":"contracts/TownHall.algo.ts:260","pc":[1302]},{"teal":647,"source":"contracts/TownHall.algo.ts:260","pc":[1303,1304]},{"teal":651,"source":"contracts/TownHall.algo.ts:265","pc":[1305,1306]},{"teal":652,"source":"contracts/TownHall.algo.ts:265","pc":[1307,1308]},{"teal":653,"source":"contracts/TownHall.algo.ts:265","pc":[1309,1310]},{"teal":654,"source":"contracts/TownHall.algo.ts:265","pc":[1311,1312]},{"teal":655,"source":"contracts/TownHall.algo.ts:265","pc":[1313,1314,1315]},{"teal":658,"source":"contracts/TownHall.algo.ts:265","errorMessage":"DLOG NIZK Proof failed!","pc":[1316]},{"teal":663,"source":"contracts/TownHall.algo.ts:267","pc":[1317,1318]},{"teal":664,"source":"contracts/TownHall.algo.ts:267","pc":[1319]},{"teal":665,"source":"contracts/TownHall.algo.ts:267","pc":[1320]},{"teal":666,"source":"contracts/TownHall.algo.ts:267","pc":[1321]},{"teal":667,"source":"contracts/TownHall.algo.ts:267","pc":[1322]},{"teal":668,"source":"contracts/TownHall.algo.ts:267","pc":[1323,1324,1325]},{"teal":673,"source":"contracts/TownHall.algo.ts:268","pc":[1326,1327]},{"teal":674,"source":"contracts/TownHall.algo.ts:268","pc":[1328,1329]},{"teal":675,"source":"contracts/TownHall.algo.ts:268","pc":[1330]},{"teal":676,"source":"contracts/TownHall.algo.ts:268","pc":[1331]},{"teal":677,"source":"contracts/TownHall.algo.ts:267","pc":[1332,1333,1334]},{"teal":682,"source":"contracts/TownHall.algo.ts:270","pc":[1335,1336]},{"teal":683,"source":"contracts/TownHall.algo.ts:270","pc":[1337]},{"teal":684,"source":"contracts/TownHall.algo.ts:270","pc":[1338]},{"teal":687,"source":"contracts/TownHall.algo.ts:270","errorMessage":"box value does not exist: this.quickAccessPKBoxes(0).size","pc":[1339]},{"teal":688,"source":"contracts/TownHall.algo.ts:270","pc":[1340,1341]},{"teal":689,"source":"contracts/TownHall.algo.ts:270","pc":[1342]},{"teal":690,"source":"contracts/TownHall.algo.ts:270","pc":[1343]},{"teal":695,"source":"contracts/TownHall.algo.ts:274","pc":[1344,1345]},{"teal":696,"source":"contracts/TownHall.algo.ts:274","pc":[1346]},{"teal":697,"source":"contracts/TownHall.algo.ts:274","pc":[1347]},{"teal":698,"source":"contracts/TownHall.algo.ts:274","pc":[1348]},{"teal":701,"source":"contracts/TownHall.algo.ts:274","errorMessage":"PK Box failed to be created.","pc":[1349]},{"teal":705,"source":"contracts/TownHall.algo.ts:276","pc":[1350,1351]},{"teal":706,"source":"contracts/TownHall.algo.ts:276","pc":[1352,1353]},{"teal":707,"source":"contracts/TownHall.algo.ts:276","pc":[1354]},{"teal":708,"source":"contracts/TownHall.algo.ts:276","pc":[1355,1356]},{"teal":709,"source":"contracts/TownHall.algo.ts:276","pc":[1357]},{"teal":710,"source":"contracts/TownHall.algo.ts:276","pc":[1358,1359]},{"teal":711,"source":"contracts/TownHall.algo.ts:276","pc":[1360]},{"teal":715,"source":"contracts/TownHall.algo.ts:277","pc":[1361,1362]},{"teal":716,"source":"contracts/TownHall.algo.ts:277","pc":[1363]},{"teal":717,"source":"contracts/TownHall.algo.ts:277","pc":[1364]},{"teal":718,"source":"contracts/TownHall.algo.ts:277","pc":[1365]},{"teal":719,"source":"contracts/TownHall.algo.ts:277","pc":[1366,1367]},{"teal":720,"source":"contracts/TownHall.algo.ts:277","pc":[1368]},{"teal":721,"source":"contracts/TownHall.algo.ts:277","pc":[1369]},{"teal":725,"source":"contracts/TownHall.algo.ts:279","pc":[1370,1371]},{"teal":726,"source":"contracts/TownHall.algo.ts:279","pc":[1372]},{"teal":727,"source":"contracts/TownHall.algo.ts:279","pc":[1373,1374]},{"teal":728,"source":"contracts/TownHall.algo.ts:279","pc":[1375]},{"teal":731,"source":"contracts/TownHall.algo.ts:279","errorMessage":"Error state: LSig Funder Address not set!","pc":[1376]},{"teal":738,"source":"contracts/TownHall.algo.ts:282","pc":[1377]},{"teal":739,"source":"contracts/TownHall.algo.ts:282","pc":[1378]},{"teal":740,"source":"contracts/TownHall.algo.ts:282","pc":[1379,1380]},{"teal":744,"source":"contracts/TownHall.algo.ts:283","pc":[1381,1382]},{"teal":745,"source":"contracts/TownHall.algo.ts:283","pc":[1383,1384]},{"teal":749,"source":"contracts/TownHall.algo.ts:284","pc":[1385,1386]},{"teal":750,"source":"contracts/TownHall.algo.ts:284","pc":[1387]},{"teal":751,"source":"contracts/TownHall.algo.ts:284","pc":[1388,1389]},{"teal":754,"source":"contracts/TownHall.algo.ts:282","pc":[1390]},{"teal":755,"source":"contracts/TownHall.algo.ts:282","pc":[1391,1392]},{"teal":758,"source":"contracts/TownHall.algo.ts:282","pc":[1393]},{"teal":763,"source":"contracts/TownHall.algo.ts:287","pc":[1394,1395]},{"teal":764,"source":"contracts/TownHall.algo.ts:287","pc":[1396]},{"teal":765,"source":"contracts/TownHall.algo.ts:287","pc":[1397,1398]},{"teal":766,"source":"contracts/TownHall.algo.ts:287","pc":[1399]},{"teal":767,"source":"contracts/TownHall.algo.ts:287","pc":[1400,1401,1402]},{"teal":772,"source":"contracts/TownHall.algo.ts:288","pc":[1403,1404]},{"teal":773,"source":"contracts/TownHall.algo.ts:288","pc":[1405,1406]},{"teal":774,"source":"contracts/TownHall.algo.ts:288","pc":[1407]},{"teal":778,"source":"contracts/TownHall.algo.ts:289","pc":[1408]},{"teal":784,"source":"contracts/TownHall.algo.ts:291","pc":[1409,1410]},{"teal":785,"source":"contracts/TownHall.algo.ts:291","pc":[1411]},{"teal":786,"source":"contracts/TownHall.algo.ts:291","pc":[1412,1413]},{"teal":787,"source":"contracts/TownHall.algo.ts:291","pc":[1414]},{"teal":788,"source":"contracts/TownHall.algo.ts:291","pc":[1415,1416,1417]},{"teal":793,"source":"contracts/TownHall.algo.ts:292","pc":[1418,1419]},{"teal":794,"source":"contracts/TownHall.algo.ts:292","pc":[1420,1421]},{"teal":795,"source":"contracts/TownHall.algo.ts:292","pc":[1422]},{"teal":799,"source":"contracts/TownHall.algo.ts:293","pc":[1423]},{"teal":805,"source":"contracts/TownHall.algo.ts:295","pc":[1424,1425]},{"teal":806,"source":"contracts/TownHall.algo.ts:295","pc":[1426]},{"teal":807,"source":"contracts/TownHall.algo.ts:295","pc":[1427,1428]},{"teal":808,"source":"contracts/TownHall.algo.ts:295","pc":[1429]},{"teal":809,"source":"contracts/TownHall.algo.ts:295","pc":[1430,1431,1432]},{"teal":814,"source":"contracts/TownHall.algo.ts:296","pc":[1433,1434]},{"teal":815,"source":"contracts/TownHall.algo.ts:296","pc":[1435,1436]},{"teal":816,"source":"contracts/TownHall.algo.ts:296","pc":[1437]},{"teal":820,"source":"contracts/TownHall.algo.ts:297","pc":[1438]},{"teal":826,"source":"contracts/TownHall.algo.ts:299","pc":[1439,1440]},{"teal":827,"source":"contracts/TownHall.algo.ts:299","pc":[1441]},{"teal":828,"source":"contracts/TownHall.algo.ts:299","pc":[1442,1443]},{"teal":829,"source":"contracts/TownHall.algo.ts:299","pc":[1444]},{"teal":830,"source":"contracts/TownHall.algo.ts:299","pc":[1445,1446,1447]},{"teal":835,"source":"contracts/TownHall.algo.ts:300","pc":[1448,1449]},{"teal":836,"source":"contracts/TownHall.algo.ts:300","pc":[1450,1451]},{"teal":837,"source":"contracts/TownHall.algo.ts:300","pc":[1452]},{"teal":841,"source":"contracts/TownHall.algo.ts:301","pc":[1453]},{"teal":847,"source":"contracts/TownHall.algo.ts:303","pc":[1454,1455]},{"teal":848,"source":"contracts/TownHall.algo.ts:303","pc":[1456]},{"teal":849,"source":"contracts/TownHall.algo.ts:303","pc":[1457,1458]},{"teal":850,"source":"contracts/TownHall.algo.ts:303","pc":[1459]},{"teal":851,"source":"contracts/TownHall.algo.ts:303","pc":[1460,1461,1462]},{"teal":856,"source":"contracts/TownHall.algo.ts:304","pc":[1463,1464]},{"teal":857,"source":"contracts/TownHall.algo.ts:304","pc":[1465,1466]},{"teal":858,"source":"contracts/TownHall.algo.ts:304","pc":[1467]},{"teal":862,"source":"contracts/TownHall.algo.ts:305","pc":[1468]},{"teal":868,"source":"contracts/TownHall.algo.ts:307","pc":[1469,1470]},{"teal":869,"source":"contracts/TownHall.algo.ts:307","pc":[1471]},{"teal":870,"source":"contracts/TownHall.algo.ts:307","pc":[1472,1473]},{"teal":871,"source":"contracts/TownHall.algo.ts:307","pc":[1474]},{"teal":872,"source":"contracts/TownHall.algo.ts:307","pc":[1475,1476,1477]},{"teal":877,"source":"contracts/TownHall.algo.ts:308","pc":[1478,1479]},{"teal":878,"source":"contracts/TownHall.algo.ts:308","pc":[1480,1481]},{"teal":879,"source":"contracts/TownHall.algo.ts:308","pc":[1482]},{"teal":883,"source":"contracts/TownHall.algo.ts:309","pc":[1483]},{"teal":884,"source":"contracts/Constants.ts:18","pc":[1484]},{"teal":885,"source":"contracts/TownHall.algo.ts:309","pc":[1485]},{"teal":889,"source":"contracts/TownHall.algo.ts:310","pc":[1486]},{"teal":893,"source":"contracts/TownHall.algo.ts:313","errorMessage":"Invalid state! Error, game should have moved to the next stage already.","pc":[1487]},{"teal":894,"source":"contracts/TownHall.algo.ts:234","pc":[1488]},{"teal":899,"source":"contracts/TownHall.algo.ts:328","pc":[1489,1490]},{"teal":900,"source":"contracts/TownHall.algo.ts:328","pc":[1491]},{"teal":901,"source":"contracts/TownHall.algo.ts:328","pc":[1492]},{"teal":902,"source":"contracts/TownHall.algo.ts:328","pc":[1493]},{"teal":903,"source":"contracts/TownHall.algo.ts:328","pc":[1494,1495]},{"teal":904,"source":"contracts/TownHall.algo.ts:328","pc":[1496]},{"teal":905,"source":"contracts/TownHall.algo.ts:328","pc":[1497]},{"teal":908,"source":"contracts/TownHall.algo.ts:328","errorMessage":"argument 0 (ringLSigTxn5) for assignRole must be a pay transaction","pc":[1498]},{"teal":911,"source":"contracts/TownHall.algo.ts:327","pc":[1499,1500]},{"teal":912,"source":"contracts/TownHall.algo.ts:327","pc":[1501]},{"teal":913,"source":"contracts/TownHall.algo.ts:327","pc":[1502]},{"teal":914,"source":"contracts/TownHall.algo.ts:327","pc":[1503]},{"teal":915,"source":"contracts/TownHall.algo.ts:327","pc":[1504,1505]},{"teal":916,"source":"contracts/TownHall.algo.ts:327","pc":[1506]},{"teal":917,"source":"contracts/TownHall.algo.ts:327","pc":[1507]},{"teal":920,"source":"contracts/TownHall.algo.ts:327","errorMessage":"argument 1 (ringLSigTxn4) for assignRole must be a pay transaction","pc":[1508]},{"teal":923,"source":"contracts/TownHall.algo.ts:326","pc":[1509,1510]},{"teal":924,"source":"contracts/TownHall.algo.ts:326","pc":[1511,1512]},{"teal":925,"source":"contracts/TownHall.algo.ts:326","pc":[1513]},{"teal":926,"source":"contracts/TownHall.algo.ts:326","pc":[1514]},{"teal":927,"source":"contracts/TownHall.algo.ts:326","pc":[1515,1516]},{"teal":928,"source":"contracts/TownHall.algo.ts:326","pc":[1517]},{"teal":929,"source":"contracts/TownHall.algo.ts:326","pc":[1518]},{"teal":932,"source":"contracts/TownHall.algo.ts:326","errorMessage":"argument 2 (ringLSigTxn3) for assignRole must be a pay transaction","pc":[1519]},{"teal":935,"source":"contracts/TownHall.algo.ts:325","pc":[1520,1521]},{"teal":936,"source":"contracts/TownHall.algo.ts:325","pc":[1522,1523]},{"teal":937,"source":"contracts/TownHall.algo.ts:325","pc":[1524]},{"teal":938,"source":"contracts/TownHall.algo.ts:325","pc":[1525]},{"teal":939,"source":"contracts/TownHall.algo.ts:325","pc":[1526,1527]},{"teal":940,"source":"contracts/TownHall.algo.ts:325","pc":[1528]},{"teal":941,"source":"contracts/TownHall.algo.ts:325","pc":[1529]},{"teal":944,"source":"contracts/TownHall.algo.ts:325","errorMessage":"argument 3 (ringLSigTxn2) for assignRole must be a pay transaction","pc":[1530]},{"teal":947,"source":"contracts/TownHall.algo.ts:324","pc":[1531,1532]},{"teal":948,"source":"contracts/TownHall.algo.ts:324","pc":[1533,1534]},{"teal":949,"source":"contracts/TownHall.algo.ts:324","pc":[1535]},{"teal":950,"source":"contracts/TownHall.algo.ts:324","pc":[1536]},{"teal":951,"source":"contracts/TownHall.algo.ts:324","pc":[1537,1538]},{"teal":952,"source":"contracts/TownHall.algo.ts:324","pc":[1539]},{"teal":953,"source":"contracts/TownHall.algo.ts:324","pc":[1540]},{"teal":956,"source":"contracts/TownHall.algo.ts:324","errorMessage":"argument 4 (ringLSigTxn1) for assignRole must be a pay transaction","pc":[1541]},{"teal":959,"source":"contracts/TownHall.algo.ts:323","pc":[1542,1543]},{"teal":960,"source":"contracts/TownHall.algo.ts:323","pc":[1544]},{"teal":961,"source":"contracts/TownHall.algo.ts:323","pc":[1545]},{"teal":962,"source":"contracts/TownHall.algo.ts:323","pc":[1546]},{"teal":963,"source":"contracts/TownHall.algo.ts:323","pc":[1547,1548]},{"teal":964,"source":"contracts/TownHall.algo.ts:323","pc":[1549]},{"teal":965,"source":"contracts/TownHall.algo.ts:323","pc":[1550]},{"teal":968,"source":"contracts/TownHall.algo.ts:323","errorMessage":"argument 5 (ringLSigTxn0) for assignRole must be a pay transaction","pc":[1551]},{"teal":971,"source":"contracts/TownHall.algo.ts:322","pc":[1552,1553]},{"teal":972,"source":"contracts/TownHall.algo.ts:322","pc":[1554,1555]},{"teal":973,"source":"contracts/TownHall.algo.ts:322","pc":[1556]},{"teal":974,"source":"contracts/TownHall.algo.ts:322","pc":[1557]},{"teal":975,"source":"contracts/TownHall.algo.ts:322","pc":[1558,1559]},{"teal":976,"source":"contracts/TownHall.algo.ts:322","pc":[1560]},{"teal":977,"source":"contracts/TownHall.algo.ts:322","pc":[1561]},{"teal":980,"source":"contracts/TownHall.algo.ts:322","errorMessage":"argument 6 (funderLSigTxn) for assignRole must be a pay transaction","pc":[1562]},{"teal":983,"source":"contracts/TownHall.algo.ts:321","pc":[1563,1564,1565]},{"teal":984,"source":"contracts/TownHall.algo.ts:321","pc":[1566,1567,1568]},{"teal":987,"source":"contracts/TownHall.algo.ts:320","pc":[1569,1570,1571]},{"teal":988,"source":"contracts/TownHall.algo.ts:320","pc":[1572,1573,1574]},{"teal":991,"source":"contracts/TownHall.algo.ts:319","pc":[1575,1576,1577]},{"teal":992,"source":"contracts/TownHall.algo.ts:319","pc":[1578,1579,1580]},{"teal":995,"source":"contracts/TownHall.algo.ts:318","pc":[1581,1582,1583]},{"teal":996,"source":"contracts/TownHall.algo.ts:318","pc":[1584,1585,1586]},{"teal":999,"source":"contracts/TownHall.algo.ts:317","pc":[1587,1588,1589]},{"teal":1000,"source":"contracts/TownHall.algo.ts:317","pc":[1590,1591,1592]},{"teal":1003,"source":"contracts/TownHall.algo.ts:316","pc":[1593,1594,1595]},{"teal":1004,"source":"contracts/TownHall.algo.ts:316","pc":[1596]},{"teal":1005,"source":"contracts/TownHall.algo.ts:316","pc":[1597]},{"teal":1009,"source":"contracts/TownHall.algo.ts:316","pc":[1598,1599,1600]},{"teal":1013,"source":"contracts/TownHall.algo.ts:330","pc":[1601]},{"teal":1014,"source":"contracts/TownHall.algo.ts:330","pc":[1602]},{"teal":1015,"source":"contracts/Constants.ts:18","pc":[1603]},{"teal":1016,"source":"contracts/TownHall.algo.ts:330","pc":[1604]},{"teal":1019,"source":"contracts/TownHall.algo.ts:330","errorMessage":"Invalid method call: Game is not in Assign Role state.","pc":[1605]},{"teal":1026,"source":"contracts/TownHall.algo.ts:340","pc":[1606,1607]},{"teal":1027,"source":"contracts/TownHall.algo.ts:340","pc":[1608]},{"teal":1028,"source":"contracts/TownHall.algo.ts:340","pc":[1609]},{"teal":1029,"source":"contracts/TownHall.algo.ts:340","pc":[1610]},{"teal":1030,"source":"contracts/TownHall.algo.ts:340","pc":[1611]},{"teal":1031,"source":"contracts/TownHall.algo.ts:340","pc":[1612]},{"teal":1034,"source":"contracts/TownHall.algo.ts:339","errorMessage":"KeyImage already in store. Are you trying to double-dip with your ring signature?","pc":[1613]},{"teal":1038,"source":"contracts/TownHall.algo.ts:343","pc":[1614,1615]},{"teal":1039,"source":"contracts/TownHall.algo.ts:343","pc":[1616]},{"teal":1040,"source":"contracts/TownHall.algo.ts:343","pc":[1617]},{"teal":1041,"source":"contracts/TownHall.algo.ts:343","pc":[1618]},{"teal":1042,"source":"contracts/TownHall.algo.ts:343","pc":[1619]},{"teal":1046,"source":"contracts/TownHall.algo.ts:347","pc":[1620,1621]},{"teal":1047,"source":"contracts/TownHall.algo.ts:347","pc":[1622,1623]},{"teal":1048,"source":"contracts/TownHall.algo.ts:347","pc":[1624,1625]},{"teal":1049,"source":"contracts/TownHall.algo.ts:347","pc":[1626]},{"teal":1050,"source":"contracts/TownHall.algo.ts:347","pc":[1627]},{"teal":1051,"source":"contracts/TownHall.algo.ts:347","pc":[1628]},{"teal":1058,"source":"contracts/TownHall.algo.ts:351","pc":[1629,1630]},{"teal":1059,"source":"contracts/TownHall.algo.ts:351","pc":[1631]},{"teal":1060,"source":"contracts/TownHall.algo.ts:351","pc":[1632,1633,1634]},{"teal":1061,"source":"contracts/TownHall.algo.ts:351","pc":[1635]},{"teal":1062,"source":"contracts/TownHall.algo.ts:351","pc":[1636,1637]},{"teal":1063,"source":"contracts/TownHall.algo.ts:351","pc":[1638]},{"teal":1066,"source":"contracts/TownHall.algo.ts:350","errorMessage":"Invalid PKs! Are you trying to pass in a different ring of PKs?","pc":[1639]},{"teal":1071,"source":"contracts/TownHall.algo.ts:357","pc":[1640,1641]},{"teal":1072,"source":"contracts/TownHall.algo.ts:357","pc":[1642,1643]},{"teal":1073,"source":"contracts/TownHall.algo.ts:357","pc":[1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677]},{"teal":1074,"source":"contracts/TownHall.algo.ts:357","pc":[1678]},{"teal":1077,"source":"contracts/TownHall.algo.ts:357","errorMessage":"transaction verification failed: {\"txn\":\"ringLSigTxn0\",\"field\":\"sender\",\"expected\":\"Address.fromBytes(RingLinkLSig0.address())\"}","pc":[1679]},{"teal":1082,"source":"contracts/TownHall.algo.ts:358","pc":[1680,1681]},{"teal":1083,"source":"contracts/TownHall.algo.ts:358","pc":[1682,1683]},{"teal":1084,"source":"contracts/TownHall.algo.ts:358","pc":[1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717]},{"teal":1085,"source":"contracts/TownHall.algo.ts:358","pc":[1718]},{"teal":1088,"source":"contracts/TownHall.algo.ts:358","errorMessage":"transaction verification failed: {\"txn\":\"ringLSigTxn1\",\"field\":\"sender\",\"expected\":\"Address.fromBytes(RingLinkLSig1.address())\"}","pc":[1719]},{"teal":1093,"source":"contracts/TownHall.algo.ts:359","pc":[1720,1721]},{"teal":1094,"source":"contracts/TownHall.algo.ts:359","pc":[1722,1723]},{"teal":1095,"source":"contracts/TownHall.algo.ts:359","pc":[1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757]},{"teal":1096,"source":"contracts/TownHall.algo.ts:359","pc":[1758]},{"teal":1099,"source":"contracts/TownHall.algo.ts:359","errorMessage":"transaction verification failed: {\"txn\":\"ringLSigTxn2\",\"field\":\"sender\",\"expected\":\"Address.fromBytes(RingLinkLSig2.address())\"}","pc":[1759]},{"teal":1104,"source":"contracts/TownHall.algo.ts:360","pc":[1760,1761]},{"teal":1105,"source":"contracts/TownHall.algo.ts:360","pc":[1762,1763]},{"teal":1106,"source":"contracts/TownHall.algo.ts:360","pc":[1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797]},{"teal":1107,"source":"contracts/TownHall.algo.ts:360","pc":[1798]},{"teal":1110,"source":"contracts/TownHall.algo.ts:360","errorMessage":"transaction verification failed: {\"txn\":\"ringLSigTxn3\",\"field\":\"sender\",\"expected\":\"Address.fromBytes(RingLinkLSig3.address())\"}","pc":[1799]},{"teal":1115,"source":"contracts/TownHall.algo.ts:361","pc":[1800,1801]},{"teal":1116,"source":"contracts/TownHall.algo.ts:361","pc":[1802,1803]},{"teal":1117,"source":"contracts/TownHall.algo.ts:361","pc":[1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837]},{"teal":1118,"source":"contracts/TownHall.algo.ts:361","pc":[1838]},{"teal":1121,"source":"contracts/TownHall.algo.ts:361","errorMessage":"transaction verification failed: {\"txn\":\"ringLSigTxn4\",\"field\":\"sender\",\"expected\":\"Address.fromBytes(RingLinkLSig4.address())\"}","pc":[1839]},{"teal":1126,"source":"contracts/TownHall.algo.ts:362","pc":[1840,1841]},{"teal":1127,"source":"contracts/TownHall.algo.ts:362","pc":[1842,1843]},{"teal":1128,"source":"contracts/TownHall.algo.ts:362","pc":[1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877]},{"teal":1129,"source":"contracts/TownHall.algo.ts:362","pc":[1878]},{"teal":1132,"source":"contracts/TownHall.algo.ts:362","errorMessage":"transaction verification failed: {\"txn\":\"ringLSigTxn5\",\"field\":\"sender\",\"expected\":\"Address.fromBytes(RingLinkLSig5.address())\"}","pc":[1879]},{"teal":1141,"source":"contracts/TownHall.algo.ts:365","pc":[1880,1881]},{"teal":1142,"source":"contracts/TownHall.algo.ts:366","pc":[1882,1883]},{"teal":1143,"source":"contracts/TownHall.algo.ts:366","pc":[1884,1885]},{"teal":1144,"source":"contracts/TownHall.algo.ts:366","pc":[1886]},{"teal":1145,"source":"contracts/TownHall.algo.ts:366","pc":[1887]},{"teal":1148,"source":"contracts/TownHall.algo.ts:366","errorMessage":"transaction verification failed: {\"txn\":\"funderLSigTxn\",\"field\":\"sender\",\"expected\":\"Address.fromBytes(this.lsigFunderAddress.value)\"}","pc":[1888]},{"teal":1151,"source":"contracts/TownHall.algo.ts:365","pc":[1889,1890]},{"teal":1152,"source":"contracts/TownHall.algo.ts:367","pc":[1891,1892]},{"teal":1153,"source":"contracts/TownHall.algo.ts:367","pc":[1893,1894]},{"teal":1154,"source":"contracts/TownHall.algo.ts:367","pc":[1895]},{"teal":1157,"source":"contracts/TownHall.algo.ts:367","errorMessage":"transaction verification failed: {\"txn\":\"funderLSigTxn\",\"field\":\"receiver\",\"expected\":\"this.txn.sender\"}","pc":[1896]},{"teal":1160,"source":"contracts/TownHall.algo.ts:365","pc":[1897,1898]},{"teal":1161,"source":"contracts/TownHall.algo.ts:368","pc":[1899,1900]},{"teal":1162,"source":"contracts/TownHall.algo.ts:368","pc":[1901,1902]},{"teal":1163,"source":"contracts/TownHall.algo.ts:368","pc":[1903]},{"teal":1166,"source":"contracts/TownHall.algo.ts:368","errorMessage":"transaction verification failed: {\"txn\":\"funderLSigTxn\",\"field\":\"amount\",\"expected\":\"LSIG_FUND_AMOUNT\"}","pc":[1904]},{"teal":1171,"source":"contracts/TownHall.algo.ts:376","pc":[1905,1906]},{"teal":1172,"source":"contracts/TownHall.algo.ts:376","pc":[1907]},{"teal":1173,"source":"contracts/TownHall.algo.ts:376","pc":[1908,1909]},{"teal":1174,"source":"contracts/TownHall.algo.ts:376","pc":[1910]},{"teal":1175,"source":"contracts/TownHall.algo.ts:376","pc":[1911,1912,1913]},{"teal":1180,"source":"contracts/TownHall.algo.ts:377","pc":[1914,1915]},{"teal":1181,"source":"contracts/TownHall.algo.ts:377","pc":[1916,1917]},{"teal":1182,"source":"contracts/TownHall.algo.ts:377","pc":[1918]},{"teal":1186,"source":"contracts/TownHall.algo.ts:378","pc":[1919,1920]},{"teal":1187,"source":"contracts/TownHall.algo.ts:378","pc":[1921,1922]},{"teal":1188,"source":"contracts/TownHall.algo.ts:378","pc":[1923]},{"teal":1192,"source":"contracts/TownHall.algo.ts:379","pc":[1924]},{"teal":1198,"source":"contracts/TownHall.algo.ts:381","pc":[1925,1926]},{"teal":1199,"source":"contracts/TownHall.algo.ts:381","pc":[1927]},{"teal":1200,"source":"contracts/TownHall.algo.ts:381","pc":[1928,1929]},{"teal":1201,"source":"contracts/TownHall.algo.ts:381","pc":[1930]},{"teal":1202,"source":"contracts/TownHall.algo.ts:381","pc":[1931,1932,1933]},{"teal":1207,"source":"contracts/TownHall.algo.ts:382","pc":[1934,1935]},{"teal":1208,"source":"contracts/TownHall.algo.ts:382","pc":[1936,1937]},{"teal":1209,"source":"contracts/TownHall.algo.ts:382","pc":[1938]},{"teal":1213,"source":"contracts/TownHall.algo.ts:383","pc":[1939,1940]},{"teal":1214,"source":"contracts/TownHall.algo.ts:383","pc":[1941,1942]},{"teal":1215,"source":"contracts/TownHall.algo.ts:383","pc":[1943]},{"teal":1219,"source":"contracts/TownHall.algo.ts:384","pc":[1944]},{"teal":1225,"source":"contracts/TownHall.algo.ts:386","pc":[1945,1946]},{"teal":1226,"source":"contracts/TownHall.algo.ts:386","pc":[1947]},{"teal":1227,"source":"contracts/TownHall.algo.ts:386","pc":[1948,1949]},{"teal":1228,"source":"contracts/TownHall.algo.ts:386","pc":[1950]},{"teal":1229,"source":"contracts/TownHall.algo.ts:386","pc":[1951,1952,1953]},{"teal":1234,"source":"contracts/TownHall.algo.ts:387","pc":[1954,1955]},{"teal":1235,"source":"contracts/TownHall.algo.ts:387","pc":[1956,1957]},{"teal":1236,"source":"contracts/TownHall.algo.ts:387","pc":[1958]},{"teal":1240,"source":"contracts/TownHall.algo.ts:388","pc":[1959]},{"teal":1246,"source":"contracts/TownHall.algo.ts:390","pc":[1960,1961]},{"teal":1247,"source":"contracts/TownHall.algo.ts:390","pc":[1962]},{"teal":1248,"source":"contracts/TownHall.algo.ts:390","pc":[1963,1964]},{"teal":1249,"source":"contracts/TownHall.algo.ts:390","pc":[1965]},{"teal":1250,"source":"contracts/TownHall.algo.ts:390","pc":[1966,1967,1968]},{"teal":1255,"source":"contracts/TownHall.algo.ts:391","pc":[1969,1970]},{"teal":1256,"source":"contracts/TownHall.algo.ts:391","pc":[1971,1972]},{"teal":1257,"source":"contracts/TownHall.algo.ts:391","pc":[1973]},{"teal":1261,"source":"contracts/TownHall.algo.ts:392","pc":[1974]},{"teal":1267,"source":"contracts/TownHall.algo.ts:394","pc":[1975,1976]},{"teal":1268,"source":"contracts/TownHall.algo.ts:394","pc":[1977]},{"teal":1269,"source":"contracts/TownHall.algo.ts:394","pc":[1978,1979]},{"teal":1270,"source":"contracts/TownHall.algo.ts:394","pc":[1980]},{"teal":1271,"source":"contracts/TownHall.algo.ts:394","pc":[1981,1982,1983]},{"teal":1276,"source":"contracts/TownHall.algo.ts:395","pc":[1984,1985]},{"teal":1277,"source":"contracts/TownHall.algo.ts:395","pc":[1986,1987]},{"teal":1278,"source":"contracts/TownHall.algo.ts:395","pc":[1988]},{"teal":1282,"source":"contracts/TownHall.algo.ts:396","pc":[1989]},{"teal":1288,"source":"contracts/TownHall.algo.ts:398","pc":[1990,1991]},{"teal":1289,"source":"contracts/TownHall.algo.ts:398","pc":[1992]},{"teal":1290,"source":"contracts/TownHall.algo.ts:398","pc":[1993,1994]},{"teal":1291,"source":"contracts/TownHall.algo.ts:398","pc":[1995]},{"teal":1292,"source":"contracts/TownHall.algo.ts:398","pc":[1996,1997,1998]},{"teal":1297,"source":"contracts/TownHall.algo.ts:399","pc":[1999,2000]},{"teal":1298,"source":"contracts/TownHall.algo.ts:399","pc":[2001,2002]},{"teal":1299,"source":"contracts/TownHall.algo.ts:399","pc":[2003]},{"teal":1303,"source":"contracts/TownHall.algo.ts:400","pc":[2004]},{"teal":1304,"source":"contracts/Constants.ts:19","pc":[2005,2006]},{"teal":1305,"source":"contracts/TownHall.algo.ts:400","pc":[2007]},{"teal":1309,"source":"contracts/TownHall.algo.ts:401","pc":[2008]},{"teal":1313,"source":"contracts/TownHall.algo.ts:404","errorMessage":"Invalid state! Error, game should have moved to the next stage already.","pc":[2009]},{"teal":1314,"source":"contracts/TownHall.algo.ts:316","pc":[2010]},{"teal":1319,"source":"contracts/TownHall.algo.ts:407","pc":[2011,2012,2013]},{"teal":1320,"source":"contracts/TownHall.algo.ts:407","pc":[2014]},{"teal":1323,"source":"contracts/TownHall.algo.ts:407","pc":[2015,2016,2017]},{"teal":1324,"source":"contracts/TownHall.algo.ts:407","pc":[2018]},{"teal":1325,"source":"contracts/TownHall.algo.ts:407","pc":[2019]},{"teal":1329,"source":"contracts/TownHall.algo.ts:407","pc":[2020,2021,2022]},{"teal":1333,"source":"contracts/TownHall.algo.ts:408","pc":[2023]},{"teal":1334,"source":"contracts/TownHall.algo.ts:408","pc":[2024]},{"teal":1335,"source":"contracts/Constants.ts:19","pc":[2025,2026]},{"teal":1336,"source":"contracts/TownHall.algo.ts:408","pc":[2027]},{"teal":1339,"source":"contracts/TownHall.algo.ts:408","errorMessage":"Invalid method call: Game is not in Day Stage Vote state.","pc":[2028]},{"teal":1343,"source":"contracts/TownHall.algo.ts:410","pc":[2029,2030]},{"teal":1344,"source":"contracts/TownHall.algo.ts:410","pc":[2031]},{"teal":1345,"source":"contracts/TownHall.algo.ts:410","pc":[2032]},{"teal":1346,"source":"contracts/TownHall.algo.ts:410","pc":[2033]},{"teal":1347,"source":"contracts/TownHall.algo.ts:410","pc":[2034,2035,2036]},{"teal":1348,"source":"contracts/TownHall.algo.ts:410","pc":[2037,2038]},{"teal":1349,"source":"contracts/TownHall.algo.ts:410","pc":[2039,2040]},{"teal":1350,"source":"contracts/TownHall.algo.ts:410","pc":[2041]},{"teal":1351,"source":"contracts/TownHall.algo.ts:410","pc":[2042]},{"teal":1355,"source":"contracts/TownHall.algo.ts:410","errorMessage":"Invalid vote: Vote must be int 1 <= n <= 6.","pc":[2043]},{"teal":1367,"source":"contracts/TownHall.algo.ts:414","pc":[2044,2045]},{"teal":1368,"source":"contracts/TownHall.algo.ts:414","pc":[2046,2047]},{"teal":1369,"source":"contracts/TownHall.algo.ts:414","pc":[2048]},{"teal":1370,"source":"contracts/TownHall.algo.ts:414","pc":[2049]},{"teal":1371,"source":"contracts/TownHall.algo.ts:414","pc":[2050]},{"teal":1372,"source":"contracts/TownHall.algo.ts:414","pc":[2051,2052,2053]},{"teal":1373,"source":"contracts/TownHall.algo.ts:415","pc":[2054,2055]},{"teal":1374,"source":"contracts/TownHall.algo.ts:415","pc":[2056,2057]},{"teal":1375,"source":"contracts/TownHall.algo.ts:415","pc":[2058]},{"teal":1376,"source":"contracts/TownHall.algo.ts:415","pc":[2059]},{"teal":1377,"source":"contracts/TownHall.algo.ts:414","pc":[2060]},{"teal":1380,"source":"contracts/TownHall.algo.ts:415","pc":[2061]},{"teal":1381,"source":"contracts/TownHall.algo.ts:415","pc":[2062,2063,2064]},{"teal":1382,"source":"contracts/TownHall.algo.ts:416","pc":[2065,2066]},{"teal":1383,"source":"contracts/TownHall.algo.ts:416","pc":[2067,2068]},{"teal":1384,"source":"contracts/TownHall.algo.ts:416","pc":[2069]},{"teal":1385,"source":"contracts/TownHall.algo.ts:416","pc":[2070]},{"teal":1386,"source":"contracts/TownHall.algo.ts:415","pc":[2071]},{"teal":1389,"source":"contracts/TownHall.algo.ts:416","pc":[2072]},{"teal":1390,"source":"contracts/TownHall.algo.ts:416","pc":[2073,2074,2075]},{"teal":1391,"source":"contracts/TownHall.algo.ts:417","pc":[2076,2077]},{"teal":1392,"source":"contracts/TownHall.algo.ts:417","pc":[2078,2079]},{"teal":1393,"source":"contracts/TownHall.algo.ts:417","pc":[2080]},{"teal":1394,"source":"contracts/TownHall.algo.ts:417","pc":[2081]},{"teal":1395,"source":"contracts/TownHall.algo.ts:416","pc":[2082]},{"teal":1398,"source":"contracts/TownHall.algo.ts:417","pc":[2083]},{"teal":1399,"source":"contracts/TownHall.algo.ts:417","pc":[2084,2085,2086]},{"teal":1400,"source":"contracts/TownHall.algo.ts:418","pc":[2087,2088]},{"teal":1401,"source":"contracts/TownHall.algo.ts:418","pc":[2089,2090]},{"teal":1402,"source":"contracts/TownHall.algo.ts:418","pc":[2091]},{"teal":1403,"source":"contracts/TownHall.algo.ts:418","pc":[2092]},{"teal":1404,"source":"contracts/TownHall.algo.ts:417","pc":[2093]},{"teal":1407,"source":"contracts/TownHall.algo.ts:418","pc":[2094]},{"teal":1408,"source":"contracts/TownHall.algo.ts:418","pc":[2095,2096,2097]},{"teal":1409,"source":"contracts/TownHall.algo.ts:419","pc":[2098,2099]},{"teal":1410,"source":"contracts/TownHall.algo.ts:419","pc":[2100,2101]},{"teal":1411,"source":"contracts/TownHall.algo.ts:419","pc":[2102]},{"teal":1412,"source":"contracts/TownHall.algo.ts:419","pc":[2103]},{"teal":1413,"source":"contracts/TownHall.algo.ts:418","pc":[2104]},{"teal":1416,"source":"contracts/TownHall.algo.ts:413","pc":[2105]},{"teal":1417,"source":"contracts/TownHall.algo.ts:412","pc":[2106,2107,2108]},{"teal":1421,"source":"contracts/TownHall.algo.ts:422","errorMessage":"Illegal call: Address sender not allowed to vote.","pc":[2109]},{"teal":1427,"source":"contracts/TownHall.algo.ts:425","pc":[2110,2111]},{"teal":1428,"source":"contracts/TownHall.algo.ts:425","pc":[2112]},{"teal":1429,"source":"contracts/TownHall.algo.ts:425","pc":[2113]},{"teal":1430,"source":"contracts/TownHall.algo.ts:425","pc":[2114]},{"teal":1431,"source":"contracts/TownHall.algo.ts:425","pc":[2115,2116,2117]},{"teal":1432,"source":"contracts/TownHall.algo.ts:425","pc":[2118,2119]},{"teal":1433,"source":"contracts/TownHall.algo.ts:425","pc":[2120]},{"teal":1434,"source":"contracts/TownHall.algo.ts:425","pc":[2121,2122]},{"teal":1435,"source":"contracts/TownHall.algo.ts:425","pc":[2123]},{"teal":1436,"source":"contracts/TownHall.algo.ts:425","pc":[2124]},{"teal":1439,"source":"contracts/TownHall.algo.ts:425","pc":[2125,2126,2127]},{"teal":1444,"source":"contracts/TownHall.algo.ts:426","pc":[2128,2129]},{"teal":1445,"source":"contracts/TownHall.algo.ts:426","pc":[2130]},{"teal":1446,"source":"contracts/TownHall.algo.ts:426","pc":[2131]},{"teal":1447,"source":"contracts/TownHall.algo.ts:426","pc":[2132]},{"teal":1448,"source":"contracts/TownHall.algo.ts:426","pc":[2133,2134]},{"teal":1449,"source":"contracts/TownHall.algo.ts:426","pc":[2135]},{"teal":1450,"source":"contracts/TownHall.algo.ts:426","pc":[2136]},{"teal":1451,"source":"contracts/TownHall.algo.ts:425","pc":[2137,2138,2139]},{"teal":1456,"source":"contracts/TownHall.algo.ts:427","pc":[2140,2141]},{"teal":1457,"source":"contracts/TownHall.algo.ts:427","pc":[2142]},{"teal":1458,"source":"contracts/TownHall.algo.ts:427","pc":[2143]},{"teal":1459,"source":"contracts/TownHall.algo.ts:427","pc":[2144]},{"teal":1460,"source":"contracts/TownHall.algo.ts:427","pc":[2145,2146,2147]},{"teal":1461,"source":"contracts/TownHall.algo.ts:427","pc":[2148,2149]},{"teal":1462,"source":"contracts/TownHall.algo.ts:427","pc":[2150]},{"teal":1463,"source":"contracts/TownHall.algo.ts:427","pc":[2151,2152]},{"teal":1464,"source":"contracts/TownHall.algo.ts:427","pc":[2153]},{"teal":1465,"source":"contracts/TownHall.algo.ts:427","pc":[2154]},{"teal":1468,"source":"contracts/TownHall.algo.ts:427","pc":[2155,2156,2157]},{"teal":1473,"source":"contracts/TownHall.algo.ts:428","pc":[2158,2159]},{"teal":1474,"source":"contracts/TownHall.algo.ts:428","pc":[2160]},{"teal":1475,"source":"contracts/TownHall.algo.ts:428","pc":[2161]},{"teal":1476,"source":"contracts/TownHall.algo.ts:428","pc":[2162]},{"teal":1477,"source":"contracts/TownHall.algo.ts:428","pc":[2163,2164]},{"teal":1478,"source":"contracts/TownHall.algo.ts:428","pc":[2165]},{"teal":1479,"source":"contracts/TownHall.algo.ts:428","pc":[2166]},{"teal":1480,"source":"contracts/TownHall.algo.ts:427","pc":[2167,2168,2169]},{"teal":1485,"source":"contracts/TownHall.algo.ts:429","pc":[2170,2171]},{"teal":1486,"source":"contracts/TownHall.algo.ts:429","pc":[2172,2173]},{"teal":1487,"source":"contracts/TownHall.algo.ts:429","pc":[2174]},{"teal":1488,"source":"contracts/TownHall.algo.ts:429","pc":[2175]},{"teal":1489,"source":"contracts/TownHall.algo.ts:429","pc":[2176,2177,2178]},{"teal":1490,"source":"contracts/TownHall.algo.ts:429","pc":[2179,2180]},{"teal":1491,"source":"contracts/TownHall.algo.ts:429","pc":[2181]},{"teal":1492,"source":"contracts/TownHall.algo.ts:429","pc":[2182,2183]},{"teal":1493,"source":"contracts/TownHall.algo.ts:429","pc":[2184]},{"teal":1494,"source":"contracts/TownHall.algo.ts:429","pc":[2185]},{"teal":1497,"source":"contracts/TownHall.algo.ts:429","pc":[2186,2187,2188]},{"teal":1502,"source":"contracts/TownHall.algo.ts:430","pc":[2189,2190]},{"teal":1503,"source":"contracts/TownHall.algo.ts:430","pc":[2191]},{"teal":1504,"source":"contracts/TownHall.algo.ts:430","pc":[2192]},{"teal":1505,"source":"contracts/TownHall.algo.ts:430","pc":[2193]},{"teal":1506,"source":"contracts/TownHall.algo.ts:430","pc":[2194,2195]},{"teal":1507,"source":"contracts/TownHall.algo.ts:430","pc":[2196]},{"teal":1508,"source":"contracts/TownHall.algo.ts:430","pc":[2197]},{"teal":1509,"source":"contracts/TownHall.algo.ts:429","pc":[2198,2199,2200]},{"teal":1514,"source":"contracts/TownHall.algo.ts:431","pc":[2201,2202]},{"teal":1515,"source":"contracts/TownHall.algo.ts:431","pc":[2203,2204]},{"teal":1516,"source":"contracts/TownHall.algo.ts:431","pc":[2205]},{"teal":1517,"source":"contracts/TownHall.algo.ts:431","pc":[2206]},{"teal":1518,"source":"contracts/TownHall.algo.ts:431","pc":[2207,2208,2209]},{"teal":1519,"source":"contracts/TownHall.algo.ts:431","pc":[2210,2211]},{"teal":1520,"source":"contracts/TownHall.algo.ts:431","pc":[2212]},{"teal":1521,"source":"contracts/TownHall.algo.ts:431","pc":[2213,2214]},{"teal":1522,"source":"contracts/TownHall.algo.ts:431","pc":[2215]},{"teal":1523,"source":"contracts/TownHall.algo.ts:431","pc":[2216]},{"teal":1526,"source":"contracts/TownHall.algo.ts:431","pc":[2217,2218,2219]},{"teal":1531,"source":"contracts/TownHall.algo.ts:432","pc":[2220,2221]},{"teal":1532,"source":"contracts/TownHall.algo.ts:432","pc":[2222]},{"teal":1533,"source":"contracts/TownHall.algo.ts:432","pc":[2223]},{"teal":1534,"source":"contracts/TownHall.algo.ts:432","pc":[2224]},{"teal":1535,"source":"contracts/TownHall.algo.ts:432","pc":[2225,2226]},{"teal":1536,"source":"contracts/TownHall.algo.ts:432","pc":[2227]},{"teal":1537,"source":"contracts/TownHall.algo.ts:432","pc":[2228]},{"teal":1538,"source":"contracts/TownHall.algo.ts:431","pc":[2229,2230,2231]},{"teal":1543,"source":"contracts/TownHall.algo.ts:433","pc":[2232,2233]},{"teal":1544,"source":"contracts/TownHall.algo.ts:433","pc":[2234,2235]},{"teal":1545,"source":"contracts/TownHall.algo.ts:433","pc":[2236]},{"teal":1546,"source":"contracts/TownHall.algo.ts:433","pc":[2237]},{"teal":1547,"source":"contracts/TownHall.algo.ts:433","pc":[2238,2239,2240]},{"teal":1548,"source":"contracts/TownHall.algo.ts:433","pc":[2241,2242]},{"teal":1549,"source":"contracts/TownHall.algo.ts:433","pc":[2243]},{"teal":1550,"source":"contracts/TownHall.algo.ts:433","pc":[2244,2245]},{"teal":1551,"source":"contracts/TownHall.algo.ts:433","pc":[2246]},{"teal":1552,"source":"contracts/TownHall.algo.ts:433","pc":[2247]},{"teal":1555,"source":"contracts/TownHall.algo.ts:433","pc":[2248,2249,2250]},{"teal":1560,"source":"contracts/TownHall.algo.ts:434","pc":[2251,2252]},{"teal":1561,"source":"contracts/TownHall.algo.ts:434","pc":[2253]},{"teal":1562,"source":"contracts/TownHall.algo.ts:434","pc":[2254]},{"teal":1563,"source":"contracts/TownHall.algo.ts:434","pc":[2255]},{"teal":1564,"source":"contracts/TownHall.algo.ts:434","pc":[2256,2257]},{"teal":1565,"source":"contracts/TownHall.algo.ts:434","pc":[2258]},{"teal":1566,"source":"contracts/TownHall.algo.ts:434","pc":[2259]},{"teal":1567,"source":"contracts/TownHall.algo.ts:433","pc":[2260,2261,2262]},{"teal":1572,"source":"contracts/TownHall.algo.ts:435","pc":[2263,2264]},{"teal":1573,"source":"contracts/TownHall.algo.ts:435","pc":[2265]},{"teal":1574,"source":"contracts/TownHall.algo.ts:435","pc":[2266]},{"teal":1575,"source":"contracts/TownHall.algo.ts:435","pc":[2267]},{"teal":1576,"source":"contracts/TownHall.algo.ts:435","pc":[2268,2269,2270]},{"teal":1577,"source":"contracts/TownHall.algo.ts:435","pc":[2271,2272]},{"teal":1578,"source":"contracts/TownHall.algo.ts:435","pc":[2273]},{"teal":1579,"source":"contracts/TownHall.algo.ts:435","pc":[2274,2275]},{"teal":1580,"source":"contracts/TownHall.algo.ts:435","pc":[2276]},{"teal":1581,"source":"contracts/TownHall.algo.ts:435","pc":[2277]},{"teal":1584,"source":"contracts/TownHall.algo.ts:435","pc":[2278,2279,2280]},{"teal":1589,"source":"contracts/TownHall.algo.ts:436","pc":[2281,2282]},{"teal":1590,"source":"contracts/TownHall.algo.ts:436","pc":[2283]},{"teal":1591,"source":"contracts/TownHall.algo.ts:436","pc":[2284]},{"teal":1592,"source":"contracts/TownHall.algo.ts:436","pc":[2285]},{"teal":1593,"source":"contracts/TownHall.algo.ts:436","pc":[2286,2287]},{"teal":1594,"source":"contracts/TownHall.algo.ts:436","pc":[2288]},{"teal":1595,"source":"contracts/TownHall.algo.ts:436","pc":[2289]},{"teal":1596,"source":"contracts/TownHall.algo.ts:435","pc":[2290,2291,2292]},{"teal":1600,"source":"contracts/TownHall.algo.ts:438","errorMessage":"Invalid vote: Is player still alive?","pc":[2293]},{"teal":1606,"source":"contracts/TownHall.algo.ts:441","pc":[2294,2295]},{"teal":1607,"source":"contracts/TownHall.algo.ts:441","pc":[2296,2297]},{"teal":1608,"source":"contracts/TownHall.algo.ts:441","pc":[2298]},{"teal":1609,"source":"contracts/TownHall.algo.ts:441","pc":[2299]},{"teal":1610,"source":"contracts/TownHall.algo.ts:441","pc":[2300]},{"teal":1611,"source":"contracts/TownHall.algo.ts:441","pc":[2301,2302,2303]},{"teal":1612,"source":"contracts/TownHall.algo.ts:441","pc":[2304,2305]},{"teal":1613,"source":"contracts/TownHall.algo.ts:441","pc":[2306]},{"teal":1614,"source":"contracts/TownHall.algo.ts:441","pc":[2307]},{"teal":1615,"source":"contracts/TownHall.algo.ts:441","pc":[2308]},{"teal":1616,"source":"contracts/TownHall.algo.ts:441","pc":[2309]},{"teal":1619,"source":"contracts/TownHall.algo.ts:441","pc":[2310,2311,2312]},{"teal":1624,"source":"contracts/TownHall.algo.ts:442","pc":[2313,2314]},{"teal":1625,"source":"contracts/TownHall.algo.ts:442","pc":[2315]},{"teal":1626,"source":"contracts/TownHall.algo.ts:442","pc":[2316]},{"teal":1627,"source":"contracts/TownHall.algo.ts:441","pc":[2317,2318,2319]},{"teal":1632,"source":"contracts/TownHall.algo.ts:443","pc":[2320,2321]},{"teal":1633,"source":"contracts/TownHall.algo.ts:443","pc":[2322,2323]},{"teal":1634,"source":"contracts/TownHall.algo.ts:443","pc":[2324]},{"teal":1635,"source":"contracts/TownHall.algo.ts:443","pc":[2325]},{"teal":1636,"source":"contracts/TownHall.algo.ts:443","pc":[2326]},{"teal":1637,"source":"contracts/TownHall.algo.ts:443","pc":[2327,2328,2329]},{"teal":1638,"source":"contracts/TownHall.algo.ts:443","pc":[2330,2331]},{"teal":1639,"source":"contracts/TownHall.algo.ts:443","pc":[2332]},{"teal":1640,"source":"contracts/TownHall.algo.ts:443","pc":[2333]},{"teal":1641,"source":"contracts/TownHall.algo.ts:443","pc":[2334]},{"teal":1642,"source":"contracts/TownHall.algo.ts:443","pc":[2335]},{"teal":1645,"source":"contracts/TownHall.algo.ts:443","pc":[2336,2337,2338]},{"teal":1650,"source":"contracts/TownHall.algo.ts:444","pc":[2339,2340]},{"teal":1651,"source":"contracts/TownHall.algo.ts:444","pc":[2341]},{"teal":1652,"source":"contracts/TownHall.algo.ts:444","pc":[2342]},{"teal":1653,"source":"contracts/TownHall.algo.ts:443","pc":[2343,2344,2345]},{"teal":1658,"source":"contracts/TownHall.algo.ts:445","pc":[2346,2347]},{"teal":1659,"source":"contracts/TownHall.algo.ts:445","pc":[2348,2349]},{"teal":1660,"source":"contracts/TownHall.algo.ts:445","pc":[2350]},{"teal":1661,"source":"contracts/TownHall.algo.ts:445","pc":[2351]},{"teal":1662,"source":"contracts/TownHall.algo.ts:445","pc":[2352]},{"teal":1663,"source":"contracts/TownHall.algo.ts:445","pc":[2353,2354,2355]},{"teal":1664,"source":"contracts/TownHall.algo.ts:445","pc":[2356,2357]},{"teal":1665,"source":"contracts/TownHall.algo.ts:445","pc":[2358]},{"teal":1666,"source":"contracts/TownHall.algo.ts:445","pc":[2359]},{"teal":1667,"source":"contracts/TownHall.algo.ts:445","pc":[2360]},{"teal":1668,"source":"contracts/TownHall.algo.ts:445","pc":[2361]},{"teal":1671,"source":"contracts/TownHall.algo.ts:445","pc":[2362,2363,2364]},{"teal":1676,"source":"contracts/TownHall.algo.ts:446","pc":[2365,2366]},{"teal":1677,"source":"contracts/TownHall.algo.ts:446","pc":[2367]},{"teal":1678,"source":"contracts/TownHall.algo.ts:446","pc":[2368]},{"teal":1679,"source":"contracts/TownHall.algo.ts:445","pc":[2369,2370,2371]},{"teal":1684,"source":"contracts/TownHall.algo.ts:447","pc":[2372,2373]},{"teal":1685,"source":"contracts/TownHall.algo.ts:447","pc":[2374,2375]},{"teal":1686,"source":"contracts/TownHall.algo.ts:447","pc":[2376]},{"teal":1687,"source":"contracts/TownHall.algo.ts:447","pc":[2377]},{"teal":1688,"source":"contracts/TownHall.algo.ts:447","pc":[2378]},{"teal":1689,"source":"contracts/TownHall.algo.ts:447","pc":[2379,2380,2381]},{"teal":1690,"source":"contracts/TownHall.algo.ts:447","pc":[2382,2383]},{"teal":1691,"source":"contracts/TownHall.algo.ts:447","pc":[2384]},{"teal":1692,"source":"contracts/TownHall.algo.ts:447","pc":[2385]},{"teal":1693,"source":"contracts/TownHall.algo.ts:447","pc":[2386]},{"teal":1694,"source":"contracts/TownHall.algo.ts:447","pc":[2387]},{"teal":1697,"source":"contracts/TownHall.algo.ts:447","pc":[2388,2389,2390]},{"teal":1702,"source":"contracts/TownHall.algo.ts:448","pc":[2391,2392]},{"teal":1703,"source":"contracts/TownHall.algo.ts:448","pc":[2393]},{"teal":1704,"source":"contracts/TownHall.algo.ts:448","pc":[2394]},{"teal":1705,"source":"contracts/TownHall.algo.ts:447","pc":[2395,2396,2397]},{"teal":1710,"source":"contracts/TownHall.algo.ts:449","pc":[2398,2399]},{"teal":1711,"source":"contracts/TownHall.algo.ts:449","pc":[2400,2401]},{"teal":1712,"source":"contracts/TownHall.algo.ts:449","pc":[2402]},{"teal":1713,"source":"contracts/TownHall.algo.ts:449","pc":[2403]},{"teal":1714,"source":"contracts/TownHall.algo.ts:449","pc":[2404]},{"teal":1715,"source":"contracts/TownHall.algo.ts:449","pc":[2405,2406,2407]},{"teal":1716,"source":"contracts/TownHall.algo.ts:449","pc":[2408,2409]},{"teal":1717,"source":"contracts/TownHall.algo.ts:449","pc":[2410]},{"teal":1718,"source":"contracts/TownHall.algo.ts:449","pc":[2411]},{"teal":1719,"source":"contracts/TownHall.algo.ts:449","pc":[2412]},{"teal":1720,"source":"contracts/TownHall.algo.ts:449","pc":[2413]},{"teal":1723,"source":"contracts/TownHall.algo.ts:449","pc":[2414,2415,2416]},{"teal":1728,"source":"contracts/TownHall.algo.ts:450","pc":[2417,2418]},{"teal":1729,"source":"contracts/TownHall.algo.ts:450","pc":[2419]},{"teal":1730,"source":"contracts/TownHall.algo.ts:450","pc":[2420]},{"teal":1731,"source":"contracts/TownHall.algo.ts:449","pc":[2421,2422,2423]},{"teal":1736,"source":"contracts/TownHall.algo.ts:451","pc":[2424,2425]},{"teal":1737,"source":"contracts/TownHall.algo.ts:451","pc":[2426,2427]},{"teal":1738,"source":"contracts/TownHall.algo.ts:451","pc":[2428]},{"teal":1739,"source":"contracts/TownHall.algo.ts:451","pc":[2429]},{"teal":1740,"source":"contracts/TownHall.algo.ts:451","pc":[2430]},{"teal":1741,"source":"contracts/TownHall.algo.ts:451","pc":[2431,2432,2433]},{"teal":1742,"source":"contracts/TownHall.algo.ts:451","pc":[2434,2435]},{"teal":1743,"source":"contracts/TownHall.algo.ts:451","pc":[2436]},{"teal":1744,"source":"contracts/TownHall.algo.ts:451","pc":[2437]},{"teal":1745,"source":"contracts/TownHall.algo.ts:451","pc":[2438]},{"teal":1746,"source":"contracts/TownHall.algo.ts:451","pc":[2439]},{"teal":1749,"source":"contracts/TownHall.algo.ts:451","pc":[2440,2441,2442]},{"teal":1754,"source":"contracts/TownHall.algo.ts:452","pc":[2443,2444]},{"teal":1755,"source":"contracts/TownHall.algo.ts:452","pc":[2445]},{"teal":1756,"source":"contracts/TownHall.algo.ts:452","pc":[2446]},{"teal":1757,"source":"contracts/TownHall.algo.ts:451","pc":[2447,2448,2449]},{"teal":1761,"source":"contracts/TownHall.algo.ts:454","errorMessage":"Address not allowed to vote.","pc":[2450]},{"teal":1766,"source":"contracts/TownHall.algo.ts:457","pc":[2451,2452]},{"teal":1767,"source":"contracts/TownHall.algo.ts:457","pc":[2453]},{"teal":1768,"source":"contracts/TownHall.algo.ts:457","pc":[2454]},{"teal":1769,"source":"contracts/TownHall.algo.ts:457","pc":[2455]},{"teal":1770,"source":"contracts/TownHall.algo.ts:457","pc":[2456,2457]},{"teal":1771,"source":"contracts/TownHall.algo.ts:457","pc":[2458]},{"teal":1772,"source":"contracts/TownHall.algo.ts:457","pc":[2459]},{"teal":1777,"source":"contracts/TownHall.algo.ts:459","pc":[2460,2461]},{"teal":1778,"source":"contracts/TownHall.algo.ts:459","pc":[2462]},{"teal":1779,"source":"contracts/TownHall.algo.ts:459","pc":[2463,2464]},{"teal":1780,"source":"contracts/TownHall.algo.ts:459","pc":[2465]},{"teal":1781,"source":"contracts/TownHall.algo.ts:459","pc":[2466]},{"teal":1782,"source":"contracts/TownHall.algo.ts:459","pc":[2467,2468,2469]},{"teal":1787,"source":"contracts/TownHall.algo.ts:461","pc":[2470]},{"teal":1788,"source":"contracts/Constants.ts:20","pc":[2471,2472]},{"teal":1789,"source":"contracts/TownHall.algo.ts:461","pc":[2473]},{"teal":1793,"source":"contracts/TownHall.algo.ts:464","pc":[2474,2475]},{"teal":1794,"source":"contracts/TownHall.algo.ts:464","pc":[2476]},{"teal":1795,"source":"contracts/TownHall.algo.ts:464","pc":[2477]},{"teal":1799,"source":"contracts/TownHall.algo.ts:465","pc":[2478,2479]},{"teal":1800,"source":"contracts/TownHall.algo.ts:465","pc":[2480]},{"teal":1801,"source":"contracts/TownHall.algo.ts:465","pc":[2481]},{"teal":1805,"source":"contracts/TownHall.algo.ts:466","pc":[2482,2483]},{"teal":1806,"source":"contracts/TownHall.algo.ts:466","pc":[2484]},{"teal":1807,"source":"contracts/TownHall.algo.ts:466","pc":[2485]},{"teal":1811,"source":"contracts/TownHall.algo.ts:467","pc":[2486,2487]},{"teal":1812,"source":"contracts/TownHall.algo.ts:467","pc":[2488]},{"teal":1813,"source":"contracts/TownHall.algo.ts:467","pc":[2489]},{"teal":1817,"source":"contracts/TownHall.algo.ts:468","pc":[2490,2491]},{"teal":1818,"source":"contracts/TownHall.algo.ts:468","pc":[2492]},{"teal":1819,"source":"contracts/TownHall.algo.ts:468","pc":[2493]},{"teal":1823,"source":"contracts/TownHall.algo.ts:469","pc":[2494,2495]},{"teal":1824,"source":"contracts/TownHall.algo.ts:469","pc":[2496]},{"teal":1825,"source":"contracts/TownHall.algo.ts:469","pc":[2497]},{"teal":1829,"source":"contracts/TownHall.algo.ts:470","pc":[2498,2499]},{"teal":1830,"source":"contracts/TownHall.algo.ts:470","pc":[2500]},{"teal":1831,"source":"contracts/TownHall.algo.ts:470","pc":[2501]},{"teal":1834,"source":"contracts/TownHall.algo.ts:407","pc":[2502]},{"teal":1839,"source":"contracts/TownHall.algo.ts:476","pc":[2503,2504,2505]},{"teal":1840,"source":"contracts/TownHall.algo.ts:476","pc":[2506]},{"teal":1841,"source":"contracts/TownHall.algo.ts:476","pc":[2507]},{"teal":1845,"source":"contracts/TownHall.algo.ts:476","pc":[2508,2509,2510]},{"teal":1848,"source":"contracts/TownHall.algo.ts:476","pc":[2511]},{"teal":1849,"source":"contracts/TownHall.algo.ts:476","pc":[2512]},{"teal":1856,"source":"contracts/TownHall.algo.ts:478","pc":[2513]},{"teal":1857,"source":"contracts/TownHall.algo.ts:478","pc":[2514]},{"teal":1858,"source":"contracts/Constants.ts:20","pc":[2515,2516]},{"teal":1859,"source":"contracts/TownHall.algo.ts:478","pc":[2517]},{"teal":1862,"source":"contracts/TownHall.algo.ts:477","errorMessage":"Invalid method call: Game is not in Day Stage Eliminate state.","pc":[2518]},{"teal":1866,"source":"contracts/TownHall.algo.ts:482","pc":[2519]},{"teal":1867,"source":"contracts/TownHall.algo.ts:482","pc":[2520,2521]},{"teal":1868,"source":"contracts/TownHall.algo.ts:482","pc":[2522]},{"teal":1872,"source":"contracts/TownHall.algo.ts:483","pc":[2523]},{"teal":1873,"source":"contracts/TownHall.algo.ts:483","pc":[2524,2525]},{"teal":1877,"source":"contracts/TownHall.algo.ts:489","pc":[2526,2527]},{"teal":1878,"source":"contracts/TownHall.algo.ts:489","pc":[2528]},{"teal":1879,"source":"contracts/TownHall.algo.ts:489","pc":[2529]},{"teal":1880,"source":"contracts/TownHall.algo.ts:489","pc":[2530]},{"teal":1881,"source":"contracts/TownHall.algo.ts:489","pc":[2531]},{"teal":1882,"source":"contracts/TownHall.algo.ts:489","pc":[2532,2533]},{"teal":1887,"source":"contracts/TownHall.algo.ts:491","pc":[2534,2535]},{"teal":1888,"source":"contracts/TownHall.algo.ts:491","pc":[2536]},{"teal":1889,"source":"contracts/TownHall.algo.ts:491","pc":[2537,2538]},{"teal":1890,"source":"contracts/TownHall.algo.ts:491","pc":[2539]},{"teal":1891,"source":"contracts/TownHall.algo.ts:491","pc":[2540]},{"teal":1892,"source":"contracts/TownHall.algo.ts:491","pc":[2541,2542,2543]},{"teal":1893,"source":"contracts/TownHall.algo.ts:491","pc":[2544,2545]},{"teal":1894,"source":"contracts/TownHall.algo.ts:491","pc":[2546]},{"teal":1895,"source":"contracts/TownHall.algo.ts:491","pc":[2547,2548]},{"teal":1896,"source":"contracts/TownHall.algo.ts:491","pc":[2549]},{"teal":1897,"source":"contracts/TownHall.algo.ts:491","pc":[2550]},{"teal":1898,"source":"contracts/TownHall.algo.ts:491","pc":[2551,2552,2553]},{"teal":1899,"source":"contracts/TownHall.algo.ts:491","pc":[2554,2555]},{"teal":1900,"source":"contracts/TownHall.algo.ts:491","pc":[2556]},{"teal":1903,"source":"contracts/TownHall.algo.ts:491","pc":[2557]},{"teal":1906,"source":"contracts/TownHall.algo.ts:491","pc":[2558,2559,2560]},{"teal":1911,"source":"contracts/TownHall.algo.ts:492","pc":[2561]},{"teal":1912,"source":"contracts/TownHall.algo.ts:492","pc":[2562,2563]},{"teal":1913,"source":"contracts/TownHall.algo.ts:492","pc":[2564]},{"teal":1914,"source":"contracts/TownHall.algo.ts:492","pc":[2565]},{"teal":1918,"source":"contracts/TownHall.algo.ts:493","pc":[2566,2567]},{"teal":1919,"source":"contracts/TownHall.algo.ts:493","pc":[2568]},{"teal":1920,"source":"contracts/TownHall.algo.ts:493","pc":[2569,2570]},{"teal":1926,"source":"contracts/TownHall.algo.ts:496","pc":[2571,2572]},{"teal":1927,"source":"contracts/TownHall.algo.ts:496","pc":[2573]},{"teal":1928,"source":"contracts/TownHall.algo.ts:496","pc":[2574,2575]},{"teal":1929,"source":"contracts/TownHall.algo.ts:496","pc":[2576]},{"teal":1930,"source":"contracts/TownHall.algo.ts:496","pc":[2577]},{"teal":1931,"source":"contracts/TownHall.algo.ts:496","pc":[2578,2579,2580]},{"teal":1932,"source":"contracts/TownHall.algo.ts:496","pc":[2581,2582]},{"teal":1933,"source":"contracts/TownHall.algo.ts:496","pc":[2583]},{"teal":1934,"source":"contracts/TownHall.algo.ts:496","pc":[2584,2585]},{"teal":1935,"source":"contracts/TownHall.algo.ts:496","pc":[2586]},{"teal":1936,"source":"contracts/TownHall.algo.ts:496","pc":[2587]},{"teal":1937,"source":"contracts/TownHall.algo.ts:496","pc":[2588,2589,2590]},{"teal":1938,"source":"contracts/TownHall.algo.ts:496","pc":[2591,2592]},{"teal":1939,"source":"contracts/TownHall.algo.ts:496","pc":[2593]},{"teal":1942,"source":"contracts/TownHall.algo.ts:496","pc":[2594]},{"teal":1945,"source":"contracts/TownHall.algo.ts:496","pc":[2595,2596,2597]},{"teal":1950,"source":"contracts/TownHall.algo.ts:497","pc":[2598]},{"teal":1951,"source":"contracts/TownHall.algo.ts:497","pc":[2599,2600]},{"teal":1952,"source":"contracts/TownHall.algo.ts:497","pc":[2601]},{"teal":1953,"source":"contracts/TownHall.algo.ts:497","pc":[2602]},{"teal":1957,"source":"contracts/TownHall.algo.ts:498","pc":[2603,2604]},{"teal":1958,"source":"contracts/TownHall.algo.ts:498","pc":[2605]},{"teal":1959,"source":"contracts/TownHall.algo.ts:498","pc":[2606,2607]},{"teal":1965,"source":"contracts/TownHall.algo.ts:501","pc":[2608,2609]},{"teal":1966,"source":"contracts/TownHall.algo.ts:501","pc":[2610]},{"teal":1967,"source":"contracts/TownHall.algo.ts:501","pc":[2611,2612]},{"teal":1968,"source":"contracts/TownHall.algo.ts:501","pc":[2613]},{"teal":1969,"source":"contracts/TownHall.algo.ts:501","pc":[2614]},{"teal":1970,"source":"contracts/TownHall.algo.ts:501","pc":[2615,2616,2617]},{"teal":1971,"source":"contracts/TownHall.algo.ts:501","pc":[2618,2619]},{"teal":1972,"source":"contracts/TownHall.algo.ts:501","pc":[2620]},{"teal":1973,"source":"contracts/TownHall.algo.ts:501","pc":[2621,2622]},{"teal":1974,"source":"contracts/TownHall.algo.ts:501","pc":[2623]},{"teal":1975,"source":"contracts/TownHall.algo.ts:501","pc":[2624]},{"teal":1976,"source":"contracts/TownHall.algo.ts:501","pc":[2625,2626,2627]},{"teal":1977,"source":"contracts/TownHall.algo.ts:501","pc":[2628,2629]},{"teal":1978,"source":"contracts/TownHall.algo.ts:501","pc":[2630]},{"teal":1981,"source":"contracts/TownHall.algo.ts:501","pc":[2631]},{"teal":1984,"source":"contracts/TownHall.algo.ts:501","pc":[2632,2633,2634]},{"teal":1989,"source":"contracts/TownHall.algo.ts:502","pc":[2635]},{"teal":1990,"source":"contracts/TownHall.algo.ts:502","pc":[2636,2637]},{"teal":1991,"source":"contracts/TownHall.algo.ts:502","pc":[2638]},{"teal":1992,"source":"contracts/TownHall.algo.ts:502","pc":[2639]},{"teal":1996,"source":"contracts/TownHall.algo.ts:503","pc":[2640,2641]},{"teal":1997,"source":"contracts/TownHall.algo.ts:503","pc":[2642]},{"teal":1998,"source":"contracts/TownHall.algo.ts:503","pc":[2643,2644]},{"teal":2004,"source":"contracts/TownHall.algo.ts:506","pc":[2645,2646]},{"teal":2005,"source":"contracts/TownHall.algo.ts:506","pc":[2647]},{"teal":2006,"source":"contracts/TownHall.algo.ts:506","pc":[2648,2649]},{"teal":2007,"source":"contracts/TownHall.algo.ts:506","pc":[2650]},{"teal":2008,"source":"contracts/TownHall.algo.ts:506","pc":[2651]},{"teal":2009,"source":"contracts/TownHall.algo.ts:506","pc":[2652,2653,2654]},{"teal":2010,"source":"contracts/TownHall.algo.ts:506","pc":[2655,2656]},{"teal":2011,"source":"contracts/TownHall.algo.ts:506","pc":[2657]},{"teal":2012,"source":"contracts/TownHall.algo.ts:506","pc":[2658,2659]},{"teal":2013,"source":"contracts/TownHall.algo.ts:506","pc":[2660]},{"teal":2014,"source":"contracts/TownHall.algo.ts:506","pc":[2661]},{"teal":2015,"source":"contracts/TownHall.algo.ts:506","pc":[2662,2663,2664]},{"teal":2016,"source":"contracts/TownHall.algo.ts:506","pc":[2665,2666]},{"teal":2017,"source":"contracts/TownHall.algo.ts:506","pc":[2667]},{"teal":2020,"source":"contracts/TownHall.algo.ts:506","pc":[2668]},{"teal":2023,"source":"contracts/TownHall.algo.ts:506","pc":[2669,2670,2671]},{"teal":2028,"source":"contracts/TownHall.algo.ts:507","pc":[2672]},{"teal":2029,"source":"contracts/TownHall.algo.ts:507","pc":[2673,2674]},{"teal":2030,"source":"contracts/TownHall.algo.ts:507","pc":[2675]},{"teal":2031,"source":"contracts/TownHall.algo.ts:507","pc":[2676]},{"teal":2035,"source":"contracts/TownHall.algo.ts:508","pc":[2677,2678]},{"teal":2036,"source":"contracts/TownHall.algo.ts:508","pc":[2679]},{"teal":2037,"source":"contracts/TownHall.algo.ts:508","pc":[2680,2681]},{"teal":2043,"source":"contracts/TownHall.algo.ts:511","pc":[2682,2683]},{"teal":2044,"source":"contracts/TownHall.algo.ts:511","pc":[2684]},{"teal":2045,"source":"contracts/TownHall.algo.ts:511","pc":[2685,2686]},{"teal":2046,"source":"contracts/TownHall.algo.ts:511","pc":[2687]},{"teal":2047,"source":"contracts/TownHall.algo.ts:511","pc":[2688]},{"teal":2048,"source":"contracts/TownHall.algo.ts:511","pc":[2689,2690,2691]},{"teal":2049,"source":"contracts/TownHall.algo.ts:511","pc":[2692,2693]},{"teal":2050,"source":"contracts/TownHall.algo.ts:511","pc":[2694]},{"teal":2051,"source":"contracts/TownHall.algo.ts:511","pc":[2695,2696]},{"teal":2052,"source":"contracts/TownHall.algo.ts:511","pc":[2697]},{"teal":2053,"source":"contracts/TownHall.algo.ts:511","pc":[2698]},{"teal":2054,"source":"contracts/TownHall.algo.ts:511","pc":[2699,2700,2701]},{"teal":2055,"source":"contracts/TownHall.algo.ts:511","pc":[2702,2703]},{"teal":2056,"source":"contracts/TownHall.algo.ts:511","pc":[2704]},{"teal":2059,"source":"contracts/TownHall.algo.ts:511","pc":[2705]},{"teal":2062,"source":"contracts/TownHall.algo.ts:511","pc":[2706,2707,2708]},{"teal":2067,"source":"contracts/TownHall.algo.ts:512","pc":[2709]},{"teal":2068,"source":"contracts/TownHall.algo.ts:512","pc":[2710,2711]},{"teal":2069,"source":"contracts/TownHall.algo.ts:512","pc":[2712]},{"teal":2070,"source":"contracts/TownHall.algo.ts:512","pc":[2713]},{"teal":2074,"source":"contracts/TownHall.algo.ts:513","pc":[2714,2715]},{"teal":2075,"source":"contracts/TownHall.algo.ts:513","pc":[2716]},{"teal":2076,"source":"contracts/TownHall.algo.ts:513","pc":[2717,2718]},{"teal":2082,"source":"contracts/TownHall.algo.ts:516","pc":[2719,2720]},{"teal":2083,"source":"contracts/TownHall.algo.ts:516","pc":[2721]},{"teal":2084,"source":"contracts/TownHall.algo.ts:516","pc":[2722,2723]},{"teal":2085,"source":"contracts/TownHall.algo.ts:516","pc":[2724]},{"teal":2086,"source":"contracts/TownHall.algo.ts:516","pc":[2725]},{"teal":2087,"source":"contracts/TownHall.algo.ts:516","pc":[2726,2727,2728]},{"teal":2088,"source":"contracts/TownHall.algo.ts:516","pc":[2729,2730]},{"teal":2089,"source":"contracts/TownHall.algo.ts:516","pc":[2731]},{"teal":2090,"source":"contracts/TownHall.algo.ts:516","pc":[2732,2733]},{"teal":2091,"source":"contracts/TownHall.algo.ts:516","pc":[2734]},{"teal":2092,"source":"contracts/TownHall.algo.ts:516","pc":[2735]},{"teal":2093,"source":"contracts/TownHall.algo.ts:516","pc":[2736,2737,2738]},{"teal":2094,"source":"contracts/TownHall.algo.ts:516","pc":[2739,2740]},{"teal":2095,"source":"contracts/TownHall.algo.ts:516","pc":[2741]},{"teal":2098,"source":"contracts/TownHall.algo.ts:516","pc":[2742]},{"teal":2101,"source":"contracts/TownHall.algo.ts:516","pc":[2743,2744,2745]},{"teal":2106,"source":"contracts/TownHall.algo.ts:517","pc":[2746]},{"teal":2107,"source":"contracts/TownHall.algo.ts:517","pc":[2747,2748]},{"teal":2108,"source":"contracts/TownHall.algo.ts:517","pc":[2749]},{"teal":2109,"source":"contracts/TownHall.algo.ts:517","pc":[2750]},{"teal":2113,"source":"contracts/TownHall.algo.ts:518","pc":[2751,2752]},{"teal":2114,"source":"contracts/TownHall.algo.ts:518","pc":[2753]},{"teal":2115,"source":"contracts/TownHall.algo.ts:518","pc":[2754,2755]},{"teal":2120,"source":"contracts/TownHall.algo.ts:521","pc":[2756]},{"teal":2121,"source":"contracts/TownHall.algo.ts:521","pc":[2757]},{"teal":2122,"source":"contracts/TownHall.algo.ts:521","pc":[2758,2759]},{"teal":2123,"source":"contracts/TownHall.algo.ts:521","pc":[2760]},{"teal":2126,"source":"contracts/TownHall.algo.ts:521","errorMessage":"Error state: Zero Address won vote!","pc":[2761]},{"teal":2130,"source":"contracts/TownHall.algo.ts:522","pc":[2762,2763]},{"teal":2131,"source":"contracts/TownHall.algo.ts:522","pc":[2764]},{"teal":2132,"source":"contracts/TownHall.algo.ts:522","pc":[2765]},{"teal":2135,"source":"contracts/TownHall.algo.ts:522","errorMessage":"Error state: No votes were cast!","pc":[2766]},{"teal":2140,"source":"contracts/TownHall.algo.ts:527","pc":[2767]},{"teal":2141,"source":"contracts/TownHall.algo.ts:527","pc":[2768]},{"teal":2142,"source":"contracts/TownHall.algo.ts:527","pc":[2769,2770]},{"teal":2143,"source":"contracts/TownHall.algo.ts:527","pc":[2771]},{"teal":2144,"source":"contracts/TownHall.algo.ts:527","pc":[2772]},{"teal":2145,"source":"contracts/TownHall.algo.ts:527","pc":[2773,2774,2775]},{"teal":2150,"source":"contracts/TownHall.algo.ts:528","pc":[2776,2777]},{"teal":2151,"source":"contracts/TownHall.algo.ts:528","pc":[2778,2779]},{"teal":2152,"source":"contracts/TownHall.algo.ts:528","pc":[2780]},{"teal":2158,"source":"contracts/TownHall.algo.ts:531","pc":[2781]},{"teal":2159,"source":"contracts/TownHall.algo.ts:531","pc":[2782]},{"teal":2160,"source":"contracts/TownHall.algo.ts:531","pc":[2783,2784]},{"teal":2161,"source":"contracts/TownHall.algo.ts:531","pc":[2785]},{"teal":2162,"source":"contracts/TownHall.algo.ts:531","pc":[2786]},{"teal":2163,"source":"contracts/TownHall.algo.ts:531","pc":[2787,2788,2789]},{"teal":2168,"source":"contracts/TownHall.algo.ts:532","pc":[2790,2791]},{"teal":2169,"source":"contracts/TownHall.algo.ts:532","pc":[2792,2793]},{"teal":2170,"source":"contracts/TownHall.algo.ts:532","pc":[2794]},{"teal":2176,"source":"contracts/TownHall.algo.ts:535","pc":[2795]},{"teal":2177,"source":"contracts/TownHall.algo.ts:535","pc":[2796]},{"teal":2178,"source":"contracts/TownHall.algo.ts:535","pc":[2797,2798]},{"teal":2179,"source":"contracts/TownHall.algo.ts:535","pc":[2799]},{"teal":2180,"source":"contracts/TownHall.algo.ts:535","pc":[2800]},{"teal":2181,"source":"contracts/TownHall.algo.ts:535","pc":[2801,2802,2803]},{"teal":2186,"source":"contracts/TownHall.algo.ts:536","pc":[2804,2805]},{"teal":2187,"source":"contracts/TownHall.algo.ts:536","pc":[2806,2807]},{"teal":2188,"source":"contracts/TownHall.algo.ts:536","pc":[2808]},{"teal":2194,"source":"contracts/TownHall.algo.ts:539","pc":[2809]},{"teal":2195,"source":"contracts/TownHall.algo.ts:539","pc":[2810]},{"teal":2196,"source":"contracts/TownHall.algo.ts:539","pc":[2811,2812]},{"teal":2197,"source":"contracts/TownHall.algo.ts:539","pc":[2813]},{"teal":2198,"source":"contracts/TownHall.algo.ts:539","pc":[2814]},{"teal":2199,"source":"contracts/TownHall.algo.ts:539","pc":[2815,2816,2817]},{"teal":2204,"source":"contracts/TownHall.algo.ts:540","pc":[2818,2819]},{"teal":2205,"source":"contracts/TownHall.algo.ts:540","pc":[2820,2821]},{"teal":2206,"source":"contracts/TownHall.algo.ts:540","pc":[2822]},{"teal":2212,"source":"contracts/TownHall.algo.ts:543","pc":[2823]},{"teal":2213,"source":"contracts/TownHall.algo.ts:543","pc":[2824]},{"teal":2214,"source":"contracts/TownHall.algo.ts:543","pc":[2825,2826]},{"teal":2215,"source":"contracts/TownHall.algo.ts:543","pc":[2827]},{"teal":2216,"source":"contracts/TownHall.algo.ts:543","pc":[2828]},{"teal":2217,"source":"contracts/TownHall.algo.ts:543","pc":[2829,2830,2831]},{"teal":2222,"source":"contracts/TownHall.algo.ts:544","pc":[2832,2833]},{"teal":2223,"source":"contracts/TownHall.algo.ts:544","pc":[2834,2835]},{"teal":2224,"source":"contracts/TownHall.algo.ts:544","pc":[2836]},{"teal":2230,"source":"contracts/TownHall.algo.ts:547","pc":[2837]},{"teal":2231,"source":"contracts/TownHall.algo.ts:547","pc":[2838]},{"teal":2232,"source":"contracts/TownHall.algo.ts:547","pc":[2839,2840]},{"teal":2233,"source":"contracts/TownHall.algo.ts:547","pc":[2841]},{"teal":2234,"source":"contracts/TownHall.algo.ts:547","pc":[2842]},{"teal":2235,"source":"contracts/TownHall.algo.ts:547","pc":[2843,2844,2845]},{"teal":2240,"source":"contracts/TownHall.algo.ts:548","pc":[2846,2847]},{"teal":2241,"source":"contracts/TownHall.algo.ts:548","pc":[2848,2849]},{"teal":2242,"source":"contracts/TownHall.algo.ts:548","pc":[2850]},{"teal":2247,"source":"contracts/TownHall.algo.ts:551","pc":[2851,2852]},{"teal":2248,"source":"contracts/TownHall.algo.ts:551","pc":[2853]},{"teal":2249,"source":"contracts/TownHall.algo.ts:551","pc":[2854]},{"teal":2250,"source":"contracts/TownHall.algo.ts:551","pc":[2855]},{"teal":2251,"source":"contracts/TownHall.algo.ts:551","pc":[2856,2857]},{"teal":2252,"source":"contracts/TownHall.algo.ts:551","pc":[2858]},{"teal":2253,"source":"contracts/TownHall.algo.ts:551","pc":[2859]},{"teal":2257,"source":"contracts/TownHall.algo.ts:555","pc":[2860,2861]},{"teal":2258,"source":"contracts/TownHall.algo.ts:555","pc":[2862]},{"teal":2259,"source":"contracts/TownHall.algo.ts:555","pc":[2863]},{"teal":2263,"source":"contracts/TownHall.algo.ts:556","pc":[2864,2865]},{"teal":2264,"source":"contracts/TownHall.algo.ts:556","pc":[2866]},{"teal":2265,"source":"contracts/TownHall.algo.ts:556","pc":[2867]},{"teal":2269,"source":"contracts/TownHall.algo.ts:557","pc":[2868,2869]},{"teal":2270,"source":"contracts/TownHall.algo.ts:557","pc":[2870]},{"teal":2271,"source":"contracts/TownHall.algo.ts:557","pc":[2871]},{"teal":2275,"source":"contracts/TownHall.algo.ts:558","pc":[2872,2873]},{"teal":2276,"source":"contracts/TownHall.algo.ts:558","pc":[2874]},{"teal":2277,"source":"contracts/TownHall.algo.ts:558","pc":[2875]},{"teal":2281,"source":"contracts/TownHall.algo.ts:559","pc":[2876,2877]},{"teal":2282,"source":"contracts/TownHall.algo.ts:559","pc":[2878]},{"teal":2283,"source":"contracts/TownHall.algo.ts:559","pc":[2879]},{"teal":2287,"source":"contracts/TownHall.algo.ts:560","pc":[2880,2881]},{"teal":2288,"source":"contracts/TownHall.algo.ts:560","pc":[2882]},{"teal":2289,"source":"contracts/TownHall.algo.ts:560","pc":[2883]},{"teal":2293,"source":"contracts/TownHall.algo.ts:562","pc":[2884]},{"teal":2294,"source":"contracts/Constants.ts:21","pc":[2885,2886]},{"teal":2295,"source":"contracts/TownHall.algo.ts:562","pc":[2887]},{"teal":2296,"source":"contracts/TownHall.algo.ts:476","pc":[2888]},{"teal":2301,"source":"contracts/TownHall.algo.ts:565","pc":[2889,2890,2891]},{"teal":2302,"source":"contracts/TownHall.algo.ts:565","pc":[2892,2893,2894]},{"teal":2305,"source":"contracts/TownHall.algo.ts:565","pc":[2895,2896,2897]},{"teal":2306,"source":"contracts/TownHall.algo.ts:565","pc":[2898]},{"teal":2307,"source":"contracts/TownHall.algo.ts:565","pc":[2899]},{"teal":2311,"source":"contracts/TownHall.algo.ts:565","pc":[2900,2901,2902]},{"teal":2314,"source":"contracts/TownHall.algo.ts:565","pc":[2903]},{"teal":2315,"source":"contracts/TownHall.algo.ts:565","pc":[2904,2905]},{"teal":2322,"source":"contracts/TownHall.algo.ts:567","pc":[2906]},{"teal":2323,"source":"contracts/TownHall.algo.ts:567","pc":[2907]},{"teal":2324,"source":"contracts/Constants.ts:21","pc":[2908,2909]},{"teal":2325,"source":"contracts/TownHall.algo.ts:567","pc":[2910]},{"teal":2328,"source":"contracts/TownHall.algo.ts:566","errorMessage":"Invalid method call: Game is not in Day Stage Reveal state.","pc":[2911]},{"teal":2332,"source":"contracts/TownHall.algo.ts:571","pc":[2912]},{"teal":2333,"source":"contracts/TownHall.algo.ts:571","pc":[2913]},{"teal":2334,"source":"contracts/TownHall.algo.ts:571","pc":[2914,2915]},{"teal":2335,"source":"contracts/TownHall.algo.ts:571","pc":[2916]},{"teal":2338,"source":"contracts/TownHall.algo.ts:571","errorMessage":"Error state: Other player called method.","pc":[2917]},{"teal":2342,"source":"contracts/TownHall.algo.ts:574","pc":[2918,2919]},{"teal":2343,"source":"contracts/TownHall.algo.ts:574","pc":[2920,2921]},{"teal":2344,"source":"contracts/TownHall.algo.ts:574","pc":[2922,2923]},{"teal":2345,"source":"contracts/TownHall.algo.ts:574","pc":[2924,2925]},{"teal":2349,"source":"contracts/TownHall.algo.ts:575","pc":[2926,2927]},{"teal":2350,"source":"contracts/TownHall.algo.ts:575","pc":[2928,2929,2930]},{"teal":2351,"source":"contracts/TownHall.algo.ts:575","pc":[2931,2932]},{"teal":2355,"source":"contracts/TownHall.algo.ts:576","pc":[2933,2934]},{"teal":2356,"source":"contracts/TownHall.algo.ts:576","pc":[2935,2936]},{"teal":2357,"source":"contracts/TownHall.algo.ts:576","pc":[2937,2938]},{"teal":2358,"source":"contracts/TownHall.algo.ts:576","pc":[2939,2940]},{"teal":2363,"source":"contracts/TownHall.algo.ts:578","pc":[2941,2942]},{"teal":2364,"source":"contracts/TownHall.algo.ts:578","pc":[2943,2944]},{"teal":2365,"source":"contracts/TownHall.algo.ts:578","pc":[2945]},{"teal":2366,"source":"contracts/TownHall.algo.ts:578","pc":[2946]},{"teal":2367,"source":"contracts/TownHall.algo.ts:578","pc":[2947,2948,2949]},{"teal":2372,"source":"contracts/TownHall.algo.ts:581","pc":[2950,2951]},{"teal":2373,"source":"contracts/TownHall.algo.ts:581","pc":[2952,2953]},{"teal":2374,"source":"contracts/TownHall.algo.ts:581","pc":[2954]},{"teal":2378,"source":"contracts/TownHall.algo.ts:582","pc":[2955]},{"teal":2379,"source":"contracts/Constants.ts:28","pc":[2956,2957]},{"teal":2380,"source":"contracts/TownHall.algo.ts:582","pc":[2958]},{"teal":2384,"source":"contracts/TownHall.algo.ts:583","pc":[2959]},{"teal":2390,"source":"contracts/TownHall.algo.ts:586","pc":[2960,2961]},{"teal":2391,"source":"contracts/TownHall.algo.ts:586","pc":[2962,2963]},{"teal":2392,"source":"contracts/TownHall.algo.ts:586","pc":[2964]},{"teal":2393,"source":"contracts/TownHall.algo.ts:586","pc":[2965]},{"teal":2394,"source":"contracts/TownHall.algo.ts:586","pc":[2966,2967,2968]},{"teal":2399,"source":"contracts/TownHall.algo.ts:588","pc":[2969,2970]},{"teal":2400,"source":"contracts/TownHall.algo.ts:588","pc":[2971,2972]},{"teal":2401,"source":"contracts/TownHall.algo.ts:588","pc":[2973]},{"teal":2406,"source":"contracts/TownHall.algo.ts:591","pc":[2974]},{"teal":2407,"source":"contracts/TownHall.algo.ts:591","pc":[2975,2976]},{"teal":2408,"source":"contracts/TownHall.algo.ts:591","pc":[2977]},{"teal":2413,"source":"contracts/TownHall.algo.ts:593","pc":[2978,2979]},{"teal":2414,"source":"contracts/TownHall.algo.ts:593","pc":[2980]},{"teal":2415,"source":"contracts/TownHall.algo.ts:593","pc":[2981]},{"teal":2416,"source":"contracts/TownHall.algo.ts:593","pc":[2982]},{"teal":2417,"source":"contracts/TownHall.algo.ts:593","pc":[2983,2984,2985]},{"teal":2422,"source":"contracts/TownHall.algo.ts:596","pc":[2986]},{"teal":2423,"source":"contracts/Constants.ts:28","pc":[2987,2988]},{"teal":2424,"source":"contracts/TownHall.algo.ts:596","pc":[2989]},{"teal":2428,"source":"contracts/TownHall.algo.ts:597","pc":[2990]},{"teal":2433,"source":"contracts/TownHall.algo.ts:600","pc":[2991]},{"teal":2434,"source":"contracts/Constants.ts:22","pc":[2992]},{"teal":2435,"source":"contracts/TownHall.algo.ts:600","pc":[2993]},{"teal":2436,"source":"contracts/TownHall.algo.ts:565","pc":[2994]},{"teal":2441,"source":"contracts/TownHall.algo.ts:603","pc":[2995,2996,2997]},{"teal":2442,"source":"contracts/TownHall.algo.ts:603","pc":[2998,2999,3000]},{"teal":2445,"source":"contracts/TownHall.algo.ts:603","pc":[3001,3002,3003]},{"teal":2446,"source":"contracts/TownHall.algo.ts:603","pc":[3004]},{"teal":2447,"source":"contracts/TownHall.algo.ts:603","pc":[3005]},{"teal":2451,"source":"contracts/TownHall.algo.ts:603","pc":[3006,3007,3008]},{"teal":2458,"source":"contracts/TownHall.algo.ts:605","pc":[3009]},{"teal":2459,"source":"contracts/TownHall.algo.ts:605","pc":[3010]},{"teal":2460,"source":"contracts/Constants.ts:22","pc":[3011]},{"teal":2461,"source":"contracts/TownHall.algo.ts:605","pc":[3012]},{"teal":2464,"source":"contracts/TownHall.algo.ts:604","errorMessage":"Invalid method call: Game is not in Night Stage Maffia Commit state.","pc":[3013]},{"teal":2468,"source":"contracts/TownHall.algo.ts:609","pc":[3014,3015]},{"teal":2469,"source":"contracts/TownHall.algo.ts:609","pc":[3016,3017]},{"teal":2470,"source":"contracts/TownHall.algo.ts:609","pc":[3018]},{"teal":2471,"source":"contracts/TownHall.algo.ts:609","pc":[3019]},{"teal":2474,"source":"contracts/TownHall.algo.ts:609","errorMessage":"Error state: Non-mafia player called method.","pc":[3020]},{"teal":2478,"source":"contracts/TownHall.algo.ts:611","pc":[3021,3022]},{"teal":2479,"source":"contracts/TownHall.algo.ts:611","pc":[3023,3024]},{"teal":2480,"source":"contracts/TownHall.algo.ts:611","pc":[3025]},{"teal":2485,"source":"contracts/TownHall.algo.ts:613","pc":[3026,3027]},{"teal":2486,"source":"contracts/TownHall.algo.ts:613","pc":[3028]},{"teal":2487,"source":"contracts/TownHall.algo.ts:613","pc":[3029,3030]},{"teal":2488,"source":"contracts/TownHall.algo.ts:613","pc":[3031]},{"teal":2489,"source":"contracts/TownHall.algo.ts:613","pc":[3032,3033,3034]},{"teal":2494,"source":"contracts/TownHall.algo.ts:615","pc":[3035]},{"teal":2495,"source":"contracts/Constants.ts:24","pc":[3036,3037]},{"teal":2496,"source":"contracts/TownHall.algo.ts:615","pc":[3038]},{"teal":2497,"source":"contracts/TownHall.algo.ts:613","pc":[3039,3040,3041]},{"teal":2502,"source":"contracts/TownHall.algo.ts:617","pc":[3042]},{"teal":2503,"source":"contracts/Constants.ts:23","pc":[3043,3044]},{"teal":2504,"source":"contracts/TownHall.algo.ts:617","pc":[3045]},{"teal":2507,"source":"contracts/TownHall.algo.ts:603","pc":[3046]},{"teal":2512,"source":"contracts/TownHall.algo.ts:621","pc":[3047,3048,3049]},{"teal":2513,"source":"contracts/TownHall.algo.ts:621","pc":[3050,3051,3052]},{"teal":2516,"source":"contracts/TownHall.algo.ts:621","pc":[3053,3054,3055]},{"teal":2517,"source":"contracts/TownHall.algo.ts:621","pc":[3056]},{"teal":2518,"source":"contracts/TownHall.algo.ts:621","pc":[3057]},{"teal":2522,"source":"contracts/TownHall.algo.ts:621","pc":[3058,3059,3060]},{"teal":2529,"source":"contracts/TownHall.algo.ts:623","pc":[3061]},{"teal":2530,"source":"contracts/TownHall.algo.ts:623","pc":[3062]},{"teal":2531,"source":"contracts/Constants.ts:23","pc":[3063,3064]},{"teal":2532,"source":"contracts/TownHall.algo.ts:623","pc":[3065]},{"teal":2535,"source":"contracts/TownHall.algo.ts:622","errorMessage":"Invalid method call: Game is not in Night Stage Doctor Commit state.","pc":[3066]},{"teal":2539,"source":"contracts/TownHall.algo.ts:627","pc":[3067,3068]},{"teal":2540,"source":"contracts/TownHall.algo.ts:627","pc":[3069,3070]},{"teal":2541,"source":"contracts/TownHall.algo.ts:627","pc":[3071]},{"teal":2542,"source":"contracts/TownHall.algo.ts:627","pc":[3072]},{"teal":2545,"source":"contracts/TownHall.algo.ts:627","errorMessage":"Error state: Non-doctor player called method.","pc":[3073]},{"teal":2552,"source":"contracts/TownHall.algo.ts:629","pc":[3074,3075]},{"teal":2553,"source":"contracts/TownHall.algo.ts:629","pc":[3076]},{"teal":2554,"source":"contracts/TownHall.algo.ts:629","pc":[3077,3078]},{"teal":2555,"source":"contracts/TownHall.algo.ts:629","pc":[3079]},{"teal":2558,"source":"contracts/TownHall.algo.ts:628","errorMessage":"Error state: Doctor is dead, should not have entered this state.","pc":[3080]},{"teal":2562,"source":"contracts/TownHall.algo.ts:633","pc":[3081,3082]},{"teal":2563,"source":"contracts/TownHall.algo.ts:633","pc":[3083,3084]},{"teal":2564,"source":"contracts/TownHall.algo.ts:633","pc":[3085]},{"teal":2568,"source":"contracts/TownHall.algo.ts:635","pc":[3086]},{"teal":2569,"source":"contracts/Constants.ts:24","pc":[3087,3088]},{"teal":2570,"source":"contracts/TownHall.algo.ts:635","pc":[3089]},{"teal":2571,"source":"contracts/TownHall.algo.ts:621","pc":[3090]},{"teal":2576,"source":"contracts/TownHall.algo.ts:638","pc":[3091,3092,3093]},{"teal":2577,"source":"contracts/TownHall.algo.ts:638","pc":[3094]},{"teal":2578,"source":"contracts/TownHall.algo.ts:638","pc":[3095]},{"teal":2579,"source":"contracts/TownHall.algo.ts:638","pc":[3096,3097]},{"teal":2580,"source":"contracts/TownHall.algo.ts:638","pc":[3098]},{"teal":2583,"source":"contracts/TownHall.algo.ts:638","errorMessage":"argument 0 (blinder) for dawnStageMafiaReveal must be a byte[32]","pc":[3099]},{"teal":2586,"source":"contracts/TownHall.algo.ts:638","pc":[3100,3101,3102]},{"teal":2587,"source":"contracts/TownHall.algo.ts:638","pc":[3103]},{"teal":2588,"source":"contracts/TownHall.algo.ts:638","pc":[3104]},{"teal":2589,"source":"contracts/TownHall.algo.ts:638","pc":[3105,3106]},{"teal":2590,"source":"contracts/TownHall.algo.ts:638","pc":[3107]},{"teal":2593,"source":"contracts/TownHall.algo.ts:638","errorMessage":"argument 1 (victimAim) for dawnStageMafiaReveal must be a address","pc":[3108]},{"teal":2596,"source":"contracts/TownHall.algo.ts:638","pc":[3109,3110,3111]},{"teal":2597,"source":"contracts/TownHall.algo.ts:638","pc":[3112]},{"teal":2598,"source":"contracts/TownHall.algo.ts:638","pc":[3113]},{"teal":2602,"source":"contracts/TownHall.algo.ts:638","pc":[3114,3115,3116]},{"teal":2605,"source":"contracts/TownHall.algo.ts:638","pc":[3117]},{"teal":2612,"source":"contracts/TownHall.algo.ts:640","pc":[3118]},{"teal":2613,"source":"contracts/TownHall.algo.ts:640","pc":[3119]},{"teal":2614,"source":"contracts/Constants.ts:24","pc":[3120,3121]},{"teal":2615,"source":"contracts/TownHall.algo.ts:640","pc":[3122]},{"teal":2618,"source":"contracts/TownHall.algo.ts:639","errorMessage":"Invalid method call: Game is not in Dawn Stage Maffia Reveal state.","pc":[3123]},{"teal":2622,"source":"contracts/TownHall.algo.ts:644","pc":[3124,3125]},{"teal":2623,"source":"contracts/TownHall.algo.ts:644","pc":[3126,3127]},{"teal":2624,"source":"contracts/TownHall.algo.ts:644","pc":[3128]},{"teal":2625,"source":"contracts/TownHall.algo.ts:644","pc":[3129]},{"teal":2628,"source":"contracts/TownHall.algo.ts:644","errorMessage":"Error state: Non-mafia player called method.","pc":[3130]},{"teal":2632,"source":"contracts/TownHall.algo.ts:646","pc":[3131,3132]},{"teal":2633,"source":"contracts/TownHall.algo.ts:646","pc":[3133,3134]},{"teal":2634,"source":"contracts/TownHall.algo.ts:646","pc":[3135]},{"teal":2637,"source":"contracts/TownHall.algo.ts:646","errorMessage":"Error state: Victim must be a valid address.","pc":[3136]},{"teal":2641,"source":"contracts/TownHall.algo.ts:650","pc":[3137,3138]},{"teal":2642,"source":"contracts/TownHall.algo.ts:650","pc":[3139,3140]},{"teal":2643,"source":"contracts/TownHall.algo.ts:650","pc":[3141]},{"teal":2644,"source":"contracts/TownHall.algo.ts:650","pc":[3142]},{"teal":2645,"source":"contracts/TownHall.algo.ts:650","pc":[3143,3144]},{"teal":2652,"source":"contracts/TownHall.algo.ts:653","pc":[3145,3146]},{"teal":2653,"source":"contracts/TownHall.algo.ts:653","pc":[3147,3148]},{"teal":2654,"source":"contracts/TownHall.algo.ts:653","pc":[3149]},{"teal":2655,"source":"contracts/TownHall.algo.ts:653","pc":[3150]},{"teal":2658,"source":"contracts/TownHall.algo.ts:652","errorMessage":"Error state: Provided address + blinder does NOT match commitment.","pc":[3151]},{"teal":2663,"source":"contracts/TownHall.algo.ts:657","pc":[3152,3153]},{"teal":2664,"source":"contracts/TownHall.algo.ts:657","pc":[3154,3155]},{"teal":2665,"source":"contracts/TownHall.algo.ts:657","pc":[3156]},{"teal":2666,"source":"contracts/TownHall.algo.ts:657","pc":[3157]},{"teal":2667,"source":"contracts/TownHall.algo.ts:657","pc":[3158,3159,3160]},{"teal":2672,"source":"contracts/TownHall.algo.ts:658","pc":[3161]},{"teal":2673,"source":"contracts/TownHall.algo.ts:658","pc":[3162,3163]},{"teal":2674,"source":"contracts/TownHall.algo.ts:658","pc":[3164]},{"teal":2675,"source":"contracts/TownHall.algo.ts:658","pc":[3165]},{"teal":2676,"source":"contracts/TownHall.algo.ts:657","pc":[3166,3167,3168]},{"teal":2681,"source":"contracts/TownHall.algo.ts:659","pc":[3169,3170]},{"teal":2682,"source":"contracts/TownHall.algo.ts:659","pc":[3171,3172]},{"teal":2683,"source":"contracts/TownHall.algo.ts:659","pc":[3173]},{"teal":2684,"source":"contracts/TownHall.algo.ts:659","pc":[3174]},{"teal":2685,"source":"contracts/TownHall.algo.ts:659","pc":[3175,3176,3177]},{"teal":2690,"source":"contracts/TownHall.algo.ts:660","pc":[3178]},{"teal":2691,"source":"contracts/TownHall.algo.ts:660","pc":[3179,3180]},{"teal":2692,"source":"contracts/TownHall.algo.ts:660","pc":[3181]},{"teal":2693,"source":"contracts/TownHall.algo.ts:660","pc":[3182]},{"teal":2694,"source":"contracts/TownHall.algo.ts:659","pc":[3183,3184,3185]},{"teal":2699,"source":"contracts/TownHall.algo.ts:661","pc":[3186,3187]},{"teal":2700,"source":"contracts/TownHall.algo.ts:661","pc":[3188,3189]},{"teal":2701,"source":"contracts/TownHall.algo.ts:661","pc":[3190]},{"teal":2702,"source":"contracts/TownHall.algo.ts:661","pc":[3191]},{"teal":2703,"source":"contracts/TownHall.algo.ts:661","pc":[3192,3193,3194]},{"teal":2708,"source":"contracts/TownHall.algo.ts:662","pc":[3195]},{"teal":2709,"source":"contracts/TownHall.algo.ts:662","pc":[3196,3197]},{"teal":2710,"source":"contracts/TownHall.algo.ts:662","pc":[3198]},{"teal":2711,"source":"contracts/TownHall.algo.ts:662","pc":[3199]},{"teal":2712,"source":"contracts/TownHall.algo.ts:661","pc":[3200,3201,3202]},{"teal":2717,"source":"contracts/TownHall.algo.ts:663","pc":[3203,3204]},{"teal":2718,"source":"contracts/TownHall.algo.ts:663","pc":[3205,3206]},{"teal":2719,"source":"contracts/TownHall.algo.ts:663","pc":[3207]},{"teal":2720,"source":"contracts/TownHall.algo.ts:663","pc":[3208]},{"teal":2721,"source":"contracts/TownHall.algo.ts:663","pc":[3209,3210,3211]},{"teal":2726,"source":"contracts/TownHall.algo.ts:664","pc":[3212]},{"teal":2727,"source":"contracts/TownHall.algo.ts:664","pc":[3213,3214]},{"teal":2728,"source":"contracts/TownHall.algo.ts:664","pc":[3215]},{"teal":2729,"source":"contracts/TownHall.algo.ts:664","pc":[3216]},{"teal":2730,"source":"contracts/TownHall.algo.ts:663","pc":[3217,3218,3219]},{"teal":2735,"source":"contracts/TownHall.algo.ts:665","pc":[3220,3221]},{"teal":2736,"source":"contracts/TownHall.algo.ts:665","pc":[3222,3223]},{"teal":2737,"source":"contracts/TownHall.algo.ts:665","pc":[3224]},{"teal":2738,"source":"contracts/TownHall.algo.ts:665","pc":[3225]},{"teal":2739,"source":"contracts/TownHall.algo.ts:665","pc":[3226,3227,3228]},{"teal":2744,"source":"contracts/TownHall.algo.ts:666","pc":[3229]},{"teal":2745,"source":"contracts/TownHall.algo.ts:666","pc":[3230,3231]},{"teal":2746,"source":"contracts/TownHall.algo.ts:666","pc":[3232]},{"teal":2747,"source":"contracts/TownHall.algo.ts:666","pc":[3233]},{"teal":2748,"source":"contracts/TownHall.algo.ts:665","pc":[3234,3235,3236]},{"teal":2753,"source":"contracts/TownHall.algo.ts:667","pc":[3237,3238]},{"teal":2754,"source":"contracts/TownHall.algo.ts:667","pc":[3239,3240]},{"teal":2755,"source":"contracts/TownHall.algo.ts:667","pc":[3241]},{"teal":2756,"source":"contracts/TownHall.algo.ts:667","pc":[3242]},{"teal":2757,"source":"contracts/TownHall.algo.ts:667","pc":[3243,3244,3245]},{"teal":2762,"source":"contracts/TownHall.algo.ts:668","pc":[3246]},{"teal":2763,"source":"contracts/TownHall.algo.ts:668","pc":[3247,3248]},{"teal":2764,"source":"contracts/TownHall.algo.ts:668","pc":[3249]},{"teal":2765,"source":"contracts/TownHall.algo.ts:668","pc":[3250]},{"teal":2766,"source":"contracts/TownHall.algo.ts:667","pc":[3251,3252,3253]},{"teal":2771,"source":"contracts/TownHall.algo.ts:670","pc":[3254]},{"teal":2772,"source":"contracts/TownHall.algo.ts:670","pc":[3255,3256]},{"teal":2773,"source":"contracts/TownHall.algo.ts:670","pc":[3257]},{"teal":2779,"source":"contracts/TownHall.algo.ts:676","pc":[3258,3259]},{"teal":2780,"source":"contracts/TownHall.algo.ts:676","pc":[3260]},{"teal":2781,"source":"contracts/TownHall.algo.ts:676","pc":[3261,3262]},{"teal":2782,"source":"contracts/TownHall.algo.ts:676","pc":[3263]},{"teal":2783,"source":"contracts/TownHall.algo.ts:676","pc":[3264,3265,3266]},{"teal":2788,"source":"contracts/TownHall.algo.ts:678","pc":[3267]},{"teal":2789,"source":"contracts/Constants.ts:26","pc":[3268,3269]},{"teal":2790,"source":"contracts/TownHall.algo.ts:678","pc":[3270]},{"teal":2791,"source":"contracts/TownHall.algo.ts:676","pc":[3271,3272,3273]},{"teal":2796,"source":"contracts/TownHall.algo.ts:681","pc":[3274]},{"teal":2797,"source":"contracts/Constants.ts:25","pc":[3275,3276]},{"teal":2798,"source":"contracts/TownHall.algo.ts:681","pc":[3277]},{"teal":2801,"source":"contracts/TownHall.algo.ts:638","pc":[3278]},{"teal":2806,"source":"contracts/TownHall.algo.ts:685","pc":[3279,3280,3281]},{"teal":2807,"source":"contracts/TownHall.algo.ts:685","pc":[3282]},{"teal":2808,"source":"contracts/TownHall.algo.ts:685","pc":[3283]},{"teal":2809,"source":"contracts/TownHall.algo.ts:685","pc":[3284,3285]},{"teal":2810,"source":"contracts/TownHall.algo.ts:685","pc":[3286]},{"teal":2813,"source":"contracts/TownHall.algo.ts:685","errorMessage":"argument 0 (blinder) for dawnStageDoctorReveal must be a byte[32]","pc":[3287]},{"teal":2816,"source":"contracts/TownHall.algo.ts:685","pc":[3288,3289,3290]},{"teal":2817,"source":"contracts/TownHall.algo.ts:685","pc":[3291]},{"teal":2818,"source":"contracts/TownHall.algo.ts:685","pc":[3292]},{"teal":2819,"source":"contracts/TownHall.algo.ts:685","pc":[3293,3294]},{"teal":2820,"source":"contracts/TownHall.algo.ts:685","pc":[3295]},{"teal":2823,"source":"contracts/TownHall.algo.ts:685","errorMessage":"argument 1 (patientAim) for dawnStageDoctorReveal must be a address","pc":[3296]},{"teal":2826,"source":"contracts/TownHall.algo.ts:685","pc":[3297,3298,3299]},{"teal":2827,"source":"contracts/TownHall.algo.ts:685","pc":[3300]},{"teal":2828,"source":"contracts/TownHall.algo.ts:685","pc":[3301]},{"teal":2832,"source":"contracts/TownHall.algo.ts:685","pc":[3302,3303,3304]},{"teal":2835,"source":"contracts/TownHall.algo.ts:685","pc":[3305]},{"teal":2842,"source":"contracts/TownHall.algo.ts:687","pc":[3306]},{"teal":2843,"source":"contracts/TownHall.algo.ts:687","pc":[3307]},{"teal":2844,"source":"contracts/Constants.ts:25","pc":[3308,3309]},{"teal":2845,"source":"contracts/TownHall.algo.ts:687","pc":[3310]},{"teal":2848,"source":"contracts/TownHall.algo.ts:686","errorMessage":"Invalid method call: Game is not in Dawn Stage Doctor Reveal state.","pc":[3311]},{"teal":2852,"source":"contracts/TownHall.algo.ts:691","pc":[3312,3313]},{"teal":2853,"source":"contracts/TownHall.algo.ts:691","pc":[3314,3315]},{"teal":2854,"source":"contracts/TownHall.algo.ts:691","pc":[3316]},{"teal":2855,"source":"contracts/TownHall.algo.ts:691","pc":[3317]},{"teal":2858,"source":"contracts/TownHall.algo.ts:691","errorMessage":"Error state: Non-doctor player called method.","pc":[3318]},{"teal":2862,"source":"contracts/TownHall.algo.ts:693","pc":[3319,3320]},{"teal":2863,"source":"contracts/TownHall.algo.ts:693","pc":[3321]},{"teal":2864,"source":"contracts/TownHall.algo.ts:693","pc":[3322,3323]},{"teal":2865,"source":"contracts/TownHall.algo.ts:693","pc":[3324]},{"teal":2868,"source":"contracts/TownHall.algo.ts:693","errorMessage":"Error state: Doctor has already committed to a patient.","pc":[3325]},{"teal":2872,"source":"contracts/TownHall.algo.ts:695","pc":[3326,3327]},{"teal":2873,"source":"contracts/TownHall.algo.ts:695","pc":[3328,3329]},{"teal":2874,"source":"contracts/TownHall.algo.ts:695","pc":[3330]},{"teal":2877,"source":"contracts/TownHall.algo.ts:695","errorMessage":"Error state: Patient must be a valid address.","pc":[3331]},{"teal":2881,"source":"contracts/TownHall.algo.ts:699","pc":[3332,3333]},{"teal":2882,"source":"contracts/TownHall.algo.ts:699","pc":[3334,3335]},{"teal":2883,"source":"contracts/TownHall.algo.ts:699","pc":[3336]},{"teal":2884,"source":"contracts/TownHall.algo.ts:699","pc":[3337]},{"teal":2885,"source":"contracts/TownHall.algo.ts:699","pc":[3338,3339]},{"teal":2892,"source":"contracts/TownHall.algo.ts:702","pc":[3340,3341]},{"teal":2893,"source":"contracts/TownHall.algo.ts:702","pc":[3342,3343]},{"teal":2894,"source":"contracts/TownHall.algo.ts:702","pc":[3344]},{"teal":2895,"source":"contracts/TownHall.algo.ts:702","pc":[3345]},{"teal":2898,"source":"contracts/TownHall.algo.ts:701","errorMessage":"Error state: Provided address + blinder does NOT match commitment.","pc":[3346]},{"teal":2903,"source":"contracts/TownHall.algo.ts:706","pc":[3347,3348]},{"teal":2904,"source":"contracts/TownHall.algo.ts:706","pc":[3349,3350]},{"teal":2905,"source":"contracts/TownHall.algo.ts:706","pc":[3351]},{"teal":2906,"source":"contracts/TownHall.algo.ts:706","pc":[3352]},{"teal":2907,"source":"contracts/TownHall.algo.ts:706","pc":[3353,3354,3355]},{"teal":2912,"source":"contracts/TownHall.algo.ts:707","pc":[3356,3357]},{"teal":2913,"source":"contracts/TownHall.algo.ts:707","pc":[3358,3359]},{"teal":2914,"source":"contracts/TownHall.algo.ts:707","pc":[3360]},{"teal":2915,"source":"contracts/TownHall.algo.ts:707","pc":[3361]},{"teal":2916,"source":"contracts/TownHall.algo.ts:706","pc":[3362,3363,3364]},{"teal":2921,"source":"contracts/TownHall.algo.ts:708","pc":[3365,3366]},{"teal":2922,"source":"contracts/TownHall.algo.ts:708","pc":[3367,3368]},{"teal":2923,"source":"contracts/TownHall.algo.ts:708","pc":[3369]},{"teal":2924,"source":"contracts/TownHall.algo.ts:708","pc":[3370]},{"teal":2925,"source":"contracts/TownHall.algo.ts:708","pc":[3371,3372,3373]},{"teal":2930,"source":"contracts/TownHall.algo.ts:709","pc":[3374,3375]},{"teal":2931,"source":"contracts/TownHall.algo.ts:709","pc":[3376,3377]},{"teal":2932,"source":"contracts/TownHall.algo.ts:709","pc":[3378]},{"teal":2933,"source":"contracts/TownHall.algo.ts:709","pc":[3379]},{"teal":2934,"source":"contracts/TownHall.algo.ts:708","pc":[3380,3381,3382]},{"teal":2939,"source":"contracts/TownHall.algo.ts:710","pc":[3383,3384]},{"teal":2940,"source":"contracts/TownHall.algo.ts:710","pc":[3385,3386]},{"teal":2941,"source":"contracts/TownHall.algo.ts:710","pc":[3387]},{"teal":2942,"source":"contracts/TownHall.algo.ts:710","pc":[3388]},{"teal":2943,"source":"contracts/TownHall.algo.ts:710","pc":[3389,3390,3391]},{"teal":2948,"source":"contracts/TownHall.algo.ts:711","pc":[3392,3393]},{"teal":2949,"source":"contracts/TownHall.algo.ts:711","pc":[3394,3395]},{"teal":2950,"source":"contracts/TownHall.algo.ts:711","pc":[3396]},{"teal":2951,"source":"contracts/TownHall.algo.ts:711","pc":[3397]},{"teal":2952,"source":"contracts/TownHall.algo.ts:710","pc":[3398,3399,3400]},{"teal":2957,"source":"contracts/TownHall.algo.ts:712","pc":[3401,3402]},{"teal":2958,"source":"contracts/TownHall.algo.ts:712","pc":[3403,3404]},{"teal":2959,"source":"contracts/TownHall.algo.ts:712","pc":[3405]},{"teal":2960,"source":"contracts/TownHall.algo.ts:712","pc":[3406]},{"teal":2961,"source":"contracts/TownHall.algo.ts:712","pc":[3407,3408,3409]},{"teal":2966,"source":"contracts/TownHall.algo.ts:713","pc":[3410,3411]},{"teal":2967,"source":"contracts/TownHall.algo.ts:713","pc":[3412,3413]},{"teal":2968,"source":"contracts/TownHall.algo.ts:713","pc":[3414]},{"teal":2969,"source":"contracts/TownHall.algo.ts:713","pc":[3415]},{"teal":2970,"source":"contracts/TownHall.algo.ts:712","pc":[3416,3417,3418]},{"teal":2975,"source":"contracts/TownHall.algo.ts:714","pc":[3419,3420]},{"teal":2976,"source":"contracts/TownHall.algo.ts:714","pc":[3421,3422]},{"teal":2977,"source":"contracts/TownHall.algo.ts:714","pc":[3423]},{"teal":2978,"source":"contracts/TownHall.algo.ts:714","pc":[3424]},{"teal":2979,"source":"contracts/TownHall.algo.ts:714","pc":[3425,3426,3427]},{"teal":2984,"source":"contracts/TownHall.algo.ts:715","pc":[3428,3429]},{"teal":2985,"source":"contracts/TownHall.algo.ts:715","pc":[3430,3431]},{"teal":2986,"source":"contracts/TownHall.algo.ts:715","pc":[3432]},{"teal":2987,"source":"contracts/TownHall.algo.ts:715","pc":[3433]},{"teal":2988,"source":"contracts/TownHall.algo.ts:714","pc":[3434,3435,3436]},{"teal":2993,"source":"contracts/TownHall.algo.ts:716","pc":[3437,3438]},{"teal":2994,"source":"contracts/TownHall.algo.ts:716","pc":[3439,3440]},{"teal":2995,"source":"contracts/TownHall.algo.ts:716","pc":[3441]},{"teal":2996,"source":"contracts/TownHall.algo.ts:716","pc":[3442]},{"teal":2997,"source":"contracts/TownHall.algo.ts:716","pc":[3443,3444,3445]},{"teal":3002,"source":"contracts/TownHall.algo.ts:717","pc":[3446,3447]},{"teal":3003,"source":"contracts/TownHall.algo.ts:717","pc":[3448,3449]},{"teal":3004,"source":"contracts/TownHall.algo.ts:717","pc":[3450]},{"teal":3005,"source":"contracts/TownHall.algo.ts:717","pc":[3451]},{"teal":3006,"source":"contracts/TownHall.algo.ts:716","pc":[3452,3453,3454]},{"teal":3011,"source":"contracts/TownHall.algo.ts:719","pc":[3455,3456]},{"teal":3012,"source":"contracts/TownHall.algo.ts:719","pc":[3457,3458]},{"teal":3013,"source":"contracts/TownHall.algo.ts:719","pc":[3459]},{"teal":3018,"source":"contracts/TownHall.algo.ts:725","pc":[3460]},{"teal":3019,"source":"contracts/Constants.ts:26","pc":[3461,3462]},{"teal":3020,"source":"contracts/TownHall.algo.ts:725","pc":[3463]},{"teal":3021,"source":"contracts/TownHall.algo.ts:685","pc":[3464]},{"teal":3026,"source":"contracts/TownHall.algo.ts:728","pc":[3465,3466,3467]},{"teal":3027,"source":"contracts/TownHall.algo.ts:728","pc":[3468]},{"teal":3028,"source":"contracts/TownHall.algo.ts:728","pc":[3469]},{"teal":3032,"source":"contracts/TownHall.algo.ts:728","pc":[3470,3471,3472]},{"teal":3039,"source":"contracts/TownHall.algo.ts:730","pc":[3473]},{"teal":3040,"source":"contracts/TownHall.algo.ts:730","pc":[3474]},{"teal":3041,"source":"contracts/Constants.ts:26","pc":[3475,3476]},{"teal":3042,"source":"contracts/TownHall.algo.ts:730","pc":[3477]},{"teal":3045,"source":"contracts/TownHall.algo.ts:729","errorMessage":"Invalid method call: Game is not in Dawn Stage DeadOrSaved? state.","pc":[3478]},{"teal":3050,"source":"contracts/TownHall.algo.ts:734","pc":[3479]},{"teal":3051,"source":"contracts/TownHall.algo.ts:734","pc":[3480]},{"teal":3052,"source":"contracts/TownHall.algo.ts:734","pc":[3481,3482]},{"teal":3053,"source":"contracts/TownHall.algo.ts:734","pc":[3483]},{"teal":3054,"source":"contracts/TownHall.algo.ts:734","pc":[3484]},{"teal":3055,"source":"contracts/TownHall.algo.ts:734","pc":[3485,3486,3487]},{"teal":3056,"source":"contracts/TownHall.algo.ts:734","pc":[3488]},{"teal":3057,"source":"contracts/TownHall.algo.ts:734","pc":[3489]},{"teal":3058,"source":"contracts/TownHall.algo.ts:734","pc":[3490,3491]},{"teal":3059,"source":"contracts/TownHall.algo.ts:734","pc":[3492]},{"teal":3060,"source":"contracts/TownHall.algo.ts:734","pc":[3493]},{"teal":3061,"source":"contracts/TownHall.algo.ts:734","pc":[3494]},{"teal":3064,"source":"contracts/TownHall.algo.ts:734","pc":[3495,3496,3497]},{"teal":3069,"source":"contracts/TownHall.algo.ts:739","pc":[3498]},{"teal":3070,"source":"contracts/TownHall.algo.ts:739","pc":[3499,3500]},{"teal":3071,"source":"contracts/TownHall.algo.ts:739","pc":[3501]},{"teal":3075,"source":"contracts/TownHall.algo.ts:740","pc":[3502,3503]},{"teal":3076,"source":"contracts/TownHall.algo.ts:740","pc":[3504,3505]},{"teal":3077,"source":"contracts/TownHall.algo.ts:740","pc":[3506]},{"teal":3081,"source":"contracts/TownHall.algo.ts:741","pc":[3507]},{"teal":3082,"source":"contracts/Constants.ts:19","pc":[3508,3509]},{"teal":3083,"source":"contracts/TownHall.algo.ts:741","pc":[3510]},{"teal":3087,"source":"contracts/TownHall.algo.ts:742","pc":[3511]},{"teal":3093,"source":"contracts/TownHall.algo.ts:747","pc":[3512]},{"teal":3094,"source":"contracts/TownHall.algo.ts:747","pc":[3513]},{"teal":3095,"source":"contracts/TownHall.algo.ts:747","pc":[3514,3515]},{"teal":3096,"source":"contracts/TownHall.algo.ts:747","pc":[3516]},{"teal":3097,"source":"contracts/TownHall.algo.ts:747","pc":[3517]},{"teal":3098,"source":"contracts/TownHall.algo.ts:747","pc":[3518,3519,3520]},{"teal":3103,"source":"contracts/TownHall.algo.ts:748","pc":[3521]},{"teal":3104,"source":"contracts/TownHall.algo.ts:748","pc":[3522,3523]},{"teal":3105,"source":"contracts/TownHall.algo.ts:748","pc":[3524]},{"teal":3106,"source":"contracts/TownHall.algo.ts:748","pc":[3525]},{"teal":3110,"source":"contracts/TownHall.algo.ts:749","pc":[3526,3527]},{"teal":3111,"source":"contracts/TownHall.algo.ts:749","pc":[3528,3529]},{"teal":3112,"source":"contracts/TownHall.algo.ts:749","pc":[3530]},{"teal":3113,"source":"contracts/TownHall.algo.ts:747","pc":[3531,3532,3533]},{"teal":3118,"source":"contracts/TownHall.algo.ts:750","pc":[3534]},{"teal":3119,"source":"contracts/TownHall.algo.ts:750","pc":[3535]},{"teal":3120,"source":"contracts/TownHall.algo.ts:750","pc":[3536,3537]},{"teal":3121,"source":"contracts/TownHall.algo.ts:750","pc":[3538]},{"teal":3122,"source":"contracts/TownHall.algo.ts:750","pc":[3539]},{"teal":3123,"source":"contracts/TownHall.algo.ts:750","pc":[3540,3541,3542]},{"teal":3128,"source":"contracts/TownHall.algo.ts:751","pc":[3543]},{"teal":3129,"source":"contracts/TownHall.algo.ts:751","pc":[3544,3545]},{"teal":3130,"source":"contracts/TownHall.algo.ts:751","pc":[3546]},{"teal":3131,"source":"contracts/TownHall.algo.ts:751","pc":[3547]},{"teal":3135,"source":"contracts/TownHall.algo.ts:752","pc":[3548,3549]},{"teal":3136,"source":"contracts/TownHall.algo.ts:752","pc":[3550,3551]},{"teal":3137,"source":"contracts/TownHall.algo.ts:752","pc":[3552]},{"teal":3138,"source":"contracts/TownHall.algo.ts:750","pc":[3553,3554,3555]},{"teal":3143,"source":"contracts/TownHall.algo.ts:753","pc":[3556]},{"teal":3144,"source":"contracts/TownHall.algo.ts:753","pc":[3557]},{"teal":3145,"source":"contracts/TownHall.algo.ts:753","pc":[3558,3559]},{"teal":3146,"source":"contracts/TownHall.algo.ts:753","pc":[3560]},{"teal":3147,"source":"contracts/TownHall.algo.ts:753","pc":[3561]},{"teal":3148,"source":"contracts/TownHall.algo.ts:753","pc":[3562,3563,3564]},{"teal":3153,"source":"contracts/TownHall.algo.ts:754","pc":[3565]},{"teal":3154,"source":"contracts/TownHall.algo.ts:754","pc":[3566,3567]},{"teal":3155,"source":"contracts/TownHall.algo.ts:754","pc":[3568]},{"teal":3156,"source":"contracts/TownHall.algo.ts:754","pc":[3569]},{"teal":3160,"source":"contracts/TownHall.algo.ts:755","pc":[3570,3571]},{"teal":3161,"source":"contracts/TownHall.algo.ts:755","pc":[3572,3573]},{"teal":3162,"source":"contracts/TownHall.algo.ts:755","pc":[3574]},{"teal":3163,"source":"contracts/TownHall.algo.ts:753","pc":[3575,3576,3577]},{"teal":3168,"source":"contracts/TownHall.algo.ts:756","pc":[3578]},{"teal":3169,"source":"contracts/TownHall.algo.ts:756","pc":[3579]},{"teal":3170,"source":"contracts/TownHall.algo.ts:756","pc":[3580,3581]},{"teal":3171,"source":"contracts/TownHall.algo.ts:756","pc":[3582]},{"teal":3172,"source":"contracts/TownHall.algo.ts:756","pc":[3583]},{"teal":3173,"source":"contracts/TownHall.algo.ts:756","pc":[3584,3585,3586]},{"teal":3178,"source":"contracts/TownHall.algo.ts:757","pc":[3587]},{"teal":3179,"source":"contracts/TownHall.algo.ts:757","pc":[3588,3589]},{"teal":3180,"source":"contracts/TownHall.algo.ts:757","pc":[3590]},{"teal":3181,"source":"contracts/TownHall.algo.ts:757","pc":[3591]},{"teal":3185,"source":"contracts/TownHall.algo.ts:758","pc":[3592,3593]},{"teal":3186,"source":"contracts/TownHall.algo.ts:758","pc":[3594,3595]},{"teal":3187,"source":"contracts/TownHall.algo.ts:758","pc":[3596]},{"teal":3188,"source":"contracts/TownHall.algo.ts:756","pc":[3597,3598,3599]},{"teal":3193,"source":"contracts/TownHall.algo.ts:759","pc":[3600]},{"teal":3194,"source":"contracts/TownHall.algo.ts:759","pc":[3601]},{"teal":3195,"source":"contracts/TownHall.algo.ts:759","pc":[3602,3603]},{"teal":3196,"source":"contracts/TownHall.algo.ts:759","pc":[3604]},{"teal":3197,"source":"contracts/TownHall.algo.ts:759","pc":[3605]},{"teal":3198,"source":"contracts/TownHall.algo.ts:759","pc":[3606,3607,3608]},{"teal":3203,"source":"contracts/TownHall.algo.ts:760","pc":[3609]},{"teal":3204,"source":"contracts/TownHall.algo.ts:760","pc":[3610,3611]},{"teal":3205,"source":"contracts/TownHall.algo.ts:760","pc":[3612]},{"teal":3206,"source":"contracts/TownHall.algo.ts:760","pc":[3613]},{"teal":3210,"source":"contracts/TownHall.algo.ts:761","pc":[3614,3615]},{"teal":3211,"source":"contracts/TownHall.algo.ts:761","pc":[3616,3617]},{"teal":3212,"source":"contracts/TownHall.algo.ts:761","pc":[3618]},{"teal":3213,"source":"contracts/TownHall.algo.ts:759","pc":[3619,3620,3621]},{"teal":3218,"source":"contracts/TownHall.algo.ts:762","pc":[3622]},{"teal":3219,"source":"contracts/TownHall.algo.ts:762","pc":[3623]},{"teal":3220,"source":"contracts/TownHall.algo.ts:762","pc":[3624,3625]},{"teal":3221,"source":"contracts/TownHall.algo.ts:762","pc":[3626]},{"teal":3222,"source":"contracts/TownHall.algo.ts:762","pc":[3627]},{"teal":3223,"source":"contracts/TownHall.algo.ts:762","pc":[3628,3629,3630]},{"teal":3228,"source":"contracts/TownHall.algo.ts:763","pc":[3631]},{"teal":3229,"source":"contracts/TownHall.algo.ts:763","pc":[3632,3633]},{"teal":3230,"source":"contracts/TownHall.algo.ts:763","pc":[3634]},{"teal":3231,"source":"contracts/TownHall.algo.ts:763","pc":[3635]},{"teal":3235,"source":"contracts/TownHall.algo.ts:764","pc":[3636,3637]},{"teal":3236,"source":"contracts/TownHall.algo.ts:764","pc":[3638,3639]},{"teal":3237,"source":"contracts/TownHall.algo.ts:764","pc":[3640]},{"teal":3238,"source":"contracts/TownHall.algo.ts:762","pc":[3641,3642,3643]},{"teal":3242,"source":"contracts/TownHall.algo.ts:766","errorMessage":"Error state: Victim must be a player! Should not have entered this state.","pc":[3644]},{"teal":3247,"source":"contracts/TownHall.algo.ts:769","pc":[3645,3646]},{"teal":3248,"source":"contracts/TownHall.algo.ts:769","pc":[3647]},{"teal":3249,"source":"contracts/TownHall.algo.ts:769","pc":[3648]},{"teal":3250,"source":"contracts/TownHall.algo.ts:769","pc":[3649]},{"teal":3251,"source":"contracts/TownHall.algo.ts:769","pc":[3650,3651]},{"teal":3252,"source":"contracts/TownHall.algo.ts:769","pc":[3652]},{"teal":3253,"source":"contracts/TownHall.algo.ts:769","pc":[3653]},{"teal":3257,"source":"contracts/TownHall.algo.ts:771","pc":[3654]},{"teal":3258,"source":"contracts/TownHall.algo.ts:771","pc":[3655,3656]},{"teal":3259,"source":"contracts/TownHall.algo.ts:771","pc":[3657]},{"teal":3263,"source":"contracts/TownHall.algo.ts:772","pc":[3658,3659]},{"teal":3264,"source":"contracts/TownHall.algo.ts:772","pc":[3660,3661]},{"teal":3265,"source":"contracts/TownHall.algo.ts:772","pc":[3662]},{"teal":3270,"source":"contracts/TownHall.algo.ts:774","pc":[3663,3664]},{"teal":3271,"source":"contracts/TownHall.algo.ts:774","pc":[3665]},{"teal":3272,"source":"contracts/TownHall.algo.ts:774","pc":[3666]},{"teal":3273,"source":"contracts/TownHall.algo.ts:774","pc":[3667]},{"teal":3274,"source":"contracts/TownHall.algo.ts:774","pc":[3668,3669,3670]},{"teal":3279,"source":"contracts/TownHall.algo.ts:777","pc":[3671]},{"teal":3280,"source":"contracts/Constants.ts:28","pc":[3672,3673]},{"teal":3281,"source":"contracts/TownHall.algo.ts:777","pc":[3674]},{"teal":3285,"source":"contracts/TownHall.algo.ts:778","pc":[3675]},{"teal":3290,"source":"contracts/TownHall.algo.ts:781","pc":[3676]},{"teal":3291,"source":"contracts/Constants.ts:27","pc":[3677,3678]},{"teal":3292,"source":"contracts/TownHall.algo.ts:781","pc":[3679]},{"teal":3293,"source":"contracts/TownHall.algo.ts:728","pc":[3680]},{"teal":3298,"source":"contracts/TownHall.algo.ts:784","pc":[3681,3682,3683]},{"teal":3299,"source":"contracts/TownHall.algo.ts:784","pc":[3684,3685,3686]},{"teal":3302,"source":"contracts/TownHall.algo.ts:784","pc":[3687,3688,3689]},{"teal":3303,"source":"contracts/TownHall.algo.ts:784","pc":[3690]},{"teal":3304,"source":"contracts/TownHall.algo.ts:784","pc":[3691]},{"teal":3308,"source":"contracts/TownHall.algo.ts:784","pc":[3692,3693,3694]},{"teal":3311,"source":"contracts/TownHall.algo.ts:784","pc":[3695]},{"teal":3312,"source":"contracts/TownHall.algo.ts:784","pc":[3696,3697]},{"teal":3319,"source":"contracts/TownHall.algo.ts:791","pc":[3698]},{"teal":3320,"source":"contracts/TownHall.algo.ts:791","pc":[3699]},{"teal":3321,"source":"contracts/Constants.ts:27","pc":[3700,3701]},{"teal":3322,"source":"contracts/TownHall.algo.ts:791","pc":[3702]},{"teal":3325,"source":"contracts/TownHall.algo.ts:790","errorMessage":"Invalid method call: Game is not in Dawn Stage Unmasking state.","pc":[3703]},{"teal":3329,"source":"contracts/TownHall.algo.ts:795","pc":[3704]},{"teal":3330,"source":"contracts/TownHall.algo.ts:795","pc":[3705]},{"teal":3331,"source":"contracts/TownHall.algo.ts:795","pc":[3706,3707]},{"teal":3332,"source":"contracts/TownHall.algo.ts:795","pc":[3708]},{"teal":3335,"source":"contracts/TownHall.algo.ts:795","errorMessage":"Error state: Other player called method.","pc":[3709]},{"teal":3339,"source":"contracts/TownHall.algo.ts:798","pc":[3710,3711]},{"teal":3340,"source":"contracts/TownHall.algo.ts:798","pc":[3712,3713]},{"teal":3341,"source":"contracts/TownHall.algo.ts:798","pc":[3714,3715]},{"teal":3342,"source":"contracts/TownHall.algo.ts:798","pc":[3716,3717]},{"teal":3346,"source":"contracts/TownHall.algo.ts:799","pc":[3718,3719]},{"teal":3347,"source":"contracts/TownHall.algo.ts:799","pc":[3720,3721,3722]},{"teal":3348,"source":"contracts/TownHall.algo.ts:799","pc":[3723,3724]},{"teal":3352,"source":"contracts/TownHall.algo.ts:800","pc":[3725,3726]},{"teal":3353,"source":"contracts/TownHall.algo.ts:800","pc":[3727,3728]},{"teal":3354,"source":"contracts/TownHall.algo.ts:800","pc":[3729,3730]},{"teal":3355,"source":"contracts/TownHall.algo.ts:800","pc":[3731,3732]},{"teal":3360,"source":"contracts/TownHall.algo.ts:802","pc":[3733,3734]},{"teal":3361,"source":"contracts/TownHall.algo.ts:802","pc":[3735,3736]},{"teal":3362,"source":"contracts/TownHall.algo.ts:802","pc":[3737]},{"teal":3363,"source":"contracts/TownHall.algo.ts:802","pc":[3738]},{"teal":3364,"source":"contracts/TownHall.algo.ts:802","pc":[3739,3740,3741]},{"teal":3369,"source":"contracts/TownHall.algo.ts:806","pc":[3742]},{"teal":3370,"source":"contracts/Constants.ts:28","pc":[3743,3744]},{"teal":3371,"source":"contracts/TownHall.algo.ts:806","pc":[3745]},{"teal":3375,"source":"contracts/TownHall.algo.ts:807","pc":[3746,3747]},{"teal":3376,"source":"contracts/TownHall.algo.ts:807","pc":[3748,3749]},{"teal":3377,"source":"contracts/TownHall.algo.ts:807","pc":[3750]},{"teal":3381,"source":"contracts/TownHall.algo.ts:808","pc":[3751]},{"teal":3387,"source":"contracts/TownHall.algo.ts:811","pc":[3752,3753]},{"teal":3388,"source":"contracts/TownHall.algo.ts:811","pc":[3754,3755]},{"teal":3389,"source":"contracts/TownHall.algo.ts:811","pc":[3756]},{"teal":3390,"source":"contracts/TownHall.algo.ts:811","pc":[3757]},{"teal":3391,"source":"contracts/TownHall.algo.ts:811","pc":[3758,3759,3760]},{"teal":3396,"source":"contracts/TownHall.algo.ts:813","pc":[3761,3762]},{"teal":3397,"source":"contracts/TownHall.algo.ts:813","pc":[3763,3764]},{"teal":3398,"source":"contracts/TownHall.algo.ts:813","pc":[3765]},{"teal":3403,"source":"contracts/TownHall.algo.ts:817","pc":[3766]},{"teal":3404,"source":"contracts/TownHall.algo.ts:817","pc":[3767,3768]},{"teal":3405,"source":"contracts/TownHall.algo.ts:817","pc":[3769]},{"teal":3409,"source":"contracts/TownHall.algo.ts:819","pc":[3770]},{"teal":3410,"source":"contracts/Constants.ts:19","pc":[3771,3772]},{"teal":3411,"source":"contracts/TownHall.algo.ts:819","pc":[3773]},{"teal":3412,"source":"contracts/TownHall.algo.ts:784","pc":[3774]},{"teal":3417,"source":"contracts/TownHall.algo.ts:822","pc":[3775,3776,3777]},{"teal":3418,"source":"contracts/TownHall.algo.ts:822","pc":[3778]},{"teal":3419,"source":"contracts/TownHall.algo.ts:822","pc":[3779]},{"teal":3423,"source":"contracts/TownHall.algo.ts:822","pc":[3780,3781,3782]},{"teal":3427,"source":"contracts/TownHall.algo.ts:823","pc":[3783]},{"teal":3428,"source":"contracts/TownHall.algo.ts:823","pc":[3784]},{"teal":3429,"source":"contracts/Constants.ts:28","pc":[3785,3786]},{"teal":3430,"source":"contracts/TownHall.algo.ts:823","pc":[3787]},{"teal":3433,"source":"contracts/TownHall.algo.ts:823","errorMessage":"Invalid method call: Game is not in Game Over state.","pc":[3788]},{"teal":3434,"source":"contracts/TownHall.algo.ts:822","pc":[3789]},{"teal":3437,"source":"contracts/TownHall.algo.ts:32","pc":[3790,3791,3792,3793,3794,3795]},{"teal":3438,"source":"contracts/TownHall.algo.ts:32","pc":[3796,3797,3798]},{"teal":3439,"source":"contracts/TownHall.algo.ts:32","pc":[3799,3800,3801,3802]},{"teal":3442,"source":"contracts/TownHall.algo.ts:32","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[3803]},{"teal":3445,"source":"contracts/TownHall.algo.ts:32","pc":[3804,3805,3806,3807,3808,3809]},{"teal":3446,"source":"contracts/TownHall.algo.ts:32","pc":[3810,3811,3812,3813,3814,3815]},{"teal":3447,"source":"contracts/TownHall.algo.ts:32","pc":[3816,3817,3818,3819,3820,3821]},{"teal":3448,"source":"contracts/TownHall.algo.ts:32","pc":[3822,3823,3824,3825,3826,3827]},{"teal":3449,"source":"contracts/TownHall.algo.ts:32","pc":[3828,3829,3830,3831,3832,3833]},{"teal":3450,"source":"contracts/TownHall.algo.ts:32","pc":[3834,3835,3836,3837,3838,3839]},{"teal":3451,"source":"contracts/TownHall.algo.ts:32","pc":[3840,3841,3842,3843,3844,3845]},{"teal":3452,"source":"contracts/TownHall.algo.ts:32","pc":[3846,3847,3848,3849,3850,3851]},{"teal":3453,"source":"contracts/TownHall.algo.ts:32","pc":[3852,3853,3854,3855,3856,3857]},{"teal":3454,"source":"contracts/TownHall.algo.ts:32","pc":[3858,3859,3860,3861,3862,3863]},{"teal":3455,"source":"contracts/TownHall.algo.ts:32","pc":[3864,3865,3866,3867,3868,3869]},{"teal":3456,"source":"contracts/TownHall.algo.ts:32","pc":[3870,3871,3872,3873,3874,3875]},{"teal":3457,"source":"contracts/TownHall.algo.ts:32","pc":[3876,3877,3878,3879,3880,3881]},{"teal":3458,"source":"contracts/TownHall.algo.ts:32","pc":[3882,3883,3884,3885,3886,3887]},{"teal":3459,"source":"contracts/TownHall.algo.ts:32","pc":[3888,3889,3890,3891,3892,3893]},{"teal":3460,"source":"contracts/TownHall.algo.ts:32","pc":[3894,3895,3896,3897,3898,3899]},{"teal":3461,"source":"contracts/TownHall.algo.ts:32","pc":[3900,3901,3902,3903,3904,3905]},{"teal":3462,"source":"contracts/TownHall.algo.ts:32","pc":[3906,3907,3908]},{"teal":3463,"source":"contracts/TownHall.algo.ts:32","pc":[3909,3910,3911,3912,3913,3914,3915,3916,3917,3918,3919,3920,3921,3922,3923,3924,3925,3926,3927,3928,3929,3930,3931,3932,3933,3934,3935,3936,3937,3938,3939,3940,3941,3942,3943,3944]},{"teal":3466,"source":"contracts/TownHall.algo.ts:32","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[3945]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAQAQACBgMgDAQFBwgKYPCTCQkLJigJZ2FtZVN0YXRlFGp1c3RFbGltaW5hdGVkUGxheWVyAAttYWZpYVZpY3RpbQ9wbGF5ZXIxQWxnb0FkZHIPcGxheWVyMkFsZ29BZGRyD3BsYXllcjNBbGdvQWRkcg9wbGF5ZXI0QWxnb0FkZHIPcGxheWVyNUFsZ29BZGRyD3BsYXllcjZBbGdvQWRkcg1kb2N0b3JQYXRpZW50BmRvY3RvcgxwbGF5ZXJzQWxpdmUUcGxheWVyMVJlY2VpdmVkVm90ZXMUcGxheWVyMlJlY2VpdmVkVm90ZXMUcGxheWVyM1JlY2VpdmVkVm90ZXMUcGxheWVyNFJlY2VpdmVkVm90ZXMUcGxheWVyNVJlY2VpdmVkVm90ZXMUcGxheWVyNlJlY2VpdmVkVm90ZXMIAAAAAAAAAAAFbWFmaWERbHNpZ0Z1bmRlckFkZHJlc3MMcGxheWVyc1ZvdGVkDXBsYXllcnNKb2luZWQPcGxheWVyMUhhc1ZvdGVkD3BsYXllcjJIYXNWb3RlZA9wbGF5ZXIzSGFzVm90ZWQPcGxheWVyNEhhc1ZvdGVkD3BsYXllcjVIYXNWb3RlZA9wbGF5ZXI2SGFzVm90ZWQEFR98dQ5kb2N0b3JLZXlJbWFnZQ1tYWZpYUtleUltYWdlB2J1dGNoZXIHaW5ua2VlcAZmYXJtZXIGZ3JvY2VyYBfx06cxl9eUJpVjjE+prA/DaIxPl3S5BaFOOj8XG6xYbFXoP/l6Gu/7OvAK2yLGuwiz9IHjqqDxoJ4w7XQdiuT89eCV1dAK9gDbGMssBLPt0DzHRKKIiuQMqiMpRsXn4RBkb2N0b3JDb21taXRtZW50D21hZmlhQ29tbWl0bWVudDEYFCULMRkIjQwMGQAAAAAAAAAAAAAMCwAAAAAAAAAAAAAAiAACIkOKAAAnFTIDZycEMgNnJwUyA2cnBjIDZycHMgNnJwgyA2cnCTIDZycUMgNnJwsyA2cnIzIDZychMgNnJyIyA2cnJDIDZycYI2cnGSNnJxojZycbI2cnHCNnJx0jZycWI2cnDSNnJw4jZycPI2cnECNnJxEjZycSI2cnFiNnJxcjZycMJWcpMgNnKzIDZycKMgNnKCNniSceNhoBF4gABRZQsCJDigEBi/+JJx42GgRXAgA2GgNXAgA2GgJXAgA2GgFXAgCIAAuAAQAjTwJUULAiQ4oEASpJi/+L/ov9UFACjACLAIAgc+2nUymdfUgzOdgICaHYBVO9pAL//lv+/////wAAAAGqjAGL/Yv/i/zhAov+iwHhAuACEowARgGJJx42GgFXAgCIAAxJFRZXBgJMUFCwIkOKAQEqRwKL/wKMAIsAgDAaARHqOX/mmksbp7ZDS6zXZHdLhPOFEr9nMNKg9rD2JB6r//6xU///uf7/////qquqjAGLAeUCjAKLAowARgKJJx6IAAUWULAiQ4oAAShkiTYaAUkVIQUSRIgAAiJDigEAKGQjEkQnFWQyAxJEi/8yAxNEJxWL/2coImeJNhoBVwIAMRYiCUk4ECISRIgAAiJDigIAKkcDKGQiEkQnF2QlDEQnBGQxABJJQAAHJwVkMQASEUlAAAcnBmQxABIRSUAABycHZDEAEhFJQAAHJwhkMQASEUlAAAcnCWQxABIRQQABAIv/OAiBsJhGD0SL/lcAYIwAi/5XYGCMAYv+V8BgjAKL/oGgAiEFWIwDiwOLAosBiwCI/nZEJxO9TEgUQQAJJxMhDLlIQgAJJxNJvUQhDAjTJxO9TEhEJxMnF2QhDAuLAbsnF2QiCCcXTGcnFWQyAxNEsSKyECENsggnFWSyByOyAbMnBGQyAxJBAAYnBDEAZ4knBWQyAxJBAAYnBTEAZ4knBmQyAxJBAAYnBjEAZ4knB2QyAxJBAAYnBzEAZ4knCGQyAxJBAAYnCDEAZ4knCWQyAxJBAAknCTEAZygkZ4kAiTEWIglJOBAiEkQxFiQJSTgQIhJEMRYhBAlJOBAiEkQxFiEHCUk4ECISRDEWIQgJSTgQIhJEMRYlCUk4ECISRDEWIQkJSTgQIhJENhoFVwIANhoEVwIANhoDVwIANhoCVwIANhoBVwIAiAACIkOKDAAoZCQSRIv9Ab1MSBREi/0BI7lIi/8xADIKUBJEJxMjgcAEuov+EkSL+TgAgCDMtCi62GFZqA4enKQk66NmEvSR0JCiKQccA0rUv966xxJEi/g4AIAg4G5kvAD3umWrUuZUrxxEBjvWgOBU3J55INUboiM7VGUSRIv3OACAIFkHc7w3v4nNzPLTDVihf9czOoF2nDXfMeAfsq3PdimEEkSL9jgAgCBdCfLjPeBChTBLrGYY1p7PmpOfPSVsbq3IutZ2u6DzaxJEi/U4AIAgP89/LxSGfoyE2xlGfhc/ArSqe2PmcLbGpx3nzjy0oa4SRIv0OACAIAH8EKjPOvpSe9cT/BXVwlTBuA/4Km4CkbDgH+0UXEVLEkSL+jgAJxVkEkSL+jgHMQASRIv6OAghDRJEJxRkMgMSQQALJxQxAGcnIIv9Z4knC2QyAxJBAAsnCzEAZycfi/1niScjZDIDEkEABicjMQBniSchZDIDEkEABichMQBniSciZDIDEkEABiciMQBniSckZDIDEkEACickMQBnKCEEZ4kAiTYaAReIAAIiQ4oBAChkIQQSRIv/Iw1JQQAGi/8hCQwQRDEAJwRkEklAAAcxACcFZBIRSUAABzEAJwZkEhFJQAAHMQAnB2QSEUlAAAcxACcIZBIRSUAABzEAJwlkEhEUQQABAIv/IhJJQQAHJwRkMgMTEEEADCcNZCIIJw1MZ0IAmov/JBJJQQAHJwVkMgMTEEEADCcOZCIIJw5MZ0IAfIv/IQQSSUEABycGZDIDExBBAAwnD2QiCCcPTGdCAF2L/yEHEklBAAcnB2QyAxMQQQAMJxBkIggnEExnQgA+i/8hCBJJQQAHJwhkMgMTEEEADCcRZCIIJxFMZ0IAH4v/JRJJQQAHJwlkMgMTEEEADCcSZCIIJxJMZ0IAAQAxACcEZBJJQQAGJxhkIxIQQQAHJxgiZ0IAgzEAJwVkEklBAAYnGWQjEhBBAAcnGSJnQgBpMQAnBmQSSUEABicaZCMSEEEABycaImdCAE8xACcHZBJJQQAGJxtkIxIQQQAHJxsiZ0IANTEAJwhkEklBAAYnHGQjEhBBAAcnHCJnQgAbMQAnCWQSSUEABicdZCMSEEEABycdImdCAAEAJxZkIggnFkxnJxZkJwxkEkEAICghB2cnFiNnJxgjZycZI2cnGiNnJxsjZyccI2cnHSNniYgAAiJDigAAKkkoZCEHEkQpMgNnI4wAMgYkGCMSjAEnDWSLAA1JQAAOJw1kiwASSUEAA4sBEBFBAAopJwRkZycNZIwAJw5kiwANSUAADicOZIsAEklBAAOLARARQQAKKScFZGcnDmSMACcPZIsADUlAAA4nD2SLABJJQQADiwEQEUEACiknBmRnJw9kjAAnEGSLAA1JQAAOJxBkiwASSUEAA4sBEBFBAAopJwdkZycQZIwAJxFkiwANSUAADicRZIsAEklBAAOLARARQQAKKScIZGcnEWSMACcSZIsADUlAAA4nEmSLABJJQQADiwEQEUEACiknCWRnJxJkjAApZDIDE0SLACMTRClkJwRkEkEABScEMgNnKWQnBWQSQQAFJwUyA2cpZCcGZBJBAAUnBjIDZylkJwdkEkEABScHMgNnKWQnCGQSQQAFJwgyA2cpZCcJZBJBAAUnCTIDZycMZCIJJwxMZycNI2cnDiNnJw8jZycQI2cnESNnJxIjZyghCGeJNhoBVwIAiAACIkOKAQAqRwIoZCEIEkQpZDEAEkQnJYv/4QKMAIsAiPiLjAGLAYv/4QKMAosCJyBkEkEACicUMgNnKCEGZ4mLAicfZBJBAAUnCzIDZykyA2cnDGQkDkEABSghBmeJKCVniTYaAVcCAIgAAiJDigEAKGQlEkQxACcUZBJEJyeL/2cnC2QyAxJBAAcoIQpnQgAEKCEJZ4k2GgFXAgCIAAIiQ4oBAChkIQkSRDEAJwtkEkQnC2QyAxNEJyaL/2coIQpniTYaAkkVIQUSRDYaAUkVIQUSRIgAAiJDigIAKihkIQoSRDEAJxRkEkSL/zIDE0SL/4v+UAGMAIsAJydkEkSL/ycEZBJBAAgrJwRkZ0IAWYv/JwVkEkEACCsnBWRnQgBIi/8nBmQSQQAIKycGZGdCADeL/ycHZBJBAAgrJwdkZ0IAJov/JwhkEkEACCsnCGRnQgAVi/8nCWQSQQAIKycJZGdCAAQrMgNnJwtkMgMSQQAHKCELZ0IABCghDmeJNhoCSRUhBRJENhoBSRUhBRJEiAACIkOKAgAqKGQhDhJEMQAnC2QSRCcKZDIDEkSL/zIDE0SL/4v+UAGMAIsAJyZkEkSL/ycEZBJBAAknCicEZGdCAF+L/ycFZBJBAAknCicFZGdCAE2L/ycGZBJBAAknCicGZGdCADuL/ycHZBJBAAknCicHZGdCACmL/ycIZBJBAAknCicIZGdCABeL/ycJZBJBAAknCicJZGdCAAUnCjIDZyghC2eJiAACIkOKAAAoZCELEkQrZDIDEklAAAcrZCcKZBIRQQAOKzIDZycKMgNnKCEEZ4krZCcEZBJBAA0pJwRkZycEMgNnQgBvK2QnBWQSQQANKScFZGcnBTIDZ0IAWStkJwZkEkEADSknBmRnJwYyA2dCAEMrZCcHZBJBAA0pJwdkZycHMgNnQgAtK2QnCGQSQQANKScIZGcnCDIDZ0IAFytkJwlkEkEADSknCWRnJwkyA2dCAAEAJwxkIgknDExnKzIDZycKMgNnJwxkJA5BAAUoIQZniSghD2eJNhoBVwIAiAACIkOKAQAqRwIoZCEPEkQpZDEAEkQnJYv/4QKMAIsAiPVzjAGLAYv/4QKMAosCJyBkEkEACighBmcnFDIDZ4mLAicfZBJBAAUnCzIDZykyA2coIQRniYgAAiJDigAAKGQhBhJEiYAEuER7NjYaAI4B8+kAgARwzuobgASgF72MgATXcs28gAT1QLosgAT/Yw79gARU2SvjgASbB7+PgARPsSG7gATEI2FpgATunzYagAQLXnWFgATIZFh1gATtxIa7gAR3N2LlgAQ5le1qgATvZaaXgARq20U4NhoAjhHz9fQJ9H705PT09SD2aPhy+l774PxK/H78qv1m/iD++P9WAA==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":3,"minor":27,"patch":0,"commitHash":"f54f0997"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the TownHall contract
 */
export type TownHallArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'dummyOpUp(uint64)uint64': {
      i: bigint | number
    }
    'dlog(byte[],byte[],byte[],byte[])bool': {
      g: Uint8Array
      x: Uint8Array
      v: Uint8Array
      z: Uint8Array
    }
    'hashPointToPoint(byte[])byte[]': {
      point: Uint8Array
    }
    'getGameState()uint64': Record<string, never>
    'setLSIGFunderAddress(address)void': {
      funderLSigAddress: string
    }
    'joinGameLobby(pay,byte[])void': {
      depositTxn: AppMethodCallTransactionArgument
      nizkDlog: Uint8Array
    }
    'assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void': {
      msg: Uint8Array
      pkAll: Uint8Array
      keyImage: Uint8Array
      sig: Uint8Array
      challenges: Uint8Array
      funderLSigTxn: AppMethodCallTransactionArgument
      ringLSigTxn0: AppMethodCallTransactionArgument
      ringLSigTxn1: AppMethodCallTransactionArgument
      ringLSigTxn2: AppMethodCallTransactionArgument
      ringLSigTxn3: AppMethodCallTransactionArgument
      ringLSigTxn4: AppMethodCallTransactionArgument
      ringLSigTxn5: AppMethodCallTransactionArgument
    }
    'dayStageVote(uint64)void': {
      vote: bigint | number
    }
    'dayStageEliminate()void': Record<string, never>
    'dayStageUnmasking(byte[])void': {
      blsSk: Uint8Array
    }
    'nightStageMafiaCommit(byte[])void': {
      commitment: Uint8Array
    }
    'nightStageDoctorCommit(byte[])void': {
      commitment: Uint8Array
    }
    'dawnStageMafiaReveal(address,byte[32])void': {
      victimAim: string
      blinder: Uint8Array
    }
    'dawnStageDoctorReveal(address,byte[32])void': {
      patientAim: string
      blinder: Uint8Array
    }
    'dawnStageDeadOrSaved()void': Record<string, never>
    'dawnStageUnmasking(byte[])void': {
      blsSk: Uint8Array
    }
    'gameOver()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'dummyOpUp(uint64)uint64': [i: bigint | number]
    'dlog(byte[],byte[],byte[],byte[])bool': [g: Uint8Array, x: Uint8Array, v: Uint8Array, z: Uint8Array]
    'hashPointToPoint(byte[])byte[]': [point: Uint8Array]
    'getGameState()uint64': []
    'setLSIGFunderAddress(address)void': [funderLSigAddress: string]
    'joinGameLobby(pay,byte[])void': [depositTxn: AppMethodCallTransactionArgument, nizkDlog: Uint8Array]
    'assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void': [msg: Uint8Array, pkAll: Uint8Array, keyImage: Uint8Array, sig: Uint8Array, challenges: Uint8Array, funderLSigTxn: AppMethodCallTransactionArgument, ringLSigTxn0: AppMethodCallTransactionArgument, ringLSigTxn1: AppMethodCallTransactionArgument, ringLSigTxn2: AppMethodCallTransactionArgument, ringLSigTxn3: AppMethodCallTransactionArgument, ringLSigTxn4: AppMethodCallTransactionArgument, ringLSigTxn5: AppMethodCallTransactionArgument]
    'dayStageVote(uint64)void': [vote: bigint | number]
    'dayStageEliminate()void': []
    'dayStageUnmasking(byte[])void': [blsSk: Uint8Array]
    'nightStageMafiaCommit(byte[])void': [commitment: Uint8Array]
    'nightStageDoctorCommit(byte[])void': [commitment: Uint8Array]
    'dawnStageMafiaReveal(address,byte[32])void': [victimAim: string, blinder: Uint8Array]
    'dawnStageDoctorReveal(address,byte[32])void': [patientAim: string, blinder: Uint8Array]
    'dawnStageDeadOrSaved()void': []
    'dawnStageUnmasking(byte[])void': [blsSk: Uint8Array]
    'gameOver()void': []
  }
}

/**
 * The return type for each method
 */
export type TownHallReturns = {
  'createApplication()void': void
  'dummyOpUp(uint64)uint64': bigint
  'dlog(byte[],byte[],byte[],byte[])bool': boolean
  'hashPointToPoint(byte[])byte[]': Uint8Array
  'getGameState()uint64': bigint
  'setLSIGFunderAddress(address)void': void
  'joinGameLobby(pay,byte[])void': void
  'assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void': void
  'dayStageVote(uint64)void': void
  'dayStageEliminate()void': void
  'dayStageUnmasking(byte[])void': void
  'nightStageMafiaCommit(byte[])void': void
  'nightStageDoctorCommit(byte[])void': void
  'dawnStageMafiaReveal(address,byte[32])void': void
  'dawnStageDoctorReveal(address,byte[32])void': void
  'dawnStageDeadOrSaved()void': void
  'dawnStageUnmasking(byte[])void': void
  'gameOver()void': void
}

/**
 * Defines the types of available calls and state of the TownHall smart contract.
 */
export type TownHallTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: TownHallArgs['obj']['createApplication()void']
      argsTuple: TownHallArgs['tuple']['createApplication()void']
      returns: TownHallReturns['createApplication()void']
    }>
    & Record<'dummyOpUp(uint64)uint64' | 'dummyOpUp', {
      argsObj: TownHallArgs['obj']['dummyOpUp(uint64)uint64']
      argsTuple: TownHallArgs['tuple']['dummyOpUp(uint64)uint64']
      /**
       * the number (but we do nothing with it)
       */
      returns: TownHallReturns['dummyOpUp(uint64)uint64']
    }>
    & Record<'dlog(byte[],byte[],byte[],byte[])bool' | 'dlog', {
      argsObj: TownHallArgs['obj']['dlog(byte[],byte[],byte[],byte[])bool']
      argsTuple: TownHallArgs['tuple']['dlog(byte[],byte[],byte[],byte[])bool']
      returns: TownHallReturns['dlog(byte[],byte[],byte[],byte[])bool']
    }>
    & Record<'hashPointToPoint(byte[])byte[]' | 'hashPointToPoint', {
      argsObj: TownHallArgs['obj']['hashPointToPoint(byte[])byte[]']
      argsTuple: TownHallArgs['tuple']['hashPointToPoint(byte[])byte[]']
      returns: TownHallReturns['hashPointToPoint(byte[])byte[]']
    }>
    & Record<'getGameState()uint64' | 'getGameState', {
      argsObj: TownHallArgs['obj']['getGameState()uint64']
      argsTuple: TownHallArgs['tuple']['getGameState()uint64']
      returns: TownHallReturns['getGameState()uint64']
    }>
    & Record<'setLSIGFunderAddress(address)void' | 'setLSIGFunderAddress', {
      argsObj: TownHallArgs['obj']['setLSIGFunderAddress(address)void']
      argsTuple: TownHallArgs['tuple']['setLSIGFunderAddress(address)void']
      returns: TownHallReturns['setLSIGFunderAddress(address)void']
    }>
    & Record<'joinGameLobby(pay,byte[])void' | 'joinGameLobby', {
      argsObj: TownHallArgs['obj']['joinGameLobby(pay,byte[])void']
      argsTuple: TownHallArgs['tuple']['joinGameLobby(pay,byte[])void']
      returns: TownHallReturns['joinGameLobby(pay,byte[])void']
    }>
    & Record<'assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void' | 'assignRole', {
      argsObj: TownHallArgs['obj']['assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void']
      argsTuple: TownHallArgs['tuple']['assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void']
      returns: TownHallReturns['assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void']
    }>
    & Record<'dayStageVote(uint64)void' | 'dayStageVote', {
      argsObj: TownHallArgs['obj']['dayStageVote(uint64)void']
      argsTuple: TownHallArgs['tuple']['dayStageVote(uint64)void']
      returns: TownHallReturns['dayStageVote(uint64)void']
    }>
    & Record<'dayStageEliminate()void' | 'dayStageEliminate', {
      argsObj: TownHallArgs['obj']['dayStageEliminate()void']
      argsTuple: TownHallArgs['tuple']['dayStageEliminate()void']
      returns: TownHallReturns['dayStageEliminate()void']
    }>
    & Record<'dayStageUnmasking(byte[])void' | 'dayStageUnmasking', {
      argsObj: TownHallArgs['obj']['dayStageUnmasking(byte[])void']
      argsTuple: TownHallArgs['tuple']['dayStageUnmasking(byte[])void']
      returns: TownHallReturns['dayStageUnmasking(byte[])void']
    }>
    & Record<'nightStageMafiaCommit(byte[])void' | 'nightStageMafiaCommit', {
      argsObj: TownHallArgs['obj']['nightStageMafiaCommit(byte[])void']
      argsTuple: TownHallArgs['tuple']['nightStageMafiaCommit(byte[])void']
      returns: TownHallReturns['nightStageMafiaCommit(byte[])void']
    }>
    & Record<'nightStageDoctorCommit(byte[])void' | 'nightStageDoctorCommit', {
      argsObj: TownHallArgs['obj']['nightStageDoctorCommit(byte[])void']
      argsTuple: TownHallArgs['tuple']['nightStageDoctorCommit(byte[])void']
      returns: TownHallReturns['nightStageDoctorCommit(byte[])void']
    }>
    & Record<'dawnStageMafiaReveal(address,byte[32])void' | 'dawnStageMafiaReveal', {
      argsObj: TownHallArgs['obj']['dawnStageMafiaReveal(address,byte[32])void']
      argsTuple: TownHallArgs['tuple']['dawnStageMafiaReveal(address,byte[32])void']
      returns: TownHallReturns['dawnStageMafiaReveal(address,byte[32])void']
    }>
    & Record<'dawnStageDoctorReveal(address,byte[32])void' | 'dawnStageDoctorReveal', {
      argsObj: TownHallArgs['obj']['dawnStageDoctorReveal(address,byte[32])void']
      argsTuple: TownHallArgs['tuple']['dawnStageDoctorReveal(address,byte[32])void']
      returns: TownHallReturns['dawnStageDoctorReveal(address,byte[32])void']
    }>
    & Record<'dawnStageDeadOrSaved()void' | 'dawnStageDeadOrSaved', {
      argsObj: TownHallArgs['obj']['dawnStageDeadOrSaved()void']
      argsTuple: TownHallArgs['tuple']['dawnStageDeadOrSaved()void']
      returns: TownHallReturns['dawnStageDeadOrSaved()void']
    }>
    & Record<'dawnStageUnmasking(byte[])void' | 'dawnStageUnmasking', {
      argsObj: TownHallArgs['obj']['dawnStageUnmasking(byte[])void']
      argsTuple: TownHallArgs['tuple']['dawnStageUnmasking(byte[])void']
      returns: TownHallReturns['dawnStageUnmasking(byte[])void']
    }>
    & Record<'gameOver()void' | 'gameOver', {
      argsObj: TownHallArgs['obj']['gameOver()void']
      argsTuple: TownHallArgs['tuple']['gameOver()void']
      returns: TownHallReturns['gameOver()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        player1AlgoAddr: string
        player2AlgoAddr: string
        player3AlgoAddr: string
        player4AlgoAddr: string
        player5AlgoAddr: string
        player6AlgoAddr: string
        mafia: string
        mafiaKeyImage: BinaryState
        doctor: string
        doctorKeyImage: BinaryState
        farmer: string
        butcher: string
        innkeep: string
        grocer: string
        lsigFunderAddress: string
        player1HasVoted: bigint
        player1ReceivedVotes: bigint
        player2HasVoted: bigint
        player2ReceivedVotes: bigint
        player3HasVoted: bigint
        player3ReceivedVotes: bigint
        player4HasVoted: bigint
        player4ReceivedVotes: bigint
        player5HasVoted: bigint
        player5ReceivedVotes: bigint
        player6HasVoted: bigint
        player6ReceivedVotes: bigint
        playersVoted: bigint
        playersAlive: bigint
        justEliminatedPlayer: string
        mafiaCommitment: BinaryState
        doctorCommitment: BinaryState
        mafiaVictim: string
        doctorPatient: string
        playersJoined: bigint
        gameState: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        quickAccessPkBoxes: Map<bigint | number, Uint8Array>
        hashFilter: Map<Uint8Array | string, Uint8Array>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type TownHallSignatures = keyof TownHallTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type TownHallNonVoidMethodSignatures = keyof TownHallTypes['methods'] extends infer T ? T extends keyof TownHallTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the TownHall smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends TownHallSignatures> = TownHallTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the TownHall smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TownHallSignatures> = TownHallTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = TownHallTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = TownHallTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type TownHallCreateCallParams =
  | Expand<CallParams<TownHallArgs['obj']['createApplication()void'] | TownHallArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<TownHallArgs['obj']['createApplication()void'] | TownHallArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type TownHallDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: TownHallCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the TownHall smart contract
 */
export abstract class TownHallParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends TownHallCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return TownHallParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the TownHall smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<TownHallArgs['obj']['createApplication()void'] | TownHallArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the dummyOpUp(uint64)uint64 ABI method
   *
  * Dummy Op Up
  Dummy operation to get more opcode budget
  - The number to return, necssary to deduplicate the name

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static dummyOpUp(params: CallParams<TownHallArgs['obj']['dummyOpUp(uint64)uint64'] | TownHallArgs['tuple']['dummyOpUp(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'dummyOpUp(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.i],
    }
  }
  /**
   * Constructs a no op call for the dlog(byte[],byte[],byte[],byte[])bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static dlog(params: CallParams<TownHallArgs['obj']['dlog(byte[],byte[],byte[],byte[])bool'] | TownHallArgs['tuple']['dlog(byte[],byte[],byte[],byte[])bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'dlog(byte[],byte[],byte[],byte[])bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.g, params.args.x, params.args.v, params.args.z],
    }
  }
  /**
   * Constructs a no op call for the hashPointToPoint(byte[])byte[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hashPointToPoint(params: CallParams<TownHallArgs['obj']['hashPointToPoint(byte[])byte[]'] | TownHallArgs['tuple']['hashPointToPoint(byte[])byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hashPointToPoint(byte[])byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.point],
    }
  }
  /**
   * Constructs a no op call for the getGameState()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getGameState(params: CallParams<TownHallArgs['obj']['getGameState()uint64'] | TownHallArgs['tuple']['getGameState()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getGameState()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the setLSIGFunderAddress(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setLsigFunderAddress(params: CallParams<TownHallArgs['obj']['setLSIGFunderAddress(address)void'] | TownHallArgs['tuple']['setLSIGFunderAddress(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setLSIGFunderAddress(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.funderLSigAddress],
    }
  }
  /**
   * Constructs a no op call for the joinGameLobby(pay,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static joinGameLobby(params: CallParams<TownHallArgs['obj']['joinGameLobby(pay,byte[])void'] | TownHallArgs['tuple']['joinGameLobby(pay,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'joinGameLobby(pay,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.depositTxn, params.args.nizkDlog],
    }
  }
  /**
   * Constructs a no op call for the assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assignRole(params: CallParams<TownHallArgs['obj']['assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void'] | TownHallArgs['tuple']['assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.msg, params.args.pkAll, params.args.keyImage, params.args.sig, params.args.challenges, params.args.funderLSigTxn, params.args.ringLSigTxn0, params.args.ringLSigTxn1, params.args.ringLSigTxn2, params.args.ringLSigTxn3, params.args.ringLSigTxn4, params.args.ringLSigTxn5],
    }
  }
  /**
   * Constructs a no op call for the dayStageVote(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static dayStageVote(params: CallParams<TownHallArgs['obj']['dayStageVote(uint64)void'] | TownHallArgs['tuple']['dayStageVote(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'dayStageVote(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.vote],
    }
  }
  /**
   * Constructs a no op call for the dayStageEliminate()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static dayStageEliminate(params: CallParams<TownHallArgs['obj']['dayStageEliminate()void'] | TownHallArgs['tuple']['dayStageEliminate()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'dayStageEliminate()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the dayStageUnmasking(byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static dayStageUnmasking(params: CallParams<TownHallArgs['obj']['dayStageUnmasking(byte[])void'] | TownHallArgs['tuple']['dayStageUnmasking(byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'dayStageUnmasking(byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.blsSk],
    }
  }
  /**
   * Constructs a no op call for the nightStageMafiaCommit(byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static nightStageMafiaCommit(params: CallParams<TownHallArgs['obj']['nightStageMafiaCommit(byte[])void'] | TownHallArgs['tuple']['nightStageMafiaCommit(byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'nightStageMafiaCommit(byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.commitment],
    }
  }
  /**
   * Constructs a no op call for the nightStageDoctorCommit(byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static nightStageDoctorCommit(params: CallParams<TownHallArgs['obj']['nightStageDoctorCommit(byte[])void'] | TownHallArgs['tuple']['nightStageDoctorCommit(byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'nightStageDoctorCommit(byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.commitment],
    }
  }
  /**
   * Constructs a no op call for the dawnStageMafiaReveal(address,byte[32])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static dawnStageMafiaReveal(params: CallParams<TownHallArgs['obj']['dawnStageMafiaReveal(address,byte[32])void'] | TownHallArgs['tuple']['dawnStageMafiaReveal(address,byte[32])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'dawnStageMafiaReveal(address,byte[32])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.victimAim, params.args.blinder],
    }
  }
  /**
   * Constructs a no op call for the dawnStageDoctorReveal(address,byte[32])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static dawnStageDoctorReveal(params: CallParams<TownHallArgs['obj']['dawnStageDoctorReveal(address,byte[32])void'] | TownHallArgs['tuple']['dawnStageDoctorReveal(address,byte[32])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'dawnStageDoctorReveal(address,byte[32])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.patientAim, params.args.blinder],
    }
  }
  /**
   * Constructs a no op call for the dawnStageDeadOrSaved()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static dawnStageDeadOrSaved(params: CallParams<TownHallArgs['obj']['dawnStageDeadOrSaved()void'] | TownHallArgs['tuple']['dawnStageDeadOrSaved()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'dawnStageDeadOrSaved()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the dawnStageUnmasking(byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static dawnStageUnmasking(params: CallParams<TownHallArgs['obj']['dawnStageUnmasking(byte[])void'] | TownHallArgs['tuple']['dawnStageUnmasking(byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'dawnStageUnmasking(byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.blsSk],
    }
  }
  /**
   * Constructs a no op call for the gameOver()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static gameOver(params: CallParams<TownHallArgs['obj']['gameOver()void'] | TownHallArgs['tuple']['gameOver()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'gameOver()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the TownHall smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class TownHallFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `TownHallFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new TownHallClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new TownHallClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the TownHall smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: TownHallDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? TownHallParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (TownHallCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new TownHallClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TownHall smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<TownHallArgs['obj']['createApplication()void'] | TownHallArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(TownHallParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TownHall smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<TownHallArgs['obj']['createApplication()void'] | TownHallArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(TownHallParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TownHall smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<TownHallArgs['obj']['createApplication()void'] | TownHallArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(TownHallParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | TownHallReturns['createApplication()void']) }, appClient: new TownHallClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the TownHall smart contract
 */
export class TownHallClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `TownHallClient`
   *
   * @param appClient An `AppClient` instance which has been created with the TownHall app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `TownHallClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends TownHallNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `TownHallClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<TownHallClient> {
    return new TownHallClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `TownHallClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<TownHallClient> {
    return new TownHallClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the TownHall smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the TownHall smart contract using the `dummyOpUp(uint64)uint64` ABI method.
     *
    * Dummy Op Up
    Dummy operation to get more opcode budget
    - The number to return, necssary to deduplicate the name

     *
     * @param params The params for the smart contract call
     * @returns The call params: the number (but we do nothing with it)
     */
    dummyOpUp: (params: CallParams<TownHallArgs['obj']['dummyOpUp(uint64)uint64'] | TownHallArgs['tuple']['dummyOpUp(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TownHallParamsFactory.dummyOpUp(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `dlog(byte[],byte[],byte[],byte[])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    dlog: (params: CallParams<TownHallArgs['obj']['dlog(byte[],byte[],byte[],byte[])bool'] | TownHallArgs['tuple']['dlog(byte[],byte[],byte[],byte[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TownHallParamsFactory.dlog(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `hashPointToPoint(byte[])byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hashPointToPoint: (params: CallParams<TownHallArgs['obj']['hashPointToPoint(byte[])byte[]'] | TownHallArgs['tuple']['hashPointToPoint(byte[])byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TownHallParamsFactory.hashPointToPoint(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `getGameState()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getGameState: (params: CallParams<TownHallArgs['obj']['getGameState()uint64'] | TownHallArgs['tuple']['getGameState()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TownHallParamsFactory.getGameState(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `setLSIGFunderAddress(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setLsigFunderAddress: (params: CallParams<TownHallArgs['obj']['setLSIGFunderAddress(address)void'] | TownHallArgs['tuple']['setLSIGFunderAddress(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TownHallParamsFactory.setLsigFunderAddress(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `joinGameLobby(pay,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    joinGameLobby: (params: CallParams<TownHallArgs['obj']['joinGameLobby(pay,byte[])void'] | TownHallArgs['tuple']['joinGameLobby(pay,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TownHallParamsFactory.joinGameLobby(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assignRole: (params: CallParams<TownHallArgs['obj']['assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void'] | TownHallArgs['tuple']['assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TownHallParamsFactory.assignRole(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `dayStageVote(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    dayStageVote: (params: CallParams<TownHallArgs['obj']['dayStageVote(uint64)void'] | TownHallArgs['tuple']['dayStageVote(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TownHallParamsFactory.dayStageVote(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `dayStageEliminate()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    dayStageEliminate: (params: CallParams<TownHallArgs['obj']['dayStageEliminate()void'] | TownHallArgs['tuple']['dayStageEliminate()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TownHallParamsFactory.dayStageEliminate(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `dayStageUnmasking(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    dayStageUnmasking: (params: CallParams<TownHallArgs['obj']['dayStageUnmasking(byte[])void'] | TownHallArgs['tuple']['dayStageUnmasking(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TownHallParamsFactory.dayStageUnmasking(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `nightStageMafiaCommit(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    nightStageMafiaCommit: (params: CallParams<TownHallArgs['obj']['nightStageMafiaCommit(byte[])void'] | TownHallArgs['tuple']['nightStageMafiaCommit(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TownHallParamsFactory.nightStageMafiaCommit(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `nightStageDoctorCommit(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    nightStageDoctorCommit: (params: CallParams<TownHallArgs['obj']['nightStageDoctorCommit(byte[])void'] | TownHallArgs['tuple']['nightStageDoctorCommit(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TownHallParamsFactory.nightStageDoctorCommit(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `dawnStageMafiaReveal(address,byte[32])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    dawnStageMafiaReveal: (params: CallParams<TownHallArgs['obj']['dawnStageMafiaReveal(address,byte[32])void'] | TownHallArgs['tuple']['dawnStageMafiaReveal(address,byte[32])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TownHallParamsFactory.dawnStageMafiaReveal(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `dawnStageDoctorReveal(address,byte[32])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    dawnStageDoctorReveal: (params: CallParams<TownHallArgs['obj']['dawnStageDoctorReveal(address,byte[32])void'] | TownHallArgs['tuple']['dawnStageDoctorReveal(address,byte[32])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TownHallParamsFactory.dawnStageDoctorReveal(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `dawnStageDeadOrSaved()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    dawnStageDeadOrSaved: (params: CallParams<TownHallArgs['obj']['dawnStageDeadOrSaved()void'] | TownHallArgs['tuple']['dawnStageDeadOrSaved()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TownHallParamsFactory.dawnStageDeadOrSaved(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `dawnStageUnmasking(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    dawnStageUnmasking: (params: CallParams<TownHallArgs['obj']['dawnStageUnmasking(byte[])void'] | TownHallArgs['tuple']['dawnStageUnmasking(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TownHallParamsFactory.dawnStageUnmasking(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `gameOver()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    gameOver: (params: CallParams<TownHallArgs['obj']['gameOver()void'] | TownHallArgs['tuple']['gameOver()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TownHallParamsFactory.gameOver(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the TownHall smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the TownHall smart contract using the `dummyOpUp(uint64)uint64` ABI method.
     *
    * Dummy Op Up
    Dummy operation to get more opcode budget
    - The number to return, necssary to deduplicate the name

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: the number (but we do nothing with it)
     */
    dummyOpUp: (params: CallParams<TownHallArgs['obj']['dummyOpUp(uint64)uint64'] | TownHallArgs['tuple']['dummyOpUp(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TownHallParamsFactory.dummyOpUp(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `dlog(byte[],byte[],byte[],byte[])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    dlog: (params: CallParams<TownHallArgs['obj']['dlog(byte[],byte[],byte[],byte[])bool'] | TownHallArgs['tuple']['dlog(byte[],byte[],byte[],byte[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TownHallParamsFactory.dlog(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `hashPointToPoint(byte[])byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hashPointToPoint: (params: CallParams<TownHallArgs['obj']['hashPointToPoint(byte[])byte[]'] | TownHallArgs['tuple']['hashPointToPoint(byte[])byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TownHallParamsFactory.hashPointToPoint(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `getGameState()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getGameState: (params: CallParams<TownHallArgs['obj']['getGameState()uint64'] | TownHallArgs['tuple']['getGameState()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TownHallParamsFactory.getGameState(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `setLSIGFunderAddress(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setLsigFunderAddress: (params: CallParams<TownHallArgs['obj']['setLSIGFunderAddress(address)void'] | TownHallArgs['tuple']['setLSIGFunderAddress(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TownHallParamsFactory.setLsigFunderAddress(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `joinGameLobby(pay,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    joinGameLobby: (params: CallParams<TownHallArgs['obj']['joinGameLobby(pay,byte[])void'] | TownHallArgs['tuple']['joinGameLobby(pay,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TownHallParamsFactory.joinGameLobby(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assignRole: (params: CallParams<TownHallArgs['obj']['assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void'] | TownHallArgs['tuple']['assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TownHallParamsFactory.assignRole(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `dayStageVote(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    dayStageVote: (params: CallParams<TownHallArgs['obj']['dayStageVote(uint64)void'] | TownHallArgs['tuple']['dayStageVote(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TownHallParamsFactory.dayStageVote(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `dayStageEliminate()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    dayStageEliminate: (params: CallParams<TownHallArgs['obj']['dayStageEliminate()void'] | TownHallArgs['tuple']['dayStageEliminate()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TownHallParamsFactory.dayStageEliminate(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `dayStageUnmasking(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    dayStageUnmasking: (params: CallParams<TownHallArgs['obj']['dayStageUnmasking(byte[])void'] | TownHallArgs['tuple']['dayStageUnmasking(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TownHallParamsFactory.dayStageUnmasking(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `nightStageMafiaCommit(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    nightStageMafiaCommit: (params: CallParams<TownHallArgs['obj']['nightStageMafiaCommit(byte[])void'] | TownHallArgs['tuple']['nightStageMafiaCommit(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TownHallParamsFactory.nightStageMafiaCommit(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `nightStageDoctorCommit(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    nightStageDoctorCommit: (params: CallParams<TownHallArgs['obj']['nightStageDoctorCommit(byte[])void'] | TownHallArgs['tuple']['nightStageDoctorCommit(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TownHallParamsFactory.nightStageDoctorCommit(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `dawnStageMafiaReveal(address,byte[32])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    dawnStageMafiaReveal: (params: CallParams<TownHallArgs['obj']['dawnStageMafiaReveal(address,byte[32])void'] | TownHallArgs['tuple']['dawnStageMafiaReveal(address,byte[32])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TownHallParamsFactory.dawnStageMafiaReveal(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `dawnStageDoctorReveal(address,byte[32])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    dawnStageDoctorReveal: (params: CallParams<TownHallArgs['obj']['dawnStageDoctorReveal(address,byte[32])void'] | TownHallArgs['tuple']['dawnStageDoctorReveal(address,byte[32])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TownHallParamsFactory.dawnStageDoctorReveal(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `dawnStageDeadOrSaved()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    dawnStageDeadOrSaved: (params: CallParams<TownHallArgs['obj']['dawnStageDeadOrSaved()void'] | TownHallArgs['tuple']['dawnStageDeadOrSaved()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TownHallParamsFactory.dawnStageDeadOrSaved(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `dawnStageUnmasking(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    dawnStageUnmasking: (params: CallParams<TownHallArgs['obj']['dawnStageUnmasking(byte[])void'] | TownHallArgs['tuple']['dawnStageUnmasking(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TownHallParamsFactory.dawnStageUnmasking(params))
    },

    /**
     * Makes a call to the TownHall smart contract using the `gameOver()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    gameOver: (params: CallParams<TownHallArgs['obj']['gameOver()void'] | TownHallArgs['tuple']['gameOver()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TownHallParamsFactory.gameOver(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the TownHall smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the TownHall smart contract using the `dummyOpUp(uint64)uint64` ABI method.
     *
    * Dummy Op Up
    Dummy operation to get more opcode budget
    - The number to return, necssary to deduplicate the name

     *
     * @param params The params for the smart contract call
     * @returns The call result: the number (but we do nothing with it)
     */
    dummyOpUp: async (params: CallParams<TownHallArgs['obj']['dummyOpUp(uint64)uint64'] | TownHallArgs['tuple']['dummyOpUp(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TownHallParamsFactory.dummyOpUp(params))
      return {...result, return: result.return as unknown as (undefined | TownHallReturns['dummyOpUp(uint64)uint64'])}
    },

    /**
     * Makes a call to the TownHall smart contract using the `dlog(byte[],byte[],byte[],byte[])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    dlog: async (params: CallParams<TownHallArgs['obj']['dlog(byte[],byte[],byte[],byte[])bool'] | TownHallArgs['tuple']['dlog(byte[],byte[],byte[],byte[])bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TownHallParamsFactory.dlog(params))
      return {...result, return: result.return as unknown as (undefined | TownHallReturns['dlog(byte[],byte[],byte[],byte[])bool'])}
    },

    /**
     * Makes a call to the TownHall smart contract using the `hashPointToPoint(byte[])byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hashPointToPoint: async (params: CallParams<TownHallArgs['obj']['hashPointToPoint(byte[])byte[]'] | TownHallArgs['tuple']['hashPointToPoint(byte[])byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TownHallParamsFactory.hashPointToPoint(params))
      return {...result, return: result.return as unknown as (undefined | TownHallReturns['hashPointToPoint(byte[])byte[]'])}
    },

    /**
     * Makes a call to the TownHall smart contract using the `getGameState()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getGameState: async (params: CallParams<TownHallArgs['obj']['getGameState()uint64'] | TownHallArgs['tuple']['getGameState()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TownHallParamsFactory.getGameState(params))
      return {...result, return: result.return as unknown as (undefined | TownHallReturns['getGameState()uint64'])}
    },

    /**
     * Makes a call to the TownHall smart contract using the `setLSIGFunderAddress(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setLsigFunderAddress: async (params: CallParams<TownHallArgs['obj']['setLSIGFunderAddress(address)void'] | TownHallArgs['tuple']['setLSIGFunderAddress(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TownHallParamsFactory.setLsigFunderAddress(params))
      return {...result, return: result.return as unknown as (undefined | TownHallReturns['setLSIGFunderAddress(address)void'])}
    },

    /**
     * Makes a call to the TownHall smart contract using the `joinGameLobby(pay,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    joinGameLobby: async (params: CallParams<TownHallArgs['obj']['joinGameLobby(pay,byte[])void'] | TownHallArgs['tuple']['joinGameLobby(pay,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TownHallParamsFactory.joinGameLobby(params))
      return {...result, return: result.return as unknown as (undefined | TownHallReturns['joinGameLobby(pay,byte[])void'])}
    },

    /**
     * Makes a call to the TownHall smart contract using the `assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assignRole: async (params: CallParams<TownHallArgs['obj']['assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void'] | TownHallArgs['tuple']['assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TownHallParamsFactory.assignRole(params))
      return {...result, return: result.return as unknown as (undefined | TownHallReturns['assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void'])}
    },

    /**
     * Makes a call to the TownHall smart contract using the `dayStageVote(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    dayStageVote: async (params: CallParams<TownHallArgs['obj']['dayStageVote(uint64)void'] | TownHallArgs['tuple']['dayStageVote(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TownHallParamsFactory.dayStageVote(params))
      return {...result, return: result.return as unknown as (undefined | TownHallReturns['dayStageVote(uint64)void'])}
    },

    /**
     * Makes a call to the TownHall smart contract using the `dayStageEliminate()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    dayStageEliminate: async (params: CallParams<TownHallArgs['obj']['dayStageEliminate()void'] | TownHallArgs['tuple']['dayStageEliminate()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TownHallParamsFactory.dayStageEliminate(params))
      return {...result, return: result.return as unknown as (undefined | TownHallReturns['dayStageEliminate()void'])}
    },

    /**
     * Makes a call to the TownHall smart contract using the `dayStageUnmasking(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    dayStageUnmasking: async (params: CallParams<TownHallArgs['obj']['dayStageUnmasking(byte[])void'] | TownHallArgs['tuple']['dayStageUnmasking(byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TownHallParamsFactory.dayStageUnmasking(params))
      return {...result, return: result.return as unknown as (undefined | TownHallReturns['dayStageUnmasking(byte[])void'])}
    },

    /**
     * Makes a call to the TownHall smart contract using the `nightStageMafiaCommit(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    nightStageMafiaCommit: async (params: CallParams<TownHallArgs['obj']['nightStageMafiaCommit(byte[])void'] | TownHallArgs['tuple']['nightStageMafiaCommit(byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TownHallParamsFactory.nightStageMafiaCommit(params))
      return {...result, return: result.return as unknown as (undefined | TownHallReturns['nightStageMafiaCommit(byte[])void'])}
    },

    /**
     * Makes a call to the TownHall smart contract using the `nightStageDoctorCommit(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    nightStageDoctorCommit: async (params: CallParams<TownHallArgs['obj']['nightStageDoctorCommit(byte[])void'] | TownHallArgs['tuple']['nightStageDoctorCommit(byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TownHallParamsFactory.nightStageDoctorCommit(params))
      return {...result, return: result.return as unknown as (undefined | TownHallReturns['nightStageDoctorCommit(byte[])void'])}
    },

    /**
     * Makes a call to the TownHall smart contract using the `dawnStageMafiaReveal(address,byte[32])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    dawnStageMafiaReveal: async (params: CallParams<TownHallArgs['obj']['dawnStageMafiaReveal(address,byte[32])void'] | TownHallArgs['tuple']['dawnStageMafiaReveal(address,byte[32])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TownHallParamsFactory.dawnStageMafiaReveal(params))
      return {...result, return: result.return as unknown as (undefined | TownHallReturns['dawnStageMafiaReveal(address,byte[32])void'])}
    },

    /**
     * Makes a call to the TownHall smart contract using the `dawnStageDoctorReveal(address,byte[32])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    dawnStageDoctorReveal: async (params: CallParams<TownHallArgs['obj']['dawnStageDoctorReveal(address,byte[32])void'] | TownHallArgs['tuple']['dawnStageDoctorReveal(address,byte[32])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TownHallParamsFactory.dawnStageDoctorReveal(params))
      return {...result, return: result.return as unknown as (undefined | TownHallReturns['dawnStageDoctorReveal(address,byte[32])void'])}
    },

    /**
     * Makes a call to the TownHall smart contract using the `dawnStageDeadOrSaved()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    dawnStageDeadOrSaved: async (params: CallParams<TownHallArgs['obj']['dawnStageDeadOrSaved()void'] | TownHallArgs['tuple']['dawnStageDeadOrSaved()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TownHallParamsFactory.dawnStageDeadOrSaved(params))
      return {...result, return: result.return as unknown as (undefined | TownHallReturns['dawnStageDeadOrSaved()void'])}
    },

    /**
     * Makes a call to the TownHall smart contract using the `dawnStageUnmasking(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    dawnStageUnmasking: async (params: CallParams<TownHallArgs['obj']['dawnStageUnmasking(byte[])void'] | TownHallArgs['tuple']['dawnStageUnmasking(byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TownHallParamsFactory.dawnStageUnmasking(params))
      return {...result, return: result.return as unknown as (undefined | TownHallReturns['dawnStageUnmasking(byte[])void'])}
    },

    /**
     * Makes a call to the TownHall smart contract using the `gameOver()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    gameOver: async (params: CallParams<TownHallArgs['obj']['gameOver()void'] | TownHallArgs['tuple']['gameOver()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TownHallParamsFactory.gameOver(params))
      return {...result, return: result.return as unknown as (undefined | TownHallReturns['gameOver()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new TownHallClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current TownHall app
   */
  state = {
    /**
     * Methods to access global state for the current TownHall app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          player1AlgoAddr: result.player1AlgoAddr,
          player2AlgoAddr: result.player2AlgoAddr,
          player3AlgoAddr: result.player3AlgoAddr,
          player4AlgoAddr: result.player4AlgoAddr,
          player5AlgoAddr: result.player5AlgoAddr,
          player6AlgoAddr: result.player6AlgoAddr,
          mafia: result.mafia,
          mafiaKeyImage: new BinaryStateValue(result.mafiaKeyImage),
          doctor: result.doctor,
          doctorKeyImage: new BinaryStateValue(result.doctorKeyImage),
          farmer: result.farmer,
          butcher: result.butcher,
          innkeep: result.innkeep,
          grocer: result.grocer,
          lsigFunderAddress: result.lsigFunderAddress,
          player1HasVoted: result.player1HasVoted,
          player1ReceivedVotes: result.player1ReceivedVotes,
          player2HasVoted: result.player2HasVoted,
          player2ReceivedVotes: result.player2ReceivedVotes,
          player3HasVoted: result.player3HasVoted,
          player3ReceivedVotes: result.player3ReceivedVotes,
          player4HasVoted: result.player4HasVoted,
          player4ReceivedVotes: result.player4ReceivedVotes,
          player5HasVoted: result.player5HasVoted,
          player5ReceivedVotes: result.player5ReceivedVotes,
          player6HasVoted: result.player6HasVoted,
          player6ReceivedVotes: result.player6ReceivedVotes,
          playersVoted: result.playersVoted,
          playersAlive: result.playersAlive,
          justEliminatedPlayer: result.justEliminatedPlayer,
          mafiaCommitment: new BinaryStateValue(result.mafiaCommitment),
          doctorCommitment: new BinaryStateValue(result.doctorCommitment),
          mafiaVictim: result.mafiaVictim,
          doctorPatient: result.doctorPatient,
          playersJoined: result.playersJoined,
          gameState: result.gameState,
        }
      },
      /**
       * Get the current value of the player1AlgoAddr key in global state
       */
      player1AlgoAddr: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("player1AlgoAddr")) as string | undefined },
      /**
       * Get the current value of the player2AlgoAddr key in global state
       */
      player2AlgoAddr: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("player2AlgoAddr")) as string | undefined },
      /**
       * Get the current value of the player3AlgoAddr key in global state
       */
      player3AlgoAddr: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("player3AlgoAddr")) as string | undefined },
      /**
       * Get the current value of the player4AlgoAddr key in global state
       */
      player4AlgoAddr: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("player4AlgoAddr")) as string | undefined },
      /**
       * Get the current value of the player5AlgoAddr key in global state
       */
      player5AlgoAddr: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("player5AlgoAddr")) as string | undefined },
      /**
       * Get the current value of the player6AlgoAddr key in global state
       */
      player6AlgoAddr: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("player6AlgoAddr")) as string | undefined },
      /**
       * Get the current value of the mafia key in global state
       */
      mafia: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("mafia")) as string | undefined },
      /**
       * Get the current value of the mafiaKeyImage key in global state
       */
      mafiaKeyImage: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("mafiaKeyImage")) as Uint8Array | undefined) },
      /**
       * Get the current value of the doctor key in global state
       */
      doctor: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("doctor")) as string | undefined },
      /**
       * Get the current value of the doctorKeyImage key in global state
       */
      doctorKeyImage: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("doctorKeyImage")) as Uint8Array | undefined) },
      /**
       * Get the current value of the farmer key in global state
       */
      farmer: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("farmer")) as string | undefined },
      /**
       * Get the current value of the butcher key in global state
       */
      butcher: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("butcher")) as string | undefined },
      /**
       * Get the current value of the innkeep key in global state
       */
      innkeep: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("innkeep")) as string | undefined },
      /**
       * Get the current value of the grocer key in global state
       */
      grocer: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("grocer")) as string | undefined },
      /**
       * Get the current value of the lsigFunderAddress key in global state
       */
      lsigFunderAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("lsigFunderAddress")) as string | undefined },
      /**
       * Get the current value of the player1HasVoted key in global state
       */
      player1HasVoted: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("player1HasVoted")) as bigint | undefined },
      /**
       * Get the current value of the player1ReceivedVotes key in global state
       */
      player1ReceivedVotes: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("player1ReceivedVotes")) as bigint | undefined },
      /**
       * Get the current value of the player2HasVoted key in global state
       */
      player2HasVoted: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("player2HasVoted")) as bigint | undefined },
      /**
       * Get the current value of the player2ReceivedVotes key in global state
       */
      player2ReceivedVotes: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("player2ReceivedVotes")) as bigint | undefined },
      /**
       * Get the current value of the player3HasVoted key in global state
       */
      player3HasVoted: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("player3HasVoted")) as bigint | undefined },
      /**
       * Get the current value of the player3ReceivedVotes key in global state
       */
      player3ReceivedVotes: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("player3ReceivedVotes")) as bigint | undefined },
      /**
       * Get the current value of the player4HasVoted key in global state
       */
      player4HasVoted: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("player4HasVoted")) as bigint | undefined },
      /**
       * Get the current value of the player4ReceivedVotes key in global state
       */
      player4ReceivedVotes: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("player4ReceivedVotes")) as bigint | undefined },
      /**
       * Get the current value of the player5HasVoted key in global state
       */
      player5HasVoted: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("player5HasVoted")) as bigint | undefined },
      /**
       * Get the current value of the player5ReceivedVotes key in global state
       */
      player5ReceivedVotes: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("player5ReceivedVotes")) as bigint | undefined },
      /**
       * Get the current value of the player6HasVoted key in global state
       */
      player6HasVoted: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("player6HasVoted")) as bigint | undefined },
      /**
       * Get the current value of the player6ReceivedVotes key in global state
       */
      player6ReceivedVotes: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("player6ReceivedVotes")) as bigint | undefined },
      /**
       * Get the current value of the playersVoted key in global state
       */
      playersVoted: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("playersVoted")) as bigint | undefined },
      /**
       * Get the current value of the playersAlive key in global state
       */
      playersAlive: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("playersAlive")) as bigint | undefined },
      /**
       * Get the current value of the justEliminatedPlayer key in global state
       */
      justEliminatedPlayer: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("justEliminatedPlayer")) as string | undefined },
      /**
       * Get the current value of the mafiaCommitment key in global state
       */
      mafiaCommitment: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("mafiaCommitment")) as Uint8Array | undefined) },
      /**
       * Get the current value of the doctorCommitment key in global state
       */
      doctorCommitment: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("doctorCommitment")) as Uint8Array | undefined) },
      /**
       * Get the current value of the mafiaVictim key in global state
       */
      mafiaVictim: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("mafiaVictim")) as string | undefined },
      /**
       * Get the current value of the doctorPatient key in global state
       */
      doctorPatient: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("doctorPatient")) as string | undefined },
      /**
       * Get the current value of the playersJoined key in global state
       */
      playersJoined: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("playersJoined")) as bigint | undefined },
      /**
       * Get the current value of the gameState key in global state
       */
      gameState: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("gameState")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current TownHall app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the quickAccessPKBoxes map in box state
       */
      quickAccessPkBoxes: {
        /**
         * Get all current values of the quickAccessPKBoxes map in box state
         */
        getMap: async (): Promise<Map<bigint, Uint8Array>> => { return (await this.appClient.state.box.getMap("quickAccessPKBoxes")) as Map<bigint, Uint8Array> },
        /**
         * Get a current value of the quickAccessPKBoxes map by key from box state
         */
        value: async (key: bigint | number): Promise<Uint8Array | undefined> => { return await this.appClient.state.box.getMapValue("quickAccessPKBoxes", key) as Uint8Array | undefined },
      },
      /**
       * Get values from the hashFilter map in box state
       */
      hashFilter: {
        /**
         * Get all current values of the hashFilter map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, Uint8Array>> => { return (await this.appClient.state.box.getMap("hashFilter")) as Map<Uint8Array, Uint8Array> },
        /**
         * Get a current value of the hashFilter map by key from box state
         */
        value: async (key: Uint8Array | string): Promise<Uint8Array | undefined> => { return await this.appClient.state.box.getMapValue("hashFilter", key) as Uint8Array | undefined },
      },
    },
  }

  public newGroup(): TownHallComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a dummyOpUp(uint64)uint64 method call against the TownHall contract
       */
      dummyOpUp(params: CallParams<TownHallArgs['obj']['dummyOpUp(uint64)uint64'] | TownHallArgs['tuple']['dummyOpUp(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.dummyOpUp(params)))
        resultMappers.push((v) => client.decodeReturnValue('dummyOpUp(uint64)uint64', v))
        return this
      },
      /**
       * Add a dlog(byte[],byte[],byte[],byte[])bool method call against the TownHall contract
       */
      dlog(params: CallParams<TownHallArgs['obj']['dlog(byte[],byte[],byte[],byte[])bool'] | TownHallArgs['tuple']['dlog(byte[],byte[],byte[],byte[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.dlog(params)))
        resultMappers.push((v) => client.decodeReturnValue('dlog(byte[],byte[],byte[],byte[])bool', v))
        return this
      },
      /**
       * Add a hashPointToPoint(byte[])byte[] method call against the TownHall contract
       */
      hashPointToPoint(params: CallParams<TownHallArgs['obj']['hashPointToPoint(byte[])byte[]'] | TownHallArgs['tuple']['hashPointToPoint(byte[])byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hashPointToPoint(params)))
        resultMappers.push((v) => client.decodeReturnValue('hashPointToPoint(byte[])byte[]', v))
        return this
      },
      /**
       * Add a getGameState()uint64 method call against the TownHall contract
       */
      getGameState(params: CallParams<TownHallArgs['obj']['getGameState()uint64'] | TownHallArgs['tuple']['getGameState()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getGameState(params)))
        resultMappers.push((v) => client.decodeReturnValue('getGameState()uint64', v))
        return this
      },
      /**
       * Add a setLSIGFunderAddress(address)void method call against the TownHall contract
       */
      setLsigFunderAddress(params: CallParams<TownHallArgs['obj']['setLSIGFunderAddress(address)void'] | TownHallArgs['tuple']['setLSIGFunderAddress(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setLsigFunderAddress(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a joinGameLobby(pay,byte[])void method call against the TownHall contract
       */
      joinGameLobby(params: CallParams<TownHallArgs['obj']['joinGameLobby(pay,byte[])void'] | TownHallArgs['tuple']['joinGameLobby(pay,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.joinGameLobby(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void method call against the TownHall contract
       */
      assignRole(params: CallParams<TownHallArgs['obj']['assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void'] | TownHallArgs['tuple']['assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assignRole(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a dayStageVote(uint64)void method call against the TownHall contract
       */
      dayStageVote(params: CallParams<TownHallArgs['obj']['dayStageVote(uint64)void'] | TownHallArgs['tuple']['dayStageVote(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.dayStageVote(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a dayStageEliminate()void method call against the TownHall contract
       */
      dayStageEliminate(params: CallParams<TownHallArgs['obj']['dayStageEliminate()void'] | TownHallArgs['tuple']['dayStageEliminate()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.dayStageEliminate(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a dayStageUnmasking(byte[])void method call against the TownHall contract
       */
      dayStageUnmasking(params: CallParams<TownHallArgs['obj']['dayStageUnmasking(byte[])void'] | TownHallArgs['tuple']['dayStageUnmasking(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.dayStageUnmasking(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a nightStageMafiaCommit(byte[])void method call against the TownHall contract
       */
      nightStageMafiaCommit(params: CallParams<TownHallArgs['obj']['nightStageMafiaCommit(byte[])void'] | TownHallArgs['tuple']['nightStageMafiaCommit(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.nightStageMafiaCommit(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a nightStageDoctorCommit(byte[])void method call against the TownHall contract
       */
      nightStageDoctorCommit(params: CallParams<TownHallArgs['obj']['nightStageDoctorCommit(byte[])void'] | TownHallArgs['tuple']['nightStageDoctorCommit(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.nightStageDoctorCommit(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a dawnStageMafiaReveal(address,byte[32])void method call against the TownHall contract
       */
      dawnStageMafiaReveal(params: CallParams<TownHallArgs['obj']['dawnStageMafiaReveal(address,byte[32])void'] | TownHallArgs['tuple']['dawnStageMafiaReveal(address,byte[32])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.dawnStageMafiaReveal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a dawnStageDoctorReveal(address,byte[32])void method call against the TownHall contract
       */
      dawnStageDoctorReveal(params: CallParams<TownHallArgs['obj']['dawnStageDoctorReveal(address,byte[32])void'] | TownHallArgs['tuple']['dawnStageDoctorReveal(address,byte[32])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.dawnStageDoctorReveal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a dawnStageDeadOrSaved()void method call against the TownHall contract
       */
      dawnStageDeadOrSaved(params: CallParams<TownHallArgs['obj']['dawnStageDeadOrSaved()void'] | TownHallArgs['tuple']['dawnStageDeadOrSaved()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.dawnStageDeadOrSaved(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a dawnStageUnmasking(byte[])void method call against the TownHall contract
       */
      dawnStageUnmasking(params: CallParams<TownHallArgs['obj']['dawnStageUnmasking(byte[])void'] | TownHallArgs['tuple']['dawnStageUnmasking(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.dawnStageUnmasking(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a gameOver()void method call against the TownHall contract
       */
      gameOver(params: CallParams<TownHallArgs['obj']['gameOver()void'] | TownHallArgs['tuple']['gameOver()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.gameOver(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the TownHall contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as TownHallComposer
  }
}
export type TownHallComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the dummyOpUp(uint64)uint64 ABI method.
   *
  * Dummy Op Up
  Dummy operation to get more opcode budget
  - The number to return, necssary to deduplicate the name

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  dummyOpUp(params?: CallParams<TownHallArgs['obj']['dummyOpUp(uint64)uint64'] | TownHallArgs['tuple']['dummyOpUp(uint64)uint64']>): TownHallComposer<[...TReturns, TownHallReturns['dummyOpUp(uint64)uint64'] | undefined]>

  /**
   * Calls the dlog(byte[],byte[],byte[],byte[])bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  dlog(params?: CallParams<TownHallArgs['obj']['dlog(byte[],byte[],byte[],byte[])bool'] | TownHallArgs['tuple']['dlog(byte[],byte[],byte[],byte[])bool']>): TownHallComposer<[...TReturns, TownHallReturns['dlog(byte[],byte[],byte[],byte[])bool'] | undefined]>

  /**
   * Calls the hashPointToPoint(byte[])byte[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hashPointToPoint(params?: CallParams<TownHallArgs['obj']['hashPointToPoint(byte[])byte[]'] | TownHallArgs['tuple']['hashPointToPoint(byte[])byte[]']>): TownHallComposer<[...TReturns, TownHallReturns['hashPointToPoint(byte[])byte[]'] | undefined]>

  /**
   * Calls the getGameState()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getGameState(params?: CallParams<TownHallArgs['obj']['getGameState()uint64'] | TownHallArgs['tuple']['getGameState()uint64']>): TownHallComposer<[...TReturns, TownHallReturns['getGameState()uint64'] | undefined]>

  /**
   * Calls the setLSIGFunderAddress(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setLsigFunderAddress(params?: CallParams<TownHallArgs['obj']['setLSIGFunderAddress(address)void'] | TownHallArgs['tuple']['setLSIGFunderAddress(address)void']>): TownHallComposer<[...TReturns, TownHallReturns['setLSIGFunderAddress(address)void'] | undefined]>

  /**
   * Calls the joinGameLobby(pay,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  joinGameLobby(params?: CallParams<TownHallArgs['obj']['joinGameLobby(pay,byte[])void'] | TownHallArgs['tuple']['joinGameLobby(pay,byte[])void']>): TownHallComposer<[...TReturns, TownHallReturns['joinGameLobby(pay,byte[])void'] | undefined]>

  /**
   * Calls the assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assignRole(params?: CallParams<TownHallArgs['obj']['assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void'] | TownHallArgs['tuple']['assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void']>): TownHallComposer<[...TReturns, TownHallReturns['assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void'] | undefined]>

  /**
   * Calls the dayStageVote(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  dayStageVote(params?: CallParams<TownHallArgs['obj']['dayStageVote(uint64)void'] | TownHallArgs['tuple']['dayStageVote(uint64)void']>): TownHallComposer<[...TReturns, TownHallReturns['dayStageVote(uint64)void'] | undefined]>

  /**
   * Calls the dayStageEliminate()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  dayStageEliminate(params?: CallParams<TownHallArgs['obj']['dayStageEliminate()void'] | TownHallArgs['tuple']['dayStageEliminate()void']>): TownHallComposer<[...TReturns, TownHallReturns['dayStageEliminate()void'] | undefined]>

  /**
   * Calls the dayStageUnmasking(byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  dayStageUnmasking(params?: CallParams<TownHallArgs['obj']['dayStageUnmasking(byte[])void'] | TownHallArgs['tuple']['dayStageUnmasking(byte[])void']>): TownHallComposer<[...TReturns, TownHallReturns['dayStageUnmasking(byte[])void'] | undefined]>

  /**
   * Calls the nightStageMafiaCommit(byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  nightStageMafiaCommit(params?: CallParams<TownHallArgs['obj']['nightStageMafiaCommit(byte[])void'] | TownHallArgs['tuple']['nightStageMafiaCommit(byte[])void']>): TownHallComposer<[...TReturns, TownHallReturns['nightStageMafiaCommit(byte[])void'] | undefined]>

  /**
   * Calls the nightStageDoctorCommit(byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  nightStageDoctorCommit(params?: CallParams<TownHallArgs['obj']['nightStageDoctorCommit(byte[])void'] | TownHallArgs['tuple']['nightStageDoctorCommit(byte[])void']>): TownHallComposer<[...TReturns, TownHallReturns['nightStageDoctorCommit(byte[])void'] | undefined]>

  /**
   * Calls the dawnStageMafiaReveal(address,byte[32])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  dawnStageMafiaReveal(params?: CallParams<TownHallArgs['obj']['dawnStageMafiaReveal(address,byte[32])void'] | TownHallArgs['tuple']['dawnStageMafiaReveal(address,byte[32])void']>): TownHallComposer<[...TReturns, TownHallReturns['dawnStageMafiaReveal(address,byte[32])void'] | undefined]>

  /**
   * Calls the dawnStageDoctorReveal(address,byte[32])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  dawnStageDoctorReveal(params?: CallParams<TownHallArgs['obj']['dawnStageDoctorReveal(address,byte[32])void'] | TownHallArgs['tuple']['dawnStageDoctorReveal(address,byte[32])void']>): TownHallComposer<[...TReturns, TownHallReturns['dawnStageDoctorReveal(address,byte[32])void'] | undefined]>

  /**
   * Calls the dawnStageDeadOrSaved()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  dawnStageDeadOrSaved(params?: CallParams<TownHallArgs['obj']['dawnStageDeadOrSaved()void'] | TownHallArgs['tuple']['dawnStageDeadOrSaved()void']>): TownHallComposer<[...TReturns, TownHallReturns['dawnStageDeadOrSaved()void'] | undefined]>

  /**
   * Calls the dawnStageUnmasking(byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  dawnStageUnmasking(params?: CallParams<TownHallArgs['obj']['dawnStageUnmasking(byte[])void'] | TownHallArgs['tuple']['dawnStageUnmasking(byte[])void']>): TownHallComposer<[...TReturns, TownHallReturns['dawnStageUnmasking(byte[])void'] | undefined]>

  /**
   * Calls the gameOver()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  gameOver(params?: CallParams<TownHallArgs['obj']['gameOver()void'] | TownHallArgs['tuple']['gameOver()void']>): TownHallComposer<[...TReturns, TownHallReturns['gameOver()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the TownHall smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): TownHallComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): TownHallComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<TownHallComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<TownHallComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<TownHallComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<TownHallComposerResults<TReturns>>
}
export type TownHallComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

