#pragma version 10
//#pragma mode logicsig
intcblock 1 TMPL_APP_ID
bytecblock 0x

// This TEAL was generated by TEALScript v0.107.0
// https://github.com/algorandfoundation/TEALScript

// The address of this logic signature is 6DDZ3O2KXJHPGDZOHZULQZBAHILVPWEOB7QNVYQQ3BFP5WH627QU32KL3I

b *route_logic

// logic()void
*route_logic:
	// execute logic()void
	callsub logic
	intc 0 // 1
	return

// logic(): void
//
// logic: Funder
// The logic signature for the Funder contract.
// This contract is used to fund the ring signature.
// The day algo address will use it to fund the equivalent night algo address.
logic:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts/FunderLSig.algo.ts:16
	// appCall = this.txnGroup[this.txn.groupIndex + RING_SIG_LINKS_AMNT + 1]
	txn GroupIndex
	pushint 6
	+
	intc 0 // 1
	+
	frame_bury 0 // appCall: txn

	// contracts/FunderLSig.algo.ts:17
	// assert(appCall.applicationID === this.APP_ID)
	frame_dig 0 // appCall: txn
	gtxns ApplicationID
	intc 1 // TMPL_APP_ID
	==
	assert

	// contracts/FunderLSig.algo.ts:18
	// assert(
	//       appCall.applicationArgs[0] ===
	//       method('assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void')
	//     )
	frame_dig 0 // appCall: txn
	gtxns ApplicationArgs 0
	pushbytes 0x9b07bf8f // method "assignRole(byte[],byte[],byte[],byte[],byte[],pay,pay,pay,pay,pay,pay,pay)void"
	==
	assert

	// contracts/FunderLSig.algo.ts:24
	// msg = appCall.applicationArgs[1]
	frame_dig 0 // appCall: txn
	gtxns ApplicationArgs 1
	frame_bury 1 // msg: byte[]

	// contracts/FunderLSig.algo.ts:26
	// verifyPayTxn(this.txn, {
	//       amount: LSIG_FUND_AMOUNT,
	//       fee: 0,
	//       closeRemainderTo: globals.zeroAddress,
	//       rekeyTo: globals.zeroAddress,
	//     })
	// verify pay
	txn TypeEnum
	intc 0 //  pay
	==

	// transaction verification failed: {"txn":"this.txn","field":"typeEnum","expected":"pay"}
	assert

	// verify amount
	txn Amount
	pushint 150000
	==

	// transaction verification failed: {"txn":"this.txn","field":"amount","expected":"LSIG_FUND_AMOUNT"}
	assert

	// verify fee
	txn Fee
	pushint 0
	==

	// transaction verification failed: {"txn":"this.txn","field":"fee","expected":"0"}
	assert

	// verify closeRemainderTo
	txn CloseRemainderTo
	global ZeroAddress
	==

	// transaction verification failed: {"txn":"this.txn","field":"closeRemainderTo","expected":"globals.zeroAddress"}
	assert

	// verify rekeyTo
	txn RekeyTo
	global ZeroAddress
	==

	// transaction verification failed: {"txn":"this.txn","field":"rekeyTo","expected":"globals.zeroAddress"}
	assert

	// contracts/FunderLSig.algo.ts:34
	// assert(rawBytes(this.txn.receiver) === extract3(msg, 2, 32))
	txn Receiver
	frame_dig 1 // msg: byte[]
	extract 2 32
	==
	assert
	retsub